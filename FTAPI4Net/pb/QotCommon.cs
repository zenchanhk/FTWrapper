// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Futu.OpenApi.Pb {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class QotCommon {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    private static pbd::MessageDescriptor internal__static_Qot_Common_Security__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.Security, global::Futu.OpenApi.Pb.QotCommon.Security.Builder> internal__static_Qot_Common_Security__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_Common_KLine__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.KLine, global::Futu.OpenApi.Pb.QotCommon.KLine.Builder> internal__static_Qot_Common_KLine__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_Common_OptionBasicQotExData__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.OptionBasicQotExData, global::Futu.OpenApi.Pb.QotCommon.OptionBasicQotExData.Builder> internal__static_Qot_Common_OptionBasicQotExData__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_Common_PreAfterMarketData__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData, global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.Builder> internal__static_Qot_Common_PreAfterMarketData__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_Common_BasicQot__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.BasicQot, global::Futu.OpenApi.Pb.QotCommon.BasicQot.Builder> internal__static_Qot_Common_BasicQot__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_Common_TimeShare__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.TimeShare, global::Futu.OpenApi.Pb.QotCommon.TimeShare.Builder> internal__static_Qot_Common_TimeShare__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_Common_SecurityStaticBasic__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.SecurityStaticBasic, global::Futu.OpenApi.Pb.QotCommon.SecurityStaticBasic.Builder> internal__static_Qot_Common_SecurityStaticBasic__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_Common_WarrantStaticExData__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.WarrantStaticExData, global::Futu.OpenApi.Pb.QotCommon.WarrantStaticExData.Builder> internal__static_Qot_Common_WarrantStaticExData__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_Common_OptionStaticExData__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.OptionStaticExData, global::Futu.OpenApi.Pb.QotCommon.OptionStaticExData.Builder> internal__static_Qot_Common_OptionStaticExData__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_Common_SecurityStaticInfo__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.SecurityStaticInfo, global::Futu.OpenApi.Pb.QotCommon.SecurityStaticInfo.Builder> internal__static_Qot_Common_SecurityStaticInfo__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_Common_Broker__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.Broker, global::Futu.OpenApi.Pb.QotCommon.Broker.Builder> internal__static_Qot_Common_Broker__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_Common_Ticker__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.Ticker, global::Futu.OpenApi.Pb.QotCommon.Ticker.Builder> internal__static_Qot_Common_Ticker__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_Common_OrderBook__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.OrderBook, global::Futu.OpenApi.Pb.QotCommon.OrderBook.Builder> internal__static_Qot_Common_OrderBook__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_Common_OrderDetail__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.OrderDetail, global::Futu.OpenApi.Pb.QotCommon.OrderDetail.Builder> internal__static_Qot_Common_OrderDetail__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_Common_ShareHoldingChange__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.ShareHoldingChange, global::Futu.OpenApi.Pb.QotCommon.ShareHoldingChange.Builder> internal__static_Qot_Common_ShareHoldingChange__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_Common_SubInfo__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.SubInfo, global::Futu.OpenApi.Pb.QotCommon.SubInfo.Builder> internal__static_Qot_Common_SubInfo__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_Common_ConnSubInfo__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.ConnSubInfo, global::Futu.OpenApi.Pb.QotCommon.ConnSubInfo.Builder> internal__static_Qot_Common_ConnSubInfo__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_Common_PlateInfo__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.PlateInfo, global::Futu.OpenApi.Pb.QotCommon.PlateInfo.Builder> internal__static_Qot_Common_PlateInfo__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Qot_Common_Rehab__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.Rehab, global::Futu.OpenApi.Pb.QotCommon.Rehab.Builder> internal__static_Qot_Common_Rehab__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static QotCommon() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBRb3RfQ29tbW9uLnByb3RvEgpRb3RfQ29tbW9uGgxDb21tb24ucHJvdG8i", 
            "NgoIU2VjdXJpdHkSFgoGbWFya2V0GAEgAigFUgZtYXJrZXQSEgoEY29kZRgC", 
            "IAIoCVIEY29kZSL7AgoFS0xpbmUSEgoEdGltZRgBIAIoCVIEdGltZRIYCgdp", 
            "c0JsYW5rGAIgAigIUgdpc0JsYW5rEhwKCWhpZ2hQcmljZRgDIAEoAVIJaGln", 
            "aFByaWNlEhwKCW9wZW5QcmljZRgEIAEoAVIJb3BlblByaWNlEhoKCGxvd1By", 
            "aWNlGAUgASgBUghsb3dQcmljZRIeCgpjbG9zZVByaWNlGAYgASgBUgpjbG9z", 
            "ZVByaWNlEiYKDmxhc3RDbG9zZVByaWNlGAcgASgBUg5sYXN0Q2xvc2VQcmlj", 
            "ZRIWCgZ2b2x1bWUYCCABKANSBnZvbHVtZRIaCgh0dXJub3ZlchgJIAEoAVII", 
            "dHVybm92ZXISIgoMdHVybm92ZXJSYXRlGAogASgBUgx0dXJub3ZlclJhdGUS", 
            "DgoCcGUYCyABKAFSAnBlEh4KCmNoYW5nZVJhdGUYDCABKAFSCmNoYW5nZVJh", 
            "dGUSHAoJdGltZXN0YW1wGA0gASgBUgl0aW1lc3RhbXAixgQKFE9wdGlvbkJh", 
            "c2ljUW90RXhEYXRhEiAKC3N0cmlrZVByaWNlGAEgAigBUgtzdHJpa2VQcmlj", 
            "ZRIiCgxjb250cmFjdFNpemUYAiACKAVSDGNvbnRyYWN0U2l6ZRIiCgxvcGVu", 
            "SW50ZXJlc3QYAyACKAVSDG9wZW5JbnRlcmVzdBIsChFpbXBsaWVkVm9sYXRp", 
            "bGl0eRgEIAIoAVIRaW1wbGllZFZvbGF0aWxpdHkSGAoHcHJlbWl1bRgFIAIo", 
            "AVIHcHJlbWl1bRIUCgVkZWx0YRgGIAIoAVIFZGVsdGESFAoFZ2FtbWEYByAC", 
            "KAFSBWdhbW1hEhIKBHZlZ2EYCCACKAFSBHZlZ2ESFAoFdGhldGEYCSACKAFS", 
            "BXRoZXRhEhAKA3JobxgKIAIoAVIDcmhvEigKD25ldE9wZW5JbnRlcmVzdBgL", 
            "IAEoBVIPbmV0T3BlbkludGVyZXN0Ei4KEmV4cGlyeURhdGVEaXN0YW5jZRgM", 
            "IAEoBVISZXhwaXJ5RGF0ZURpc3RhbmNlEjIKFGNvbnRyYWN0Tm9taW5hbFZh", 
            "bHVlGA0gASgBUhRjb250cmFjdE5vbWluYWxWYWx1ZRIuChJvd25lckxvdE11", 
            "bHRpcGxpZXIYDiABKAFSEm93bmVyTG90TXVsdGlwbGllchImCg5vcHRpb25B", 
            "cmVhVHlwZRgPIAEoBVIOb3B0aW9uQXJlYVR5cGUSLgoSY29udHJhY3RNdWx0", 
            "aXBsaWVyGBAgASgBUhJjb250cmFjdE11bHRpcGxpZXIi9AEKElByZUFmdGVy", 
            "TWFya2V0RGF0YRIUCgVwcmljZRgBIAEoAVIFcHJpY2USHAoJaGlnaFByaWNl", 
            "GAIgASgBUgloaWdoUHJpY2USGgoIbG93UHJpY2UYAyABKAFSCGxvd1ByaWNl", 
            "EhYKBnZvbHVtZRgEIAEoA1IGdm9sdW1lEhoKCHR1cm5vdmVyGAUgASgBUgh0", 
            "dXJub3ZlchIcCgljaGFuZ2VWYWwYBiABKAFSCWNoYW5nZVZhbBIeCgpjaGFu", 
            "Z2VSYXRlGAcgASgBUgpjaGFuZ2VSYXRlEhwKCWFtcGxpdHVkZRgIIAEoAVIJ", 
            "YW1wbGl0dWRlIqIGCghCYXNpY1FvdBIwCghzZWN1cml0eRgBIAIoCzIULlFv", 
            "dF9Db21tb24uU2VjdXJpdHlSCHNlY3VyaXR5EiAKC2lzU3VzcGVuZGVkGAIg", 
            "AigIUgtpc1N1c3BlbmRlZBIaCghsaXN0VGltZRgDIAIoCVIIbGlzdFRpbWUS", 
            "IAoLcHJpY2VTcHJlYWQYBCACKAFSC3ByaWNlU3ByZWFkEh4KCnVwZGF0ZVRp", 
            "bWUYBSACKAlSCnVwZGF0ZVRpbWUSHAoJaGlnaFByaWNlGAYgAigBUgloaWdo", 
            "UHJpY2USHAoJb3BlblByaWNlGAcgAigBUglvcGVuUHJpY2USGgoIbG93UHJp", 
            "Y2UYCCACKAFSCGxvd1ByaWNlEhoKCGN1clByaWNlGAkgAigBUghjdXJQcmlj", 
            "ZRImCg5sYXN0Q2xvc2VQcmljZRgKIAIoAVIObGFzdENsb3NlUHJpY2USFgoG", 
            "dm9sdW1lGAsgAigDUgZ2b2x1bWUSGgoIdHVybm92ZXIYDCACKAFSCHR1cm5v", 
            "dmVyEiIKDHR1cm5vdmVyUmF0ZRgNIAIoAVIMdHVybm92ZXJSYXRlEhwKCWFt", 
            "cGxpdHVkZRgOIAIoAVIJYW1wbGl0dWRlEh4KCmRhcmtTdGF0dXMYDyABKAVS", 
            "CmRhcmtTdGF0dXMSRAoMb3B0aW9uRXhEYXRhGBAgASgLMiAuUW90X0NvbW1v", 
            "bi5PcHRpb25CYXNpY1FvdEV4RGF0YVIMb3B0aW9uRXhEYXRhEiQKDWxpc3RU", 
            "aW1lc3RhbXAYESABKAFSDWxpc3RUaW1lc3RhbXASKAoPdXBkYXRlVGltZXN0", 
            "YW1wGBIgASgBUg91cGRhdGVUaW1lc3RhbXASPAoJcHJlTWFya2V0GBMgASgL", 
            "Mh4uUW90X0NvbW1vbi5QcmVBZnRlck1hcmtldERhdGFSCXByZU1hcmtldBJA", 
            "CgthZnRlck1hcmtldBgUIAEoCzIeLlFvdF9Db21tb24uUHJlQWZ0ZXJNYXJr", 
            "ZXREYXRhUgthZnRlck1hcmtldBIcCglzZWNTdGF0dXMYFSABKAVSCXNlY1N0", 
            "YXR1cyL9AQoJVGltZVNoYXJlEhIKBHRpbWUYASACKAlSBHRpbWUSFgoGbWlu", 
            "dXRlGAIgAigFUgZtaW51dGUSGAoHaXNCbGFuaxgDIAIoCFIHaXNCbGFuaxIU", 
            "CgVwcmljZRgEIAEoAVIFcHJpY2USJgoObGFzdENsb3NlUHJpY2UYBSABKAFS", 
            "Dmxhc3RDbG9zZVByaWNlEhoKCGF2Z1ByaWNlGAYgASgBUghhdmdQcmljZRIW", 
            "CgZ2b2x1bWUYByABKANSBnZvbHVtZRIaCgh0dXJub3ZlchgIIAEoAVIIdHVy", 
            "bm92ZXISHAoJdGltZXN0YW1wGAkgASgBUgl0aW1lc3RhbXAi/wEKE1NlY3Vy", 
            "aXR5U3RhdGljQmFzaWMSMAoIc2VjdXJpdHkYASACKAsyFC5Rb3RfQ29tbW9u", 
            "LlNlY3VyaXR5UghzZWN1cml0eRIOCgJpZBgCIAIoA1ICaWQSGAoHbG90U2l6", 
            "ZRgDIAIoBVIHbG90U2l6ZRIYCgdzZWNUeXBlGAQgAigFUgdzZWNUeXBlEhIK", 
            "BG5hbWUYBSACKAlSBG5hbWUSGgoIbGlzdFRpbWUYBiACKAlSCGxpc3RUaW1l", 
            "EhwKCWRlbGlzdGluZxgHIAEoCFIJZGVsaXN0aW5nEiQKDWxpc3RUaW1lc3Rh", 
            "bXAYCCABKAFSDWxpc3RUaW1lc3RhbXAiVQoTV2FycmFudFN0YXRpY0V4RGF0", 
            "YRISCgR0eXBlGAEgAigFUgR0eXBlEioKBW93bmVyGAIgAigLMhQuUW90X0Nv", 
            "bW1vbi5TZWN1cml0eVIFb3duZXIinAIKEk9wdGlvblN0YXRpY0V4RGF0YRIS", 
            "CgR0eXBlGAEgAigFUgR0eXBlEioKBW93bmVyGAIgAigLMhQuUW90X0NvbW1v", 
            "bi5TZWN1cml0eVIFb3duZXISHgoKc3RyaWtlVGltZRgDIAIoCVIKc3RyaWtl", 
            "VGltZRIgCgtzdHJpa2VQcmljZRgEIAIoAVILc3RyaWtlUHJpY2USGAoHc3Vz", 
            "cGVuZBgFIAIoCFIHc3VzcGVuZBIWCgZtYXJrZXQYBiACKAlSBm1hcmtldBIo", 
            "Cg9zdHJpa2VUaW1lc3RhbXAYByABKAFSD3N0cmlrZVRpbWVzdGFtcBIoCg9p", 
            "bmRleE9wdGlvblR5cGUYCCABKAVSD2luZGV4T3B0aW9uVHlwZSLWAQoSU2Vj", 
            "dXJpdHlTdGF0aWNJbmZvEjUKBWJhc2ljGAEgAigLMh8uUW90X0NvbW1vbi5T", 
            "ZWN1cml0eVN0YXRpY0Jhc2ljUgViYXNpYxJFCg13YXJyYW50RXhEYXRhGAIg", 
            "ASgLMh8uUW90X0NvbW1vbi5XYXJyYW50U3RhdGljRXhEYXRhUg13YXJyYW50", 
            "RXhEYXRhEkIKDG9wdGlvbkV4RGF0YRgDIAEoCzIeLlFvdF9Db21tb24uT3B0", 
            "aW9uU3RhdGljRXhEYXRhUgxvcHRpb25FeERhdGEiPgoGQnJva2VyEg4KAmlk", 
            "GAEgAigDUgJpZBISCgRuYW1lGAIgAigJUgRuYW1lEhAKA3BvcxgDIAIoBVID", 
            "cG9zIqICCgZUaWNrZXISEgoEdGltZRgBIAIoCVIEdGltZRIaCghzZXF1ZW5j", 
            "ZRgCIAIoA1IIc2VxdWVuY2USEAoDZGlyGAMgAigFUgNkaXISFAoFcHJpY2UY", 
            "BCACKAFSBXByaWNlEhYKBnZvbHVtZRgFIAIoA1IGdm9sdW1lEhoKCHR1cm5v", 
            "dmVyGAYgAigBUgh0dXJub3ZlchIaCghyZWN2VGltZRgHIAEoAVIIcmVjdlRp", 
            "bWUSEgoEdHlwZRgIIAEoBVIEdHlwZRIaCgh0eXBlU2lnbhgJIAEoBVIIdHlw", 
            "ZVNpZ24SIgoMcHVzaERhdGFUeXBlGAogASgFUgxwdXNoRGF0YVR5cGUSHAoJ", 
            "dGltZXN0YW1wGAsgASgBUgl0aW1lc3RhbXAiWwoJT3JkZXJCb29rEhQKBXBy", 
            "aWNlGAEgAigBUgVwcmljZRIWCgZ2b2x1bWUYAiACKANSBnZvbHVtZRIgCgtv", 
            "cmVkZXJDb3VudBgDIAIoBVILb3JlZGVyQ291bnQiSQoLT3JkZXJEZXRhaWwS", 
            "HgoKb3JkZXJDb3VudBgBIAIoBVIKb3JkZXJDb3VudBIaCghvcmRlclZvbBgC", 
            "IAMoAVIIb3JkZXJWb2wi6gEKElNoYXJlSG9sZGluZ0NoYW5nZRIeCgpob2xk", 
            "ZXJOYW1lGAEgAigJUgpob2xkZXJOYW1lEh4KCmhvbGRpbmdRdHkYAiACKAFS", 
            "CmhvbGRpbmdRdHkSIgoMaG9sZGluZ1JhdGlvGAMgAigBUgxob2xkaW5nUmF0", 
            "aW8SHAoJY2hhbmdlUXR5GAQgAigBUgljaGFuZ2VRdHkSIAoLY2hhbmdlUmF0", 
            "aW8YBSACKAFSC2NoYW5nZVJhdGlvEhIKBHRpbWUYBiACKAlSBHRpbWUSHAoJ", 
            "dGltZXN0YW1wGAcgASgBUgl0aW1lc3RhbXAiXQoHU3ViSW5mbxIYCgdzdWJU", 
            "eXBlGAEgAigFUgdzdWJUeXBlEjgKDHNlY3VyaXR5TGlzdBgCIAMoCzIULlFv", 
            "dF9Db21tb24uU2VjdXJpdHlSDHNlY3VyaXR5TGlzdCKIAQoLQ29ublN1Yklu", 
            "Zm8SNQoLc3ViSW5mb0xpc3QYASADKAsyEy5Rb3RfQ29tbW9uLlN1YkluZm9S", 
            "C3N1YkluZm9MaXN0EhwKCXVzZWRRdW90YRgCIAIoBVIJdXNlZFF1b3RhEiQK", 
            "DWlzT3duQ29ubkRhdGEYAyACKAhSDWlzT3duQ29ubkRhdGEiaQoJUGxhdGVJ", 
            "bmZvEioKBXBsYXRlGAEgAigLMhQuUW90X0NvbW1vbi5TZWN1cml0eVIFcGxh", 
            "dGUSEgoEbmFtZRgCIAIoCVIEbmFtZRIcCglwbGF0ZVR5cGUYAyABKAVSCXBs", 
            "YXRlVHlwZSK1BQoFUmVoYWISEgoEdGltZRgBIAIoCVIEdGltZRImCg5jb21w", 
            "YW55QWN0RmxhZxgCIAIoA1IOY29tcGFueUFjdEZsYWcSHgoKZndkRmFjdG9y", 
            "QRgDIAIoAVIKZndkRmFjdG9yQRIeCgpmd2RGYWN0b3JCGAQgAigBUgpmd2RG", 
            "YWN0b3JCEh4KCmJ3ZEZhY3RvckEYBSACKAFSCmJ3ZEZhY3RvckESHgoKYndk", 
            "RmFjdG9yQhgGIAIoAVIKYndkRmFjdG9yQhIcCglzcGxpdEJhc2UYByABKAVS", 
            "CXNwbGl0QmFzZRIaCghzcGxpdEVydBgIIAEoBVIIc3BsaXRFcnQSGgoIam9p", 
            "bkJhc2UYCSABKAVSCGpvaW5CYXNlEhgKB2pvaW5FcnQYCiABKAVSB2pvaW5F", 
            "cnQSHAoJYm9udXNCYXNlGAsgASgFUglib251c0Jhc2USGgoIYm9udXNFcnQY", 
            "DCABKAVSCGJvbnVzRXJ0EiIKDHRyYW5zZmVyQmFzZRgNIAEoBVIMdHJhbnNm", 
            "ZXJCYXNlEiAKC3RyYW5zZmVyRXJ0GA4gASgFUgt0cmFuc2ZlckVydBIcCglh", 
            "bGxvdEJhc2UYDyABKAVSCWFsbG90QmFzZRIaCghhbGxvdEVydBgQIAEoBVII", 
            "YWxsb3RFcnQSHgoKYWxsb3RQcmljZRgRIAEoAVIKYWxsb3RQcmljZRIYCgdh", 
            "ZGRCYXNlGBIgASgFUgdhZGRCYXNlEhYKBmFkZEVydBgTIAEoBVIGYWRkRXJ0", 
            "EhoKCGFkZFByaWNlGBQgASgBUghhZGRQcmljZRIaCghkaXZpZGVuZBgVIAEo", 
            "AVIIZGl2aWRlbmQSHgoKc3BEaXZpZGVuZBgWIAEoAVIKc3BEaXZpZGVuZBIc", 
            "Cgl0aW1lc3RhbXAYFyABKAFSCXRpbWVzdGFtcCqrAQoJUW90TWFya2V0EhUK", 
            "EVFvdE1hcmtldF9Vbmtub3duEAASGQoVUW90TWFya2V0X0hLX1NlY3VyaXR5", 
            "EAESFwoTUW90TWFya2V0X0hLX0Z1dHVyZRACEhkKFVFvdE1hcmtldF9VU19T", 
            "ZWN1cml0eRALEhsKF1FvdE1hcmtldF9DTlNIX1NlY3VyaXR5EBUSGwoXUW90", 
            "TWFya2V0X0NOU1pfU2VjdXJpdHkQFiqBAgoMU2VjdXJpdHlUeXBlEhgKFFNl", 
            "Y3VyaXR5VHlwZV9Vbmtub3duEAASFQoRU2VjdXJpdHlUeXBlX0JvbmQQARIV", 
            "ChFTZWN1cml0eVR5cGVfQndydBACEhUKEVNlY3VyaXR5VHlwZV9FcXR5EAMS", 
            "FgoSU2VjdXJpdHlUeXBlX1RydXN0EAQSGAoUU2VjdXJpdHlUeXBlX1dhcnJh", 
            "bnQQBRIWChJTZWN1cml0eVR5cGVfSW5kZXgQBhIWChJTZWN1cml0eVR5cGVf", 
            "UGxhdGUQBxIVChFTZWN1cml0eVR5cGVfRHJ2dBAIEhkKFVNlY3VyaXR5VHlw", 
            "ZV9QbGF0ZVNldBAJKooBCgxQbGF0ZVNldFR5cGUSFAoQUGxhdGVTZXRUeXBl", 
            "X0FsbBAAEhkKFVBsYXRlU2V0VHlwZV9JbmR1c3RyeRABEhcKE1BsYXRlU2V0", 
            "VHlwZV9SZWdpb24QAhIYChRQbGF0ZVNldFR5cGVfQ29uY2VwdBADEhYKElBs", 
            "YXRlU2V0VHlwZV9PdGhlchAEKpUBCgtXYXJyYW50VHlwZRIXChNXYXJyYW50", 
            "VHlwZV9Vbmtub3duEAASEwoPV2FycmFudFR5cGVfQnV5EAESFAoQV2FycmFu", 
            "dFR5cGVfU2VsbBACEhQKEFdhcnJhbnRUeXBlX0J1bGwQAxIUChBXYXJyYW50", 
            "VHlwZV9CZWFyEAQSFgoSV2FycmFudFR5cGVfSW5MaW5lEAUqTQoKT3B0aW9u", 
            "VHlwZRIWChJPcHRpb25UeXBlX1Vua25vd24QABITCg9PcHRpb25UeXBlX0Nh", 
            "bGwQARISCg5PcHRpb25UeXBlX1B1dBACKmUKD0luZGV4T3B0aW9uVHlwZRIb", 
            "ChdJbmRleE9wdGlvblR5cGVfVW5rbm93bhAAEhoKFkluZGV4T3B0aW9uVHlw", 
            "ZV9Ob3JtYWwQARIZChVJbmRleE9wdGlvblR5cGVfU21hbGwQAiqCAQoOT3B0", 
            "aW9uQXJlYVR5cGUSGgoWT3B0aW9uQXJlYVR5cGVfVW5rbm93bhAAEhsKF09w", 
            "dGlvbkFyZWFUeXBlX0FtZXJpY2FuEAESGwoXT3B0aW9uQXJlYVR5cGVfRXVy", 
            "b3BlYW4QAhIaChZPcHRpb25BcmVhVHlwZV9CZXJtdWRhEAMqwwQKDlFvdE1h", 
            "cmtldFN0YXRlEhcKE1FvdE1hcmtldFN0YXRlX05vbmUQABIaChZRb3RNYXJr", 
            "ZXRTdGF0ZV9BdWN0aW9uEAESHgoaUW90TWFya2V0U3RhdGVfV2FpdGluZ09w", 
            "ZW4QAhIaChZRb3RNYXJrZXRTdGF0ZV9Nb3JuaW5nEAMSFwoTUW90TWFya2V0", 
            "U3RhdGVfUmVzdBAEEhwKGFFvdE1hcmtldFN0YXRlX0FmdGVybm9vbhAFEhkK", 
            "FVFvdE1hcmtldFN0YXRlX0Nsb3NlZBAGEiEKHVFvdE1hcmtldFN0YXRlX1By", 
            "ZU1hcmtldEJlZ2luEAgSHwobUW90TWFya2V0U3RhdGVfUHJlTWFya2V0RW5k", 
            "EAkSIgoeUW90TWFya2V0U3RhdGVfQWZ0ZXJIb3Vyc0JlZ2luEAoSIAocUW90", 
            "TWFya2V0U3RhdGVfQWZ0ZXJIb3Vyc0VuZBALEhwKGFFvdE1hcmtldFN0YXRl", 
            "X05pZ2h0T3BlbhANEhsKF1FvdE1hcmtldFN0YXRlX05pZ2h0RW5kEA4SIAoc", 
            "UW90TWFya2V0U3RhdGVfRnV0dXJlRGF5T3BlbhAPEiEKHVFvdE1hcmtldFN0", 
            "YXRlX0Z1dHVyZURheUJyZWFrEBASIQodUW90TWFya2V0U3RhdGVfRnV0dXJl", 
            "RGF5Q2xvc2UQERInCiNRb3RNYXJrZXRTdGF0ZV9GdXR1cmVEYXlXYWl0Rm9y", 
            "T3BlbhASEhgKFFFvdE1hcmtldFN0YXRlX0hrQ2FzEBMqYAoNVHJhZGVEYXRl", 
            "VHlwZRIXChNUcmFkZURhdGVUeXBlX1dob2xlEAASGQoVVHJhZGVEYXRlVHlw", 
            "ZV9Nb3JuaW5nEAESGwoXVHJhZGVEYXRlVHlwZV9BZnRlcm5vb24QAipOCglS", 
            "ZWhhYlR5cGUSEgoOUmVoYWJUeXBlX05vbmUQABIVChFSZWhhYlR5cGVfRm9y", 
            "d2FyZBABEhYKElJlaGFiVHlwZV9CYWNrd2FyZBACKt0BCgZLTFR5cGUSEgoO", 
            "S0xUeXBlX1Vua25vd24QABIPCgtLTFR5cGVfMU1pbhABEg4KCktMVHlwZV9E", 
            "YXkQAhIPCgtLTFR5cGVfV2VlaxADEhAKDEtMVHlwZV9Nb250aBAEEg8KC0tM", 
            "VHlwZV9ZZWFyEAUSDwoLS0xUeXBlXzVNaW4QBhIQCgxLTFR5cGVfMTVNaW4Q", 
            "BxIQCgxLTFR5cGVfMzBNaW4QCBIQCgxLTFR5cGVfNjBNaW4QCRIPCgtLTFR5", 
            "cGVfM01pbhAKEhIKDktMVHlwZV9RdWFydGVyEAsq9QEKCEtMRmllbGRzEhEK", 
            "DUtMRmllbGRzX05vbmUQABIRCg1LTEZpZWxkc19IaWdoEAESEQoNS0xGaWVs", 
            "ZHNfT3BlbhACEhAKDEtMRmllbGRzX0xvdxAEEhIKDktMRmllbGRzX0Nsb3Nl", 
            "EAgSFgoSS0xGaWVsZHNfTGFzdENsb3NlEBASEwoPS0xGaWVsZHNfVm9sdW1l", 
            "ECASFQoRS0xGaWVsZHNfVHVybm92ZXIQQBIaChVLTEZpZWxkc19UdXJub3Zl", 
            "clJhdGUQgAESEAoLS0xGaWVsZHNfUEUQgAISGAoTS0xGaWVsZHNfQ2hhbmdl", 
            "UmF0ZRCABCqDAwoHU3ViVHlwZRIQCgxTdWJUeXBlX05vbmUQABIRCg1TdWJU", 
            "eXBlX0Jhc2ljEAESFQoRU3ViVHlwZV9PcmRlckJvb2sQAhISCg5TdWJUeXBl", 
            "X1RpY2tlchAEEg4KClN1YlR5cGVfUlQQBRISCg5TdWJUeXBlX0tMX0RheRAG", 
            "EhMKD1N1YlR5cGVfS0xfNU1pbhAHEhQKEFN1YlR5cGVfS0xfMTVNaW4QCBIU", 
            "ChBTdWJUeXBlX0tMXzMwTWluEAkSFAoQU3ViVHlwZV9LTF82ME1pbhAKEhMK", 
            "D1N1YlR5cGVfS0xfMU1pbhALEhMKD1N1YlR5cGVfS0xfV2VlaxAMEhQKEFN1", 
            "YlR5cGVfS0xfTW9udGgQDRISCg5TdWJUeXBlX0Jyb2tlchAOEhYKElN1YlR5", 
            "cGVfS0xfUXVyYXRlchAPEhMKD1N1YlR5cGVfS0xfWWVhchAQEhMKD1N1YlR5", 
            "cGVfS0xfM01pbhAREhcKE1N1YlR5cGVfT3JkZXJEZXRhaWwQEip9Cg9UaWNr", 
            "ZXJEaXJlY3Rpb24SGwoXVGlja2VyRGlyZWN0aW9uX1Vua25vd24QABIXChNU", 
            "aWNrZXJEaXJlY3Rpb25fQmlkEAESFwoTVGlja2VyRGlyZWN0aW9uX0FzaxAC", 
            "EhsKF1RpY2tlckRpcmVjdGlvbl9OZXV0cmFsEAMqgwcKClRpY2tlclR5cGUS", 
            "FgoSVGlja2VyVHlwZV9Vbmtub3duEAASGAoUVGlja2VyVHlwZV9BdXRvbWF0", 
            "Y2gQARITCg9UaWNrZXJUeXBlX0xhdGUQAhIcChhUaWNrZXJUeXBlX05vbmVB", 
            "dXRvbWF0Y2gQAxIdChlUaWNrZXJUeXBlX0ludGVyQXV0b21hdGNoEAQSIQod", 
            "VGlja2VyVHlwZV9JbnRlck5vbmVBdXRvbWF0Y2gQBRIVChFUaWNrZXJUeXBl", 
            "X09kZExvdBAGEhYKElRpY2tlclR5cGVfQXVjdGlvbhAHEhMKD1RpY2tlclR5", 
            "cGVfQnVsaxAIEhQKEFRpY2tlclR5cGVfQ3Jhc2gQCRIaChZUaWNrZXJUeXBl", 
            "X0Nyb3NzTWFya2V0EAoSFwoTVGlja2VyVHlwZV9CdWxrU29sZBALEhoKFlRp", 
            "Y2tlclR5cGVfRnJlZU9uQm9hcmQQDBIbChdUaWNrZXJUeXBlX1J1bGUxMjdP", 
            "cjE1NRANEhQKEFRpY2tlclR5cGVfRGVsYXkQDhIlCiFUaWNrZXJUeXBlX01h", 
            "cmtldENlbnRlckNsb3NlUHJpY2UQDxIWChJUaWNrZXJUeXBlX05leHREYXkQ", 
            "EBIiCh5UaWNrZXJUeXBlX01hcmtldENlbnRlck9wZW5pbmcQERIiCh5UaWNr", 
            "ZXJUeXBlX1ByaW9yUmVmZXJlbmNlUHJpY2UQEhIkCiBUaWNrZXJUeXBlX01h", 
            "cmtldENlbnRlck9wZW5QcmljZRATEhUKEVRpY2tlclR5cGVfU2VsbGVyEBQS", 
            "EAoMVGlja2VyVHlwZV9UEBUSIwofVGlja2VyVHlwZV9FeHRlbmRlZFRyYWRp", 
            "bmdIb3VycxAWEhkKFVRpY2tlclR5cGVfQ29udGluZ2VudBAXEhcKE1RpY2tl", 
            "clR5cGVfQXZnUHJpY2UQGBIWChJUaWNrZXJUeXBlX09UQ1NvbGQQGRIgChxU", 
            "aWNrZXJUeXBlX09kZExvdENyb3NzTWFya2V0EBoSIQodVGlja2VyVHlwZV9E", 
            "ZXJpdmF0aXZlbHlQcmljZWQQGxIeChpUaWNrZXJUeXBlX1JlT3BlbmluZ1By", 
            "aWNlZBAcEhwKGFRpY2tlclR5cGVfQ2xvc2luZ1ByaWNlZBAdEiYKIlRpY2tl", 
            "clR5cGVfQ29tcHJlaGVuc2l2ZURlbGF5UHJpY2UQHipNCgpEYXJrU3RhdHVz", 
            "EhMKD0RhcmtTdGF0dXNfTm9uZRAAEhYKEkRhcmtTdGF0dXNfVHJhZGluZxAB", 
            "EhIKDkRhcmtTdGF0dXNfRW5kEAIqlAYKDlNlY3VyaXR5U3RhdHVzEhoKFlNl", 
            "Y3VyaXR5U3RhdHVzX1Vua25vd24QABIZChVTZWN1cml0eVN0YXR1c19Ob3Jt", 
            "YWwQARIaChZTZWN1cml0eVN0YXR1c19MaXN0aW5nEAISHQoZU2VjdXJpdHlT", 
            "dGF0dXNfUHVyY2hhc2luZxADEh4KGlNlY3VyaXR5U3RhdHVzX1N1YnNjcmli", 
            "aW5nEAQSKQolU2VjdXJpdHlTdGF0dXNfQmVmb3JlRHJha1RyYWRlT3Blbmlu", 
            "ZxAFEh4KGlNlY3VyaXR5U3RhdHVzX0RyYWtUcmFkaW5nEAYSHwobU2VjdXJp", 
            "dHlTdGF0dXNfRHJha1RyYWRlRW5kEAcSGwoXU2VjdXJpdHlTdGF0dXNfVG9C", 
            "ZU9wZW4QCBIcChhTZWN1cml0eVN0YXR1c19TdXNwZW5kZWQQCRIZChVTZWN1", 
            "cml0eVN0YXR1c19DYWxsZWQQChIpCiVTZWN1cml0eVN0YXR1c19FeHBpcmVk", 
            "TGFzdFRyYWRpbmdEYXRlEAsSGgoWU2VjdXJpdHlTdGF0dXNfRXhwaXJlZBAM", 
            "EhsKF1NlY3VyaXR5U3RhdHVzX0RlbGlzdGVkEA0SKAokU2VjdXJpdHlTdGF0", 
            "dXNfQ2hhbmdlVG9UZW1wb3JhcnlDb2RlEA4SKAokU2VjdXJpdHlTdGF0dXNf", 
            "VGVtcG9yYXJ5Q29kZVRyYWRlRW5kEA8SJwojU2VjdXJpdHlTdGF0dXNfQ2hh", 
            "bmdlZFBsYXRlVHJhZGVFbmQQEBImCiJTZWN1cml0eVN0YXR1c19DaGFuZ2Vk", 
            "Q29kZVRyYWRlRW5kEBESLAooU2VjdXJpdHlTdGF0dXNfUmVjb3ZlcmFibGVD", 
            "aXJjdWl0QnJlYWtlchASEi4KKlNlY3VyaXR5U3RhdHVzX1VuUmVjb3ZlcmFi", 
            "bGVDaXJjdWl0QnJlYWtlchATEiMKH1NlY3VyaXR5U3RhdHVzX0FmdGVyQ29t", 
            "YmluYXRpb24QFBIiCh5TZWN1cml0eVN0YXR1c19BZnRlclRyYW5zYXRpb24Q", 
            "FSqBAQoOSG9sZGVyQ2F0ZWdvcnkSGQoVSG9sZGVyQ2F0ZWdvcnlfVW5rbm93", 
            "EAASGQoVSG9sZGVyQ2F0ZWdvcnlfQWdlbmN5EAESFwoTSG9sZGVyQ2F0ZWdv", 
            "cnlfRnVuZBACEiAKHEhvbGRlckNhdGVnb3J5X1Nlbmlvck1hbmFnZXIQAyp2", 
            "CgxQdXNoRGF0YVR5cGUSFwoTUHVzaERhdGFUeXBlX1Vua25vdxAAEhkKFVB1", 
            "c2hEYXRhVHlwZV9SZWFsdGltZRABEhoKFlB1c2hEYXRhVHlwZV9CeURpc0Nv", 
            "bm4QAhIWChJQdXNoRGF0YVR5cGVfQ2FjaGUQAyr+CQoJU29ydEZpZWxkEhQK", 
            "EFNvcnRGaWVsZF9Vbmtub3cQABISCg5Tb3J0RmllbGRfQ29kZRABEhYKElNv", 
            "cnRGaWVsZF9DdXJQcmljZRACEhwKGFNvcnRGaWVsZF9QcmljZUNoYW5nZVZh", 
            "bBADEhgKFFNvcnRGaWVsZF9DaGFuZ2VSYXRlEAQSFAoQU29ydEZpZWxkX1N0", 
            "YXR1cxAFEhYKElNvcnRGaWVsZF9CaWRQcmljZRAGEhYKElNvcnRGaWVsZF9B", 
            "c2tQcmljZRAHEhQKEFNvcnRGaWVsZF9CaWRWb2wQCBIUChBTb3J0RmllbGRf", 
            "QXNrVm9sEAkSFAoQU29ydEZpZWxkX1ZvbHVtZRAKEhYKElNvcnRGaWVsZF9U", 
            "dXJub3ZlchALEhcKE1NvcnRGaWVsZF9BbXBsaXR1ZGUQHhITCg9Tb3J0Rmll", 
            "bGRfU2NvcmUQDBIVChFTb3J0RmllbGRfUHJlbWl1bRANEh8KG1NvcnRGaWVs", 
            "ZF9FZmZlY3RpdmVMZXZlcmFnZRAOEhMKD1NvcnRGaWVsZF9EZWx0YRAPEh8K", 
            "G1NvcnRGaWVsZF9JbXBsaWVkVm9sYXRpbGl0eRAQEhIKDlNvcnRGaWVsZF9U", 
            "eXBlEBESGQoVU29ydEZpZWxkX1N0cmlrZVByaWNlEBISHAoYU29ydEZpZWxk", 
            "X0JyZWFrRXZlblBvaW50EBMSGgoWU29ydEZpZWxkX01hdHVyaXR5VGltZRAU", 
            "EhYKElNvcnRGaWVsZF9MaXN0VGltZRAVEhsKF1NvcnRGaWVsZF9MYXN0VHJh", 
            "ZGVUaW1lEBYSFgoSU29ydEZpZWxkX0xldmVyYWdlEBcSGAoUU29ydEZpZWxk", 
            "X0luT3V0TW9uZXkQGBIbChdTb3J0RmllbGRfUmVjb3ZlcnlQcmljZRAZEhkK", 
            "FVNvcnRGaWVsZF9DaGFuZ2VQcmljZRAaEhQKEFNvcnRGaWVsZF9DaGFuZ2UQ", 
            "GxIYChRTb3J0RmllbGRfU3RyZWV0UmF0ZRAcEhcKE1NvcnRGaWVsZF9TdHJl", 
            "ZXRWb2wQHRIZChVTb3J0RmllbGRfV2FycmFudE5hbWUQHxIUChBTb3J0Rmll", 
            "bGRfSXNzdWVyECASFQoRU29ydEZpZWxkX0xvdFNpemUQIRIXChNTb3J0Rmll", 
            "bGRfSXNzdWVTaXplECISHgoaU29ydEZpZWxkX1VwcGVyU3RyaWtlUHJpY2UQ", 
            "LRIeChpTb3J0RmllbGRfTG93ZXJTdHJpa2VQcmljZRAuEh8KG1NvcnRGaWVs", 
            "ZF9JbkxpbmVQcmljZVN0YXR1cxAvEhkKFVNvcnRGaWVsZF9QcmVDdXJQcmlj", 
            "ZRAjEhsKF1NvcnRGaWVsZF9BZnRlckN1clByaWNlECQSHwobU29ydEZpZWxk", 
            "X1ByZVByaWNlQ2hhbmdlVmFsECUSIQodU29ydEZpZWxkX0FmdGVyUHJpY2VD", 
            "aGFuZ2VWYWwQJhIbChdTb3J0RmllbGRfUHJlQ2hhbmdlUmF0ZRAnEh0KGVNv", 
            "cnRGaWVsZF9BZnRlckNoYW5nZVJhdGUQKBIaChZTb3J0RmllbGRfUHJlQW1w", 
            "bGl0dWRlECkSHAoYU29ydEZpZWxkX0FmdGVyQW1wbGl0dWRlECoSGQoVU29y", 
            "dEZpZWxkX1ByZVR1cm5vdmVyECsSGwoXU29ydEZpZWxkX0FmdGVyVHVybm92", 
            "ZXIQLCr0AgoGSXNzdWVyEhEKDUlzc3Vlcl9Vbmtub3cQABINCglJc3N1ZXJf", 
            "U0cQARINCglJc3N1ZXJfQlAQAhINCglJc3N1ZXJfQ1MQAxINCglJc3N1ZXJf", 
            "Q1QQBBINCglJc3N1ZXJfRUEQBRINCglJc3N1ZXJfR1MQBhINCglJc3N1ZXJf", 
            "SFMQBxINCglJc3N1ZXJfSlAQCBINCglJc3N1ZXJfTUIQCRINCglJc3N1ZXJf", 
            "U0MQChINCglJc3N1ZXJfVUIQCxINCglJc3N1ZXJfQkkQDBINCglJc3N1ZXJf", 
            "REIQDRINCglJc3N1ZXJfREMQDhINCglJc3N1ZXJfTUwQDxINCglJc3N1ZXJf", 
            "Tk0QEBINCglJc3N1ZXJfUkIQERINCglJc3N1ZXJfUlMQEhINCglJc3N1ZXJf", 
            "QkMQExINCglJc3N1ZXJfSFQQFBINCglJc3N1ZXJfVlQQFRINCglJc3N1ZXJf", 
            "S0MQFhINCglJc3N1ZXJfTVMQFyqXAQoJSXBvUGVyaW9kEhQKEElwb1Blcmlv", 
            "ZF9Vbmtub3cQABITCg9JcG9QZXJpb2RfVG9kYXkQARIWChJJcG9QZXJpb2Rf", 
            "VG9tb3Jyb3cQAhIWChJJcG9QZXJpb2RfTmV4dHdlZWsQAxIWChJJcG9QZXJp", 
            "b2RfTGFzdHdlZWsQBBIXChNJcG9QZXJpb2RfTGFzdG1vbnRoEAUqTgoJUHJp", 
            "Y2VUeXBlEhQKEFByaWNlVHlwZV9Vbmtub3cQABIVChFQcmljZVR5cGVfT3V0", 
            "c2lkZRABEhQKEFByaWNlVHlwZV9XaXRoSW4QAiqdAQoNV2FycmFudFN0YXR1", 
            "cxIYChRXYXJyYW50U3RhdHVzX1Vua25vdxAAEhgKFFdhcnJhbnRTdGF0dXNf", 
            "Tm9ybWFsEAESGQoVV2FycmFudFN0YXR1c19TdXNwZW5kEAISGwoXV2FycmFu", 
            "dFN0YXR1c19TdG9wVHJhZGUQAxIgChxXYXJyYW50U3RhdHVzX1BlbmRpbmdM", 
            "aXN0aW5nEAQq2gEKCkNvbXBhbnlBY3QSEwoPQ29tcGFueUFjdF9Ob25lEAAS", 
            "FAoQQ29tcGFueUFjdF9TcGxpdBABEhMKD0NvbXBhbnlBY3RfSm9pbhACEhQK", 
            "EENvbXBhbnlBY3RfQm9udXMQBBIXChNDb21wYW55QWN0X1RyYW5zZmVyEAgS", 
            "FAoQQ29tcGFueUFjdF9BbGxvdBAQEhIKDkNvbXBhbnlBY3RfQWRkECASFwoT", 
            "Q29tcGFueUFjdF9EaXZpZGVuZBBAEhoKFUNvbXBhbnlBY3RfU1BEaXZpZGVu", 
            "ZBCAASpbCghRb3RSaWdodBITCg9Rb3RSaWdodF9Vbmtub3cQABIQCgxRb3RS", 
            "aWdodF9CbXAQARITCg9Rb3RSaWdodF9MZXZlbDEQAhITCg9Rb3RSaWdodF9M", 
          "ZXZlbDIQA0IVChNjb20uZnV0dS5vcGVuYXBpLnBi"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Qot_Common_Security__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Qot_Common_Security__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.Security, global::Futu.OpenApi.Pb.QotCommon.Security.Builder>(internal__static_Qot_Common_Security__Descriptor,
                new string[] { "Market", "Code", });
        internal__static_Qot_Common_KLine__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Qot_Common_KLine__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.KLine, global::Futu.OpenApi.Pb.QotCommon.KLine.Builder>(internal__static_Qot_Common_KLine__Descriptor,
                new string[] { "Time", "IsBlank", "HighPrice", "OpenPrice", "LowPrice", "ClosePrice", "LastClosePrice", "Volume", "Turnover", "TurnoverRate", "Pe", "ChangeRate", "Timestamp", });
        internal__static_Qot_Common_OptionBasicQotExData__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Qot_Common_OptionBasicQotExData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.OptionBasicQotExData, global::Futu.OpenApi.Pb.QotCommon.OptionBasicQotExData.Builder>(internal__static_Qot_Common_OptionBasicQotExData__Descriptor,
                new string[] { "StrikePrice", "ContractSize", "OpenInterest", "ImpliedVolatility", "Premium", "Delta", "Gamma", "Vega", "Theta", "Rho", "NetOpenInterest", "ExpiryDateDistance", "ContractNominalValue", "OwnerLotMultiplier", "OptionAreaType", "ContractMultiplier", });
        internal__static_Qot_Common_PreAfterMarketData__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Qot_Common_PreAfterMarketData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData, global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.Builder>(internal__static_Qot_Common_PreAfterMarketData__Descriptor,
                new string[] { "Price", "HighPrice", "LowPrice", "Volume", "Turnover", "ChangeVal", "ChangeRate", "Amplitude", });
        internal__static_Qot_Common_BasicQot__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Qot_Common_BasicQot__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.BasicQot, global::Futu.OpenApi.Pb.QotCommon.BasicQot.Builder>(internal__static_Qot_Common_BasicQot__Descriptor,
                new string[] { "Security", "IsSuspended", "ListTime", "PriceSpread", "UpdateTime", "HighPrice", "OpenPrice", "LowPrice", "CurPrice", "LastClosePrice", "Volume", "Turnover", "TurnoverRate", "Amplitude", "DarkStatus", "OptionExData", "ListTimestamp", "UpdateTimestamp", "PreMarket", "AfterMarket", "SecStatus", });
        internal__static_Qot_Common_TimeShare__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Qot_Common_TimeShare__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.TimeShare, global::Futu.OpenApi.Pb.QotCommon.TimeShare.Builder>(internal__static_Qot_Common_TimeShare__Descriptor,
                new string[] { "Time", "Minute", "IsBlank", "Price", "LastClosePrice", "AvgPrice", "Volume", "Turnover", "Timestamp", });
        internal__static_Qot_Common_SecurityStaticBasic__Descriptor = Descriptor.MessageTypes[6];
        internal__static_Qot_Common_SecurityStaticBasic__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.SecurityStaticBasic, global::Futu.OpenApi.Pb.QotCommon.SecurityStaticBasic.Builder>(internal__static_Qot_Common_SecurityStaticBasic__Descriptor,
                new string[] { "Security", "Id", "LotSize", "SecType", "Name", "ListTime", "Delisting", "ListTimestamp", });
        internal__static_Qot_Common_WarrantStaticExData__Descriptor = Descriptor.MessageTypes[7];
        internal__static_Qot_Common_WarrantStaticExData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.WarrantStaticExData, global::Futu.OpenApi.Pb.QotCommon.WarrantStaticExData.Builder>(internal__static_Qot_Common_WarrantStaticExData__Descriptor,
                new string[] { "Type", "Owner", });
        internal__static_Qot_Common_OptionStaticExData__Descriptor = Descriptor.MessageTypes[8];
        internal__static_Qot_Common_OptionStaticExData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.OptionStaticExData, global::Futu.OpenApi.Pb.QotCommon.OptionStaticExData.Builder>(internal__static_Qot_Common_OptionStaticExData__Descriptor,
                new string[] { "Type", "Owner", "StrikeTime", "StrikePrice", "Suspend", "Market", "StrikeTimestamp", "IndexOptionType", });
        internal__static_Qot_Common_SecurityStaticInfo__Descriptor = Descriptor.MessageTypes[9];
        internal__static_Qot_Common_SecurityStaticInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.SecurityStaticInfo, global::Futu.OpenApi.Pb.QotCommon.SecurityStaticInfo.Builder>(internal__static_Qot_Common_SecurityStaticInfo__Descriptor,
                new string[] { "Basic", "WarrantExData", "OptionExData", });
        internal__static_Qot_Common_Broker__Descriptor = Descriptor.MessageTypes[10];
        internal__static_Qot_Common_Broker__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.Broker, global::Futu.OpenApi.Pb.QotCommon.Broker.Builder>(internal__static_Qot_Common_Broker__Descriptor,
                new string[] { "Id", "Name", "Pos", });
        internal__static_Qot_Common_Ticker__Descriptor = Descriptor.MessageTypes[11];
        internal__static_Qot_Common_Ticker__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.Ticker, global::Futu.OpenApi.Pb.QotCommon.Ticker.Builder>(internal__static_Qot_Common_Ticker__Descriptor,
                new string[] { "Time", "Sequence", "Dir", "Price", "Volume", "Turnover", "RecvTime", "Type", "TypeSign", "PushDataType", "Timestamp", });
        internal__static_Qot_Common_OrderBook__Descriptor = Descriptor.MessageTypes[12];
        internal__static_Qot_Common_OrderBook__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.OrderBook, global::Futu.OpenApi.Pb.QotCommon.OrderBook.Builder>(internal__static_Qot_Common_OrderBook__Descriptor,
                new string[] { "Price", "Volume", "OrederCount", });
        internal__static_Qot_Common_OrderDetail__Descriptor = Descriptor.MessageTypes[13];
        internal__static_Qot_Common_OrderDetail__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.OrderDetail, global::Futu.OpenApi.Pb.QotCommon.OrderDetail.Builder>(internal__static_Qot_Common_OrderDetail__Descriptor,
                new string[] { "OrderCount", "OrderVol", });
        internal__static_Qot_Common_ShareHoldingChange__Descriptor = Descriptor.MessageTypes[14];
        internal__static_Qot_Common_ShareHoldingChange__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.ShareHoldingChange, global::Futu.OpenApi.Pb.QotCommon.ShareHoldingChange.Builder>(internal__static_Qot_Common_ShareHoldingChange__Descriptor,
                new string[] { "HolderName", "HoldingQty", "HoldingRatio", "ChangeQty", "ChangeRatio", "Time", "Timestamp", });
        internal__static_Qot_Common_SubInfo__Descriptor = Descriptor.MessageTypes[15];
        internal__static_Qot_Common_SubInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.SubInfo, global::Futu.OpenApi.Pb.QotCommon.SubInfo.Builder>(internal__static_Qot_Common_SubInfo__Descriptor,
                new string[] { "SubType", "SecurityList", });
        internal__static_Qot_Common_ConnSubInfo__Descriptor = Descriptor.MessageTypes[16];
        internal__static_Qot_Common_ConnSubInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.ConnSubInfo, global::Futu.OpenApi.Pb.QotCommon.ConnSubInfo.Builder>(internal__static_Qot_Common_ConnSubInfo__Descriptor,
                new string[] { "SubInfoList", "UsedQuota", "IsOwnConnData", });
        internal__static_Qot_Common_PlateInfo__Descriptor = Descriptor.MessageTypes[17];
        internal__static_Qot_Common_PlateInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.PlateInfo, global::Futu.OpenApi.Pb.QotCommon.PlateInfo.Builder>(internal__static_Qot_Common_PlateInfo__Descriptor,
                new string[] { "Plate", "Name", "PlateType", });
        internal__static_Qot_Common_Rehab__Descriptor = Descriptor.MessageTypes[18];
        internal__static_Qot_Common_Rehab__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.QotCommon.Rehab, global::Futu.OpenApi.Pb.QotCommon.Rehab.Builder>(internal__static_Qot_Common_Rehab__Descriptor,
                new string[] { "Time", "CompanyActFlag", "FwdFactorA", "FwdFactorB", "BwdFactorA", "BwdFactorB", "SplitBase", "SplitErt", "JoinBase", "JoinErt", "BonusBase", "BonusErt", "TransferBase", "TransferErt", "AllotBase", "AllotErt", "AllotPrice", "AddBase", "AddErt", "AddPrice", "Dividend", "SpDividend", "Timestamp", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Futu.OpenApi.Pb.Common.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Futu.OpenApi.Pb.Common.Descriptor, 
          }, assigner);
    }
    #endregion
    
    #region Enums
    public enum QotMarket {
      QotMarket_Unknown = 0,
      QotMarket_HK_Security = 1,
      QotMarket_HK_Future = 2,
      QotMarket_US_Security = 11,
      QotMarket_CNSH_Security = 21,
      QotMarket_CNSZ_Security = 22,
    }
    
    public enum SecurityType {
      SecurityType_Unknown = 0,
      SecurityType_Bond = 1,
      SecurityType_Bwrt = 2,
      SecurityType_Eqty = 3,
      SecurityType_Trust = 4,
      SecurityType_Warrant = 5,
      SecurityType_Index = 6,
      SecurityType_Plate = 7,
      SecurityType_Drvt = 8,
      SecurityType_PlateSet = 9,
    }
    
    public enum PlateSetType {
      PlateSetType_All = 0,
      PlateSetType_Industry = 1,
      PlateSetType_Region = 2,
      PlateSetType_Concept = 3,
      PlateSetType_Other = 4,
    }
    
    public enum WarrantType {
      WarrantType_Unknown = 0,
      WarrantType_Buy = 1,
      WarrantType_Sell = 2,
      WarrantType_Bull = 3,
      WarrantType_Bear = 4,
      WarrantType_InLine = 5,
    }
    
    public enum OptionType {
      OptionType_Unknown = 0,
      OptionType_Call = 1,
      OptionType_Put = 2,
    }
    
    public enum IndexOptionType {
      IndexOptionType_Unknown = 0,
      IndexOptionType_Normal = 1,
      IndexOptionType_Small = 2,
    }
    
    public enum OptionAreaType {
      OptionAreaType_Unknown = 0,
      OptionAreaType_American = 1,
      OptionAreaType_European = 2,
      OptionAreaType_Bermuda = 3,
    }
    
    public enum QotMarketState {
      QotMarketState_None = 0,
      QotMarketState_Auction = 1,
      QotMarketState_WaitingOpen = 2,
      QotMarketState_Morning = 3,
      QotMarketState_Rest = 4,
      QotMarketState_Afternoon = 5,
      QotMarketState_Closed = 6,
      QotMarketState_PreMarketBegin = 8,
      QotMarketState_PreMarketEnd = 9,
      QotMarketState_AfterHoursBegin = 10,
      QotMarketState_AfterHoursEnd = 11,
      QotMarketState_NightOpen = 13,
      QotMarketState_NightEnd = 14,
      QotMarketState_FutureDayOpen = 15,
      QotMarketState_FutureDayBreak = 16,
      QotMarketState_FutureDayClose = 17,
      QotMarketState_FutureDayWaitForOpen = 18,
      QotMarketState_HkCas = 19,
    }
    
    public enum TradeDateType {
      TradeDateType_Whole = 0,
      TradeDateType_Morning = 1,
      TradeDateType_Afternoon = 2,
    }
    
    public enum RehabType {
      RehabType_None = 0,
      RehabType_Forward = 1,
      RehabType_Backward = 2,
    }
    
    public enum KLType {
      KLType_Unknown = 0,
      KLType_1Min = 1,
      KLType_Day = 2,
      KLType_Week = 3,
      KLType_Month = 4,
      KLType_Year = 5,
      KLType_5Min = 6,
      KLType_15Min = 7,
      KLType_30Min = 8,
      KLType_60Min = 9,
      KLType_3Min = 10,
      KLType_Quarter = 11,
    }
    
    public enum KLFields {
      KLFields_None = 0,
      KLFields_High = 1,
      KLFields_Open = 2,
      KLFields_Low = 4,
      KLFields_Close = 8,
      KLFields_LastClose = 16,
      KLFields_Volume = 32,
      KLFields_Turnover = 64,
      KLFields_TurnoverRate = 128,
      KLFields_PE = 256,
      KLFields_ChangeRate = 512,
    }
    
    public enum SubType {
      SubType_None = 0,
      SubType_Basic = 1,
      SubType_OrderBook = 2,
      SubType_Ticker = 4,
      SubType_RT = 5,
      SubType_KL_Day = 6,
      SubType_KL_5Min = 7,
      SubType_KL_15Min = 8,
      SubType_KL_30Min = 9,
      SubType_KL_60Min = 10,
      SubType_KL_1Min = 11,
      SubType_KL_Week = 12,
      SubType_KL_Month = 13,
      SubType_Broker = 14,
      SubType_KL_Qurater = 15,
      SubType_KL_Year = 16,
      SubType_KL_3Min = 17,
      SubType_OrderDetail = 18,
    }
    
    public enum TickerDirection {
      TickerDirection_Unknown = 0,
      TickerDirection_Bid = 1,
      TickerDirection_Ask = 2,
      TickerDirection_Neutral = 3,
    }
    
    public enum TickerType {
      TickerType_Unknown = 0,
      TickerType_Automatch = 1,
      TickerType_Late = 2,
      TickerType_NoneAutomatch = 3,
      TickerType_InterAutomatch = 4,
      TickerType_InterNoneAutomatch = 5,
      TickerType_OddLot = 6,
      TickerType_Auction = 7,
      TickerType_Bulk = 8,
      TickerType_Crash = 9,
      TickerType_CrossMarket = 10,
      TickerType_BulkSold = 11,
      TickerType_FreeOnBoard = 12,
      TickerType_Rule127Or155 = 13,
      TickerType_Delay = 14,
      TickerType_MarketCenterClosePrice = 15,
      TickerType_NextDay = 16,
      TickerType_MarketCenterOpening = 17,
      TickerType_PriorReferencePrice = 18,
      TickerType_MarketCenterOpenPrice = 19,
      TickerType_Seller = 20,
      TickerType_T = 21,
      TickerType_ExtendedTradingHours = 22,
      TickerType_Contingent = 23,
      TickerType_AvgPrice = 24,
      TickerType_OTCSold = 25,
      TickerType_OddLotCrossMarket = 26,
      TickerType_DerivativelyPriced = 27,
      TickerType_ReOpeningPriced = 28,
      TickerType_ClosingPriced = 29,
      TickerType_ComprehensiveDelayPrice = 30,
    }
    
    public enum DarkStatus {
      DarkStatus_None = 0,
      DarkStatus_Trading = 1,
      DarkStatus_End = 2,
    }
    
    public enum SecurityStatus {
      SecurityStatus_Unknown = 0,
      SecurityStatus_Normal = 1,
      SecurityStatus_Listing = 2,
      SecurityStatus_Purchasing = 3,
      SecurityStatus_Subscribing = 4,
      SecurityStatus_BeforeDrakTradeOpening = 5,
      SecurityStatus_DrakTrading = 6,
      SecurityStatus_DrakTradeEnd = 7,
      SecurityStatus_ToBeOpen = 8,
      SecurityStatus_Suspended = 9,
      SecurityStatus_Called = 10,
      SecurityStatus_ExpiredLastTradingDate = 11,
      SecurityStatus_Expired = 12,
      SecurityStatus_Delisted = 13,
      SecurityStatus_ChangeToTemporaryCode = 14,
      SecurityStatus_TemporaryCodeTradeEnd = 15,
      SecurityStatus_ChangedPlateTradeEnd = 16,
      SecurityStatus_ChangedCodeTradeEnd = 17,
      SecurityStatus_RecoverableCircuitBreaker = 18,
      SecurityStatus_UnRecoverableCircuitBreaker = 19,
      SecurityStatus_AfterCombination = 20,
      SecurityStatus_AfterTransation = 21,
    }
    
    public enum HolderCategory {
      HolderCategory_Unknow = 0,
      HolderCategory_Agency = 1,
      HolderCategory_Fund = 2,
      HolderCategory_SeniorManager = 3,
    }
    
    public enum PushDataType {
      PushDataType_Unknow = 0,
      PushDataType_Realtime = 1,
      PushDataType_ByDisConn = 2,
      PushDataType_Cache = 3,
    }
    
    public enum SortField {
      SortField_Unknow = 0,
      SortField_Code = 1,
      SortField_CurPrice = 2,
      SortField_PriceChangeVal = 3,
      SortField_ChangeRate = 4,
      SortField_Status = 5,
      SortField_BidPrice = 6,
      SortField_AskPrice = 7,
      SortField_BidVol = 8,
      SortField_AskVol = 9,
      SortField_Volume = 10,
      SortField_Turnover = 11,
      SortField_Amplitude = 30,
      SortField_Score = 12,
      SortField_Premium = 13,
      SortField_EffectiveLeverage = 14,
      SortField_Delta = 15,
      SortField_ImpliedVolatility = 16,
      SortField_Type = 17,
      SortField_StrikePrice = 18,
      SortField_BreakEvenPoint = 19,
      SortField_MaturityTime = 20,
      SortField_ListTime = 21,
      SortField_LastTradeTime = 22,
      SortField_Leverage = 23,
      SortField_InOutMoney = 24,
      SortField_RecoveryPrice = 25,
      SortField_ChangePrice = 26,
      SortField_Change = 27,
      SortField_StreetRate = 28,
      SortField_StreetVol = 29,
      SortField_WarrantName = 31,
      SortField_Issuer = 32,
      SortField_LotSize = 33,
      SortField_IssueSize = 34,
      SortField_UpperStrikePrice = 45,
      SortField_LowerStrikePrice = 46,
      SortField_InLinePriceStatus = 47,
      SortField_PreCurPrice = 35,
      SortField_AfterCurPrice = 36,
      SortField_PrePriceChangeVal = 37,
      SortField_AfterPriceChangeVal = 38,
      SortField_PreChangeRate = 39,
      SortField_AfterChangeRate = 40,
      SortField_PreAmplitude = 41,
      SortField_AfterAmplitude = 42,
      SortField_PreTurnover = 43,
      SortField_AfterTurnover = 44,
    }
    
    public enum Issuer {
      Issuer_Unknow = 0,
      Issuer_SG = 1,
      Issuer_BP = 2,
      Issuer_CS = 3,
      Issuer_CT = 4,
      Issuer_EA = 5,
      Issuer_GS = 6,
      Issuer_HS = 7,
      Issuer_JP = 8,
      Issuer_MB = 9,
      Issuer_SC = 10,
      Issuer_UB = 11,
      Issuer_BI = 12,
      Issuer_DB = 13,
      Issuer_DC = 14,
      Issuer_ML = 15,
      Issuer_NM = 16,
      Issuer_RB = 17,
      Issuer_RS = 18,
      Issuer_BC = 19,
      Issuer_HT = 20,
      Issuer_VT = 21,
      Issuer_KC = 22,
      Issuer_MS = 23,
    }
    
    public enum IpoPeriod {
      IpoPeriod_Unknow = 0,
      IpoPeriod_Today = 1,
      IpoPeriod_Tomorrow = 2,
      IpoPeriod_Nextweek = 3,
      IpoPeriod_Lastweek = 4,
      IpoPeriod_Lastmonth = 5,
    }
    
    public enum PriceType {
      PriceType_Unknow = 0,
      PriceType_Outside = 1,
      PriceType_WithIn = 2,
    }
    
    public enum WarrantStatus {
      WarrantStatus_Unknow = 0,
      WarrantStatus_Normal = 1,
      WarrantStatus_Suspend = 2,
      WarrantStatus_StopTrade = 3,
      WarrantStatus_PendingListing = 4,
    }
    
    public enum CompanyAct {
      CompanyAct_None = 0,
      CompanyAct_Split = 1,
      CompanyAct_Join = 2,
      CompanyAct_Bonus = 4,
      CompanyAct_Transfer = 8,
      CompanyAct_Allot = 16,
      CompanyAct_Add = 32,
      CompanyAct_Dividend = 64,
      CompanyAct_SPDividend = 128,
    }
    
    public enum QotRight {
      QotRight_Unknow = 0,
      QotRight_Bmp = 1,
      QotRight_Level1 = 2,
      QotRight_Level2 = 3,
    }
    
    #endregion
    
    #region Messages
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Security : pb::GeneratedMessage<Security, Security.Builder> {
      private Security() { }
      private static readonly Security defaultInstance = new Security().MakeReadOnly();
      private static readonly string[] _securityFieldNames = new string[] { "code", "market" };
      private static readonly uint[] _securityFieldTags = new uint[] { 18, 8 };
      public static Security DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Security DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Security ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_Security__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Security, Security.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_Security__FieldAccessorTable; }
      }
      
      public const int MarketFieldNumber = 1;
      private bool hasMarket;
      private int market_;
      public bool HasMarket {
        get { return hasMarket; }
      }
      public int Market {
        get { return market_; }
      }
      
      public const int CodeFieldNumber = 2;
      private bool hasCode;
      private string code_ = "";
      public bool HasCode {
        get { return hasCode; }
      }
      public string Code {
        get { return code_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasMarket) return false;
          if (!hasCode) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _securityFieldNames;
        if (hasMarket) {
          output.WriteInt32(1, field_names[1], Market);
        }
        if (hasCode) {
          output.WriteString(2, field_names[0], Code);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMarket) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Market);
        }
        if (hasCode) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Code);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Security ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Security ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Security ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Security ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Security ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Security ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Security ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Security ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Security ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Security ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Security MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Security prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Security, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Security cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Security result;
        
        private Security PrepareBuilder() {
          if (resultIsReadOnly) {
            Security original = result;
            result = new Security();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Security MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.Security.Descriptor; }
        }
        
        public override Security DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance; }
        }
        
        public override Security BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Security) {
            return MergeFrom((Security) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Security other) {
          if (other == global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasMarket) {
            Market = other.Market;
          }
          if (other.HasCode) {
            Code = other.Code;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_securityFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _securityFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasMarket = input.ReadInt32(ref result.market_);
                break;
              }
              case 18: {
                result.hasCode = input.ReadString(ref result.code_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasMarket {
          get { return result.hasMarket; }
        }
        public int Market {
          get { return result.Market; }
          set { SetMarket(value); }
        }
        public Builder SetMarket(int value) {
          PrepareBuilder();
          result.hasMarket = true;
          result.market_ = value;
          return this;
        }
        public Builder ClearMarket() {
          PrepareBuilder();
          result.hasMarket = false;
          result.market_ = 0;
          return this;
        }
        
        public bool HasCode {
          get { return result.hasCode; }
        }
        public string Code {
          get { return result.Code; }
          set { SetCode(value); }
        }
        public Builder SetCode(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasCode = true;
          result.code_ = value;
          return this;
        }
        public Builder ClearCode() {
          PrepareBuilder();
          result.hasCode = false;
          result.code_ = "";
          return this;
        }
      }
      static Security() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class KLine : pb::GeneratedMessage<KLine, KLine.Builder> {
      private KLine() { }
      private static readonly KLine defaultInstance = new KLine().MakeReadOnly();
      private static readonly string[] _kLineFieldNames = new string[] { "changeRate", "closePrice", "highPrice", "isBlank", "lastClosePrice", "lowPrice", "openPrice", "pe", "time", "timestamp", "turnover", "turnoverRate", "volume" };
      private static readonly uint[] _kLineFieldTags = new uint[] { 97, 49, 25, 16, 57, 41, 33, 89, 10, 105, 73, 81, 64 };
      public static KLine DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override KLine DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override KLine ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_KLine__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<KLine, KLine.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_KLine__FieldAccessorTable; }
      }
      
      public const int TimeFieldNumber = 1;
      private bool hasTime;
      private string time_ = "";
      public bool HasTime {
        get { return hasTime; }
      }
      public string Time {
        get { return time_; }
      }
      
      public const int IsBlankFieldNumber = 2;
      private bool hasIsBlank;
      private bool isBlank_;
      public bool HasIsBlank {
        get { return hasIsBlank; }
      }
      public bool IsBlank {
        get { return isBlank_; }
      }
      
      public const int HighPriceFieldNumber = 3;
      private bool hasHighPrice;
      private double highPrice_;
      public bool HasHighPrice {
        get { return hasHighPrice; }
      }
      public double HighPrice {
        get { return highPrice_; }
      }
      
      public const int OpenPriceFieldNumber = 4;
      private bool hasOpenPrice;
      private double openPrice_;
      public bool HasOpenPrice {
        get { return hasOpenPrice; }
      }
      public double OpenPrice {
        get { return openPrice_; }
      }
      
      public const int LowPriceFieldNumber = 5;
      private bool hasLowPrice;
      private double lowPrice_;
      public bool HasLowPrice {
        get { return hasLowPrice; }
      }
      public double LowPrice {
        get { return lowPrice_; }
      }
      
      public const int ClosePriceFieldNumber = 6;
      private bool hasClosePrice;
      private double closePrice_;
      public bool HasClosePrice {
        get { return hasClosePrice; }
      }
      public double ClosePrice {
        get { return closePrice_; }
      }
      
      public const int LastClosePriceFieldNumber = 7;
      private bool hasLastClosePrice;
      private double lastClosePrice_;
      public bool HasLastClosePrice {
        get { return hasLastClosePrice; }
      }
      public double LastClosePrice {
        get { return lastClosePrice_; }
      }
      
      public const int VolumeFieldNumber = 8;
      private bool hasVolume;
      private long volume_;
      public bool HasVolume {
        get { return hasVolume; }
      }
      public long Volume {
        get { return volume_; }
      }
      
      public const int TurnoverFieldNumber = 9;
      private bool hasTurnover;
      private double turnover_;
      public bool HasTurnover {
        get { return hasTurnover; }
      }
      public double Turnover {
        get { return turnover_; }
      }
      
      public const int TurnoverRateFieldNumber = 10;
      private bool hasTurnoverRate;
      private double turnoverRate_;
      public bool HasTurnoverRate {
        get { return hasTurnoverRate; }
      }
      public double TurnoverRate {
        get { return turnoverRate_; }
      }
      
      public const int PeFieldNumber = 11;
      private bool hasPe;
      private double pe_;
      public bool HasPe {
        get { return hasPe; }
      }
      public double Pe {
        get { return pe_; }
      }
      
      public const int ChangeRateFieldNumber = 12;
      private bool hasChangeRate;
      private double changeRate_;
      public bool HasChangeRate {
        get { return hasChangeRate; }
      }
      public double ChangeRate {
        get { return changeRate_; }
      }
      
      public const int TimestampFieldNumber = 13;
      private bool hasTimestamp;
      private double timestamp_;
      public bool HasTimestamp {
        get { return hasTimestamp; }
      }
      public double Timestamp {
        get { return timestamp_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasTime) return false;
          if (!hasIsBlank) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _kLineFieldNames;
        if (hasTime) {
          output.WriteString(1, field_names[8], Time);
        }
        if (hasIsBlank) {
          output.WriteBool(2, field_names[3], IsBlank);
        }
        if (hasHighPrice) {
          output.WriteDouble(3, field_names[2], HighPrice);
        }
        if (hasOpenPrice) {
          output.WriteDouble(4, field_names[6], OpenPrice);
        }
        if (hasLowPrice) {
          output.WriteDouble(5, field_names[5], LowPrice);
        }
        if (hasClosePrice) {
          output.WriteDouble(6, field_names[1], ClosePrice);
        }
        if (hasLastClosePrice) {
          output.WriteDouble(7, field_names[4], LastClosePrice);
        }
        if (hasVolume) {
          output.WriteInt64(8, field_names[12], Volume);
        }
        if (hasTurnover) {
          output.WriteDouble(9, field_names[10], Turnover);
        }
        if (hasTurnoverRate) {
          output.WriteDouble(10, field_names[11], TurnoverRate);
        }
        if (hasPe) {
          output.WriteDouble(11, field_names[7], Pe);
        }
        if (hasChangeRate) {
          output.WriteDouble(12, field_names[0], ChangeRate);
        }
        if (hasTimestamp) {
          output.WriteDouble(13, field_names[9], Timestamp);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTime) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Time);
        }
        if (hasIsBlank) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, IsBlank);
        }
        if (hasHighPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, HighPrice);
        }
        if (hasOpenPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, OpenPrice);
        }
        if (hasLowPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(5, LowPrice);
        }
        if (hasClosePrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, ClosePrice);
        }
        if (hasLastClosePrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, LastClosePrice);
        }
        if (hasVolume) {
          size += pb::CodedOutputStream.ComputeInt64Size(8, Volume);
        }
        if (hasTurnover) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, Turnover);
        }
        if (hasTurnoverRate) {
          size += pb::CodedOutputStream.ComputeDoubleSize(10, TurnoverRate);
        }
        if (hasPe) {
          size += pb::CodedOutputStream.ComputeDoubleSize(11, Pe);
        }
        if (hasChangeRate) {
          size += pb::CodedOutputStream.ComputeDoubleSize(12, ChangeRate);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(13, Timestamp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static KLine ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static KLine ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static KLine ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static KLine ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static KLine ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static KLine ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static KLine ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static KLine ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static KLine ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static KLine ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private KLine MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(KLine prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<KLine, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(KLine cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private KLine result;
        
        private KLine PrepareBuilder() {
          if (resultIsReadOnly) {
            KLine original = result;
            result = new KLine();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override KLine MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.KLine.Descriptor; }
        }
        
        public override KLine DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.KLine.DefaultInstance; }
        }
        
        public override KLine BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is KLine) {
            return MergeFrom((KLine) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(KLine other) {
          if (other == global::Futu.OpenApi.Pb.QotCommon.KLine.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasTime) {
            Time = other.Time;
          }
          if (other.HasIsBlank) {
            IsBlank = other.IsBlank;
          }
          if (other.HasHighPrice) {
            HighPrice = other.HighPrice;
          }
          if (other.HasOpenPrice) {
            OpenPrice = other.OpenPrice;
          }
          if (other.HasLowPrice) {
            LowPrice = other.LowPrice;
          }
          if (other.HasClosePrice) {
            ClosePrice = other.ClosePrice;
          }
          if (other.HasLastClosePrice) {
            LastClosePrice = other.LastClosePrice;
          }
          if (other.HasVolume) {
            Volume = other.Volume;
          }
          if (other.HasTurnover) {
            Turnover = other.Turnover;
          }
          if (other.HasTurnoverRate) {
            TurnoverRate = other.TurnoverRate;
          }
          if (other.HasPe) {
            Pe = other.Pe;
          }
          if (other.HasChangeRate) {
            ChangeRate = other.ChangeRate;
          }
          if (other.HasTimestamp) {
            Timestamp = other.Timestamp;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_kLineFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _kLineFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                result.hasTime = input.ReadString(ref result.time_);
                break;
              }
              case 16: {
                result.hasIsBlank = input.ReadBool(ref result.isBlank_);
                break;
              }
              case 25: {
                result.hasHighPrice = input.ReadDouble(ref result.highPrice_);
                break;
              }
              case 33: {
                result.hasOpenPrice = input.ReadDouble(ref result.openPrice_);
                break;
              }
              case 41: {
                result.hasLowPrice = input.ReadDouble(ref result.lowPrice_);
                break;
              }
              case 49: {
                result.hasClosePrice = input.ReadDouble(ref result.closePrice_);
                break;
              }
              case 57: {
                result.hasLastClosePrice = input.ReadDouble(ref result.lastClosePrice_);
                break;
              }
              case 64: {
                result.hasVolume = input.ReadInt64(ref result.volume_);
                break;
              }
              case 73: {
                result.hasTurnover = input.ReadDouble(ref result.turnover_);
                break;
              }
              case 81: {
                result.hasTurnoverRate = input.ReadDouble(ref result.turnoverRate_);
                break;
              }
              case 89: {
                result.hasPe = input.ReadDouble(ref result.pe_);
                break;
              }
              case 97: {
                result.hasChangeRate = input.ReadDouble(ref result.changeRate_);
                break;
              }
              case 105: {
                result.hasTimestamp = input.ReadDouble(ref result.timestamp_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasTime {
          get { return result.hasTime; }
        }
        public string Time {
          get { return result.Time; }
          set { SetTime(value); }
        }
        public Builder SetTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasTime = true;
          result.time_ = value;
          return this;
        }
        public Builder ClearTime() {
          PrepareBuilder();
          result.hasTime = false;
          result.time_ = "";
          return this;
        }
        
        public bool HasIsBlank {
          get { return result.hasIsBlank; }
        }
        public bool IsBlank {
          get { return result.IsBlank; }
          set { SetIsBlank(value); }
        }
        public Builder SetIsBlank(bool value) {
          PrepareBuilder();
          result.hasIsBlank = true;
          result.isBlank_ = value;
          return this;
        }
        public Builder ClearIsBlank() {
          PrepareBuilder();
          result.hasIsBlank = false;
          result.isBlank_ = false;
          return this;
        }
        
        public bool HasHighPrice {
          get { return result.hasHighPrice; }
        }
        public double HighPrice {
          get { return result.HighPrice; }
          set { SetHighPrice(value); }
        }
        public Builder SetHighPrice(double value) {
          PrepareBuilder();
          result.hasHighPrice = true;
          result.highPrice_ = value;
          return this;
        }
        public Builder ClearHighPrice() {
          PrepareBuilder();
          result.hasHighPrice = false;
          result.highPrice_ = 0D;
          return this;
        }
        
        public bool HasOpenPrice {
          get { return result.hasOpenPrice; }
        }
        public double OpenPrice {
          get { return result.OpenPrice; }
          set { SetOpenPrice(value); }
        }
        public Builder SetOpenPrice(double value) {
          PrepareBuilder();
          result.hasOpenPrice = true;
          result.openPrice_ = value;
          return this;
        }
        public Builder ClearOpenPrice() {
          PrepareBuilder();
          result.hasOpenPrice = false;
          result.openPrice_ = 0D;
          return this;
        }
        
        public bool HasLowPrice {
          get { return result.hasLowPrice; }
        }
        public double LowPrice {
          get { return result.LowPrice; }
          set { SetLowPrice(value); }
        }
        public Builder SetLowPrice(double value) {
          PrepareBuilder();
          result.hasLowPrice = true;
          result.lowPrice_ = value;
          return this;
        }
        public Builder ClearLowPrice() {
          PrepareBuilder();
          result.hasLowPrice = false;
          result.lowPrice_ = 0D;
          return this;
        }
        
        public bool HasClosePrice {
          get { return result.hasClosePrice; }
        }
        public double ClosePrice {
          get { return result.ClosePrice; }
          set { SetClosePrice(value); }
        }
        public Builder SetClosePrice(double value) {
          PrepareBuilder();
          result.hasClosePrice = true;
          result.closePrice_ = value;
          return this;
        }
        public Builder ClearClosePrice() {
          PrepareBuilder();
          result.hasClosePrice = false;
          result.closePrice_ = 0D;
          return this;
        }
        
        public bool HasLastClosePrice {
          get { return result.hasLastClosePrice; }
        }
        public double LastClosePrice {
          get { return result.LastClosePrice; }
          set { SetLastClosePrice(value); }
        }
        public Builder SetLastClosePrice(double value) {
          PrepareBuilder();
          result.hasLastClosePrice = true;
          result.lastClosePrice_ = value;
          return this;
        }
        public Builder ClearLastClosePrice() {
          PrepareBuilder();
          result.hasLastClosePrice = false;
          result.lastClosePrice_ = 0D;
          return this;
        }
        
        public bool HasVolume {
          get { return result.hasVolume; }
        }
        public long Volume {
          get { return result.Volume; }
          set { SetVolume(value); }
        }
        public Builder SetVolume(long value) {
          PrepareBuilder();
          result.hasVolume = true;
          result.volume_ = value;
          return this;
        }
        public Builder ClearVolume() {
          PrepareBuilder();
          result.hasVolume = false;
          result.volume_ = 0L;
          return this;
        }
        
        public bool HasTurnover {
          get { return result.hasTurnover; }
        }
        public double Turnover {
          get { return result.Turnover; }
          set { SetTurnover(value); }
        }
        public Builder SetTurnover(double value) {
          PrepareBuilder();
          result.hasTurnover = true;
          result.turnover_ = value;
          return this;
        }
        public Builder ClearTurnover() {
          PrepareBuilder();
          result.hasTurnover = false;
          result.turnover_ = 0D;
          return this;
        }
        
        public bool HasTurnoverRate {
          get { return result.hasTurnoverRate; }
        }
        public double TurnoverRate {
          get { return result.TurnoverRate; }
          set { SetTurnoverRate(value); }
        }
        public Builder SetTurnoverRate(double value) {
          PrepareBuilder();
          result.hasTurnoverRate = true;
          result.turnoverRate_ = value;
          return this;
        }
        public Builder ClearTurnoverRate() {
          PrepareBuilder();
          result.hasTurnoverRate = false;
          result.turnoverRate_ = 0D;
          return this;
        }
        
        public bool HasPe {
          get { return result.hasPe; }
        }
        public double Pe {
          get { return result.Pe; }
          set { SetPe(value); }
        }
        public Builder SetPe(double value) {
          PrepareBuilder();
          result.hasPe = true;
          result.pe_ = value;
          return this;
        }
        public Builder ClearPe() {
          PrepareBuilder();
          result.hasPe = false;
          result.pe_ = 0D;
          return this;
        }
        
        public bool HasChangeRate {
          get { return result.hasChangeRate; }
        }
        public double ChangeRate {
          get { return result.ChangeRate; }
          set { SetChangeRate(value); }
        }
        public Builder SetChangeRate(double value) {
          PrepareBuilder();
          result.hasChangeRate = true;
          result.changeRate_ = value;
          return this;
        }
        public Builder ClearChangeRate() {
          PrepareBuilder();
          result.hasChangeRate = false;
          result.changeRate_ = 0D;
          return this;
        }
        
        public bool HasTimestamp {
          get { return result.hasTimestamp; }
        }
        public double Timestamp {
          get { return result.Timestamp; }
          set { SetTimestamp(value); }
        }
        public Builder SetTimestamp(double value) {
          PrepareBuilder();
          result.hasTimestamp = true;
          result.timestamp_ = value;
          return this;
        }
        public Builder ClearTimestamp() {
          PrepareBuilder();
          result.hasTimestamp = false;
          result.timestamp_ = 0D;
          return this;
        }
      }
      static KLine() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class OptionBasicQotExData : pb::GeneratedMessage<OptionBasicQotExData, OptionBasicQotExData.Builder> {
      private OptionBasicQotExData() { }
      private static readonly OptionBasicQotExData defaultInstance = new OptionBasicQotExData().MakeReadOnly();
      private static readonly string[] _optionBasicQotExDataFieldNames = new string[] { "contractMultiplier", "contractNominalValue", "contractSize", "delta", "expiryDateDistance", "gamma", "impliedVolatility", "netOpenInterest", "openInterest", "optionAreaType", "ownerLotMultiplier", "premium", "rho", "strikePrice", "theta", "vega" };
      private static readonly uint[] _optionBasicQotExDataFieldTags = new uint[] { 129, 105, 16, 49, 96, 57, 33, 88, 24, 120, 113, 41, 81, 9, 73, 65 };
      public static OptionBasicQotExData DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override OptionBasicQotExData DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override OptionBasicQotExData ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_OptionBasicQotExData__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<OptionBasicQotExData, OptionBasicQotExData.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_OptionBasicQotExData__FieldAccessorTable; }
      }
      
      public const int StrikePriceFieldNumber = 1;
      private bool hasStrikePrice;
      private double strikePrice_;
      public bool HasStrikePrice {
        get { return hasStrikePrice; }
      }
      public double StrikePrice {
        get { return strikePrice_; }
      }
      
      public const int ContractSizeFieldNumber = 2;
      private bool hasContractSize;
      private int contractSize_;
      public bool HasContractSize {
        get { return hasContractSize; }
      }
      public int ContractSize {
        get { return contractSize_; }
      }
      
      public const int OpenInterestFieldNumber = 3;
      private bool hasOpenInterest;
      private int openInterest_;
      public bool HasOpenInterest {
        get { return hasOpenInterest; }
      }
      public int OpenInterest {
        get { return openInterest_; }
      }
      
      public const int ImpliedVolatilityFieldNumber = 4;
      private bool hasImpliedVolatility;
      private double impliedVolatility_;
      public bool HasImpliedVolatility {
        get { return hasImpliedVolatility; }
      }
      public double ImpliedVolatility {
        get { return impliedVolatility_; }
      }
      
      public const int PremiumFieldNumber = 5;
      private bool hasPremium;
      private double premium_;
      public bool HasPremium {
        get { return hasPremium; }
      }
      public double Premium {
        get { return premium_; }
      }
      
      public const int DeltaFieldNumber = 6;
      private bool hasDelta;
      private double delta_;
      public bool HasDelta {
        get { return hasDelta; }
      }
      public double Delta {
        get { return delta_; }
      }
      
      public const int GammaFieldNumber = 7;
      private bool hasGamma;
      private double gamma_;
      public bool HasGamma {
        get { return hasGamma; }
      }
      public double Gamma {
        get { return gamma_; }
      }
      
      public const int VegaFieldNumber = 8;
      private bool hasVega;
      private double vega_;
      public bool HasVega {
        get { return hasVega; }
      }
      public double Vega {
        get { return vega_; }
      }
      
      public const int ThetaFieldNumber = 9;
      private bool hasTheta;
      private double theta_;
      public bool HasTheta {
        get { return hasTheta; }
      }
      public double Theta {
        get { return theta_; }
      }
      
      public const int RhoFieldNumber = 10;
      private bool hasRho;
      private double rho_;
      public bool HasRho {
        get { return hasRho; }
      }
      public double Rho {
        get { return rho_; }
      }
      
      public const int NetOpenInterestFieldNumber = 11;
      private bool hasNetOpenInterest;
      private int netOpenInterest_;
      public bool HasNetOpenInterest {
        get { return hasNetOpenInterest; }
      }
      public int NetOpenInterest {
        get { return netOpenInterest_; }
      }
      
      public const int ExpiryDateDistanceFieldNumber = 12;
      private bool hasExpiryDateDistance;
      private int expiryDateDistance_;
      public bool HasExpiryDateDistance {
        get { return hasExpiryDateDistance; }
      }
      public int ExpiryDateDistance {
        get { return expiryDateDistance_; }
      }
      
      public const int ContractNominalValueFieldNumber = 13;
      private bool hasContractNominalValue;
      private double contractNominalValue_;
      public bool HasContractNominalValue {
        get { return hasContractNominalValue; }
      }
      public double ContractNominalValue {
        get { return contractNominalValue_; }
      }
      
      public const int OwnerLotMultiplierFieldNumber = 14;
      private bool hasOwnerLotMultiplier;
      private double ownerLotMultiplier_;
      public bool HasOwnerLotMultiplier {
        get { return hasOwnerLotMultiplier; }
      }
      public double OwnerLotMultiplier {
        get { return ownerLotMultiplier_; }
      }
      
      public const int OptionAreaTypeFieldNumber = 15;
      private bool hasOptionAreaType;
      private int optionAreaType_;
      public bool HasOptionAreaType {
        get { return hasOptionAreaType; }
      }
      public int OptionAreaType {
        get { return optionAreaType_; }
      }
      
      public const int ContractMultiplierFieldNumber = 16;
      private bool hasContractMultiplier;
      private double contractMultiplier_;
      public bool HasContractMultiplier {
        get { return hasContractMultiplier; }
      }
      public double ContractMultiplier {
        get { return contractMultiplier_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasStrikePrice) return false;
          if (!hasContractSize) return false;
          if (!hasOpenInterest) return false;
          if (!hasImpliedVolatility) return false;
          if (!hasPremium) return false;
          if (!hasDelta) return false;
          if (!hasGamma) return false;
          if (!hasVega) return false;
          if (!hasTheta) return false;
          if (!hasRho) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _optionBasicQotExDataFieldNames;
        if (hasStrikePrice) {
          output.WriteDouble(1, field_names[13], StrikePrice);
        }
        if (hasContractSize) {
          output.WriteInt32(2, field_names[2], ContractSize);
        }
        if (hasOpenInterest) {
          output.WriteInt32(3, field_names[8], OpenInterest);
        }
        if (hasImpliedVolatility) {
          output.WriteDouble(4, field_names[6], ImpliedVolatility);
        }
        if (hasPremium) {
          output.WriteDouble(5, field_names[11], Premium);
        }
        if (hasDelta) {
          output.WriteDouble(6, field_names[3], Delta);
        }
        if (hasGamma) {
          output.WriteDouble(7, field_names[5], Gamma);
        }
        if (hasVega) {
          output.WriteDouble(8, field_names[15], Vega);
        }
        if (hasTheta) {
          output.WriteDouble(9, field_names[14], Theta);
        }
        if (hasRho) {
          output.WriteDouble(10, field_names[12], Rho);
        }
        if (hasNetOpenInterest) {
          output.WriteInt32(11, field_names[7], NetOpenInterest);
        }
        if (hasExpiryDateDistance) {
          output.WriteInt32(12, field_names[4], ExpiryDateDistance);
        }
        if (hasContractNominalValue) {
          output.WriteDouble(13, field_names[1], ContractNominalValue);
        }
        if (hasOwnerLotMultiplier) {
          output.WriteDouble(14, field_names[10], OwnerLotMultiplier);
        }
        if (hasOptionAreaType) {
          output.WriteInt32(15, field_names[9], OptionAreaType);
        }
        if (hasContractMultiplier) {
          output.WriteDouble(16, field_names[0], ContractMultiplier);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasStrikePrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(1, StrikePrice);
        }
        if (hasContractSize) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, ContractSize);
        }
        if (hasOpenInterest) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, OpenInterest);
        }
        if (hasImpliedVolatility) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, ImpliedVolatility);
        }
        if (hasPremium) {
          size += pb::CodedOutputStream.ComputeDoubleSize(5, Premium);
        }
        if (hasDelta) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, Delta);
        }
        if (hasGamma) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, Gamma);
        }
        if (hasVega) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, Vega);
        }
        if (hasTheta) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, Theta);
        }
        if (hasRho) {
          size += pb::CodedOutputStream.ComputeDoubleSize(10, Rho);
        }
        if (hasNetOpenInterest) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, NetOpenInterest);
        }
        if (hasExpiryDateDistance) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, ExpiryDateDistance);
        }
        if (hasContractNominalValue) {
          size += pb::CodedOutputStream.ComputeDoubleSize(13, ContractNominalValue);
        }
        if (hasOwnerLotMultiplier) {
          size += pb::CodedOutputStream.ComputeDoubleSize(14, OwnerLotMultiplier);
        }
        if (hasOptionAreaType) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, OptionAreaType);
        }
        if (hasContractMultiplier) {
          size += pb::CodedOutputStream.ComputeDoubleSize(16, ContractMultiplier);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static OptionBasicQotExData ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static OptionBasicQotExData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static OptionBasicQotExData ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static OptionBasicQotExData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static OptionBasicQotExData ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static OptionBasicQotExData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static OptionBasicQotExData ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static OptionBasicQotExData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static OptionBasicQotExData ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static OptionBasicQotExData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private OptionBasicQotExData MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(OptionBasicQotExData prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<OptionBasicQotExData, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(OptionBasicQotExData cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private OptionBasicQotExData result;
        
        private OptionBasicQotExData PrepareBuilder() {
          if (resultIsReadOnly) {
            OptionBasicQotExData original = result;
            result = new OptionBasicQotExData();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override OptionBasicQotExData MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.OptionBasicQotExData.Descriptor; }
        }
        
        public override OptionBasicQotExData DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.OptionBasicQotExData.DefaultInstance; }
        }
        
        public override OptionBasicQotExData BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is OptionBasicQotExData) {
            return MergeFrom((OptionBasicQotExData) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(OptionBasicQotExData other) {
          if (other == global::Futu.OpenApi.Pb.QotCommon.OptionBasicQotExData.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasStrikePrice) {
            StrikePrice = other.StrikePrice;
          }
          if (other.HasContractSize) {
            ContractSize = other.ContractSize;
          }
          if (other.HasOpenInterest) {
            OpenInterest = other.OpenInterest;
          }
          if (other.HasImpliedVolatility) {
            ImpliedVolatility = other.ImpliedVolatility;
          }
          if (other.HasPremium) {
            Premium = other.Premium;
          }
          if (other.HasDelta) {
            Delta = other.Delta;
          }
          if (other.HasGamma) {
            Gamma = other.Gamma;
          }
          if (other.HasVega) {
            Vega = other.Vega;
          }
          if (other.HasTheta) {
            Theta = other.Theta;
          }
          if (other.HasRho) {
            Rho = other.Rho;
          }
          if (other.HasNetOpenInterest) {
            NetOpenInterest = other.NetOpenInterest;
          }
          if (other.HasExpiryDateDistance) {
            ExpiryDateDistance = other.ExpiryDateDistance;
          }
          if (other.HasContractNominalValue) {
            ContractNominalValue = other.ContractNominalValue;
          }
          if (other.HasOwnerLotMultiplier) {
            OwnerLotMultiplier = other.OwnerLotMultiplier;
          }
          if (other.HasOptionAreaType) {
            OptionAreaType = other.OptionAreaType;
          }
          if (other.HasContractMultiplier) {
            ContractMultiplier = other.ContractMultiplier;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_optionBasicQotExDataFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _optionBasicQotExDataFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 9: {
                result.hasStrikePrice = input.ReadDouble(ref result.strikePrice_);
                break;
              }
              case 16: {
                result.hasContractSize = input.ReadInt32(ref result.contractSize_);
                break;
              }
              case 24: {
                result.hasOpenInterest = input.ReadInt32(ref result.openInterest_);
                break;
              }
              case 33: {
                result.hasImpliedVolatility = input.ReadDouble(ref result.impliedVolatility_);
                break;
              }
              case 41: {
                result.hasPremium = input.ReadDouble(ref result.premium_);
                break;
              }
              case 49: {
                result.hasDelta = input.ReadDouble(ref result.delta_);
                break;
              }
              case 57: {
                result.hasGamma = input.ReadDouble(ref result.gamma_);
                break;
              }
              case 65: {
                result.hasVega = input.ReadDouble(ref result.vega_);
                break;
              }
              case 73: {
                result.hasTheta = input.ReadDouble(ref result.theta_);
                break;
              }
              case 81: {
                result.hasRho = input.ReadDouble(ref result.rho_);
                break;
              }
              case 88: {
                result.hasNetOpenInterest = input.ReadInt32(ref result.netOpenInterest_);
                break;
              }
              case 96: {
                result.hasExpiryDateDistance = input.ReadInt32(ref result.expiryDateDistance_);
                break;
              }
              case 105: {
                result.hasContractNominalValue = input.ReadDouble(ref result.contractNominalValue_);
                break;
              }
              case 113: {
                result.hasOwnerLotMultiplier = input.ReadDouble(ref result.ownerLotMultiplier_);
                break;
              }
              case 120: {
                result.hasOptionAreaType = input.ReadInt32(ref result.optionAreaType_);
                break;
              }
              case 129: {
                result.hasContractMultiplier = input.ReadDouble(ref result.contractMultiplier_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasStrikePrice {
          get { return result.hasStrikePrice; }
        }
        public double StrikePrice {
          get { return result.StrikePrice; }
          set { SetStrikePrice(value); }
        }
        public Builder SetStrikePrice(double value) {
          PrepareBuilder();
          result.hasStrikePrice = true;
          result.strikePrice_ = value;
          return this;
        }
        public Builder ClearStrikePrice() {
          PrepareBuilder();
          result.hasStrikePrice = false;
          result.strikePrice_ = 0D;
          return this;
        }
        
        public bool HasContractSize {
          get { return result.hasContractSize; }
        }
        public int ContractSize {
          get { return result.ContractSize; }
          set { SetContractSize(value); }
        }
        public Builder SetContractSize(int value) {
          PrepareBuilder();
          result.hasContractSize = true;
          result.contractSize_ = value;
          return this;
        }
        public Builder ClearContractSize() {
          PrepareBuilder();
          result.hasContractSize = false;
          result.contractSize_ = 0;
          return this;
        }
        
        public bool HasOpenInterest {
          get { return result.hasOpenInterest; }
        }
        public int OpenInterest {
          get { return result.OpenInterest; }
          set { SetOpenInterest(value); }
        }
        public Builder SetOpenInterest(int value) {
          PrepareBuilder();
          result.hasOpenInterest = true;
          result.openInterest_ = value;
          return this;
        }
        public Builder ClearOpenInterest() {
          PrepareBuilder();
          result.hasOpenInterest = false;
          result.openInterest_ = 0;
          return this;
        }
        
        public bool HasImpliedVolatility {
          get { return result.hasImpliedVolatility; }
        }
        public double ImpliedVolatility {
          get { return result.ImpliedVolatility; }
          set { SetImpliedVolatility(value); }
        }
        public Builder SetImpliedVolatility(double value) {
          PrepareBuilder();
          result.hasImpliedVolatility = true;
          result.impliedVolatility_ = value;
          return this;
        }
        public Builder ClearImpliedVolatility() {
          PrepareBuilder();
          result.hasImpliedVolatility = false;
          result.impliedVolatility_ = 0D;
          return this;
        }
        
        public bool HasPremium {
          get { return result.hasPremium; }
        }
        public double Premium {
          get { return result.Premium; }
          set { SetPremium(value); }
        }
        public Builder SetPremium(double value) {
          PrepareBuilder();
          result.hasPremium = true;
          result.premium_ = value;
          return this;
        }
        public Builder ClearPremium() {
          PrepareBuilder();
          result.hasPremium = false;
          result.premium_ = 0D;
          return this;
        }
        
        public bool HasDelta {
          get { return result.hasDelta; }
        }
        public double Delta {
          get { return result.Delta; }
          set { SetDelta(value); }
        }
        public Builder SetDelta(double value) {
          PrepareBuilder();
          result.hasDelta = true;
          result.delta_ = value;
          return this;
        }
        public Builder ClearDelta() {
          PrepareBuilder();
          result.hasDelta = false;
          result.delta_ = 0D;
          return this;
        }
        
        public bool HasGamma {
          get { return result.hasGamma; }
        }
        public double Gamma {
          get { return result.Gamma; }
          set { SetGamma(value); }
        }
        public Builder SetGamma(double value) {
          PrepareBuilder();
          result.hasGamma = true;
          result.gamma_ = value;
          return this;
        }
        public Builder ClearGamma() {
          PrepareBuilder();
          result.hasGamma = false;
          result.gamma_ = 0D;
          return this;
        }
        
        public bool HasVega {
          get { return result.hasVega; }
        }
        public double Vega {
          get { return result.Vega; }
          set { SetVega(value); }
        }
        public Builder SetVega(double value) {
          PrepareBuilder();
          result.hasVega = true;
          result.vega_ = value;
          return this;
        }
        public Builder ClearVega() {
          PrepareBuilder();
          result.hasVega = false;
          result.vega_ = 0D;
          return this;
        }
        
        public bool HasTheta {
          get { return result.hasTheta; }
        }
        public double Theta {
          get { return result.Theta; }
          set { SetTheta(value); }
        }
        public Builder SetTheta(double value) {
          PrepareBuilder();
          result.hasTheta = true;
          result.theta_ = value;
          return this;
        }
        public Builder ClearTheta() {
          PrepareBuilder();
          result.hasTheta = false;
          result.theta_ = 0D;
          return this;
        }
        
        public bool HasRho {
          get { return result.hasRho; }
        }
        public double Rho {
          get { return result.Rho; }
          set { SetRho(value); }
        }
        public Builder SetRho(double value) {
          PrepareBuilder();
          result.hasRho = true;
          result.rho_ = value;
          return this;
        }
        public Builder ClearRho() {
          PrepareBuilder();
          result.hasRho = false;
          result.rho_ = 0D;
          return this;
        }
        
        public bool HasNetOpenInterest {
          get { return result.hasNetOpenInterest; }
        }
        public int NetOpenInterest {
          get { return result.NetOpenInterest; }
          set { SetNetOpenInterest(value); }
        }
        public Builder SetNetOpenInterest(int value) {
          PrepareBuilder();
          result.hasNetOpenInterest = true;
          result.netOpenInterest_ = value;
          return this;
        }
        public Builder ClearNetOpenInterest() {
          PrepareBuilder();
          result.hasNetOpenInterest = false;
          result.netOpenInterest_ = 0;
          return this;
        }
        
        public bool HasExpiryDateDistance {
          get { return result.hasExpiryDateDistance; }
        }
        public int ExpiryDateDistance {
          get { return result.ExpiryDateDistance; }
          set { SetExpiryDateDistance(value); }
        }
        public Builder SetExpiryDateDistance(int value) {
          PrepareBuilder();
          result.hasExpiryDateDistance = true;
          result.expiryDateDistance_ = value;
          return this;
        }
        public Builder ClearExpiryDateDistance() {
          PrepareBuilder();
          result.hasExpiryDateDistance = false;
          result.expiryDateDistance_ = 0;
          return this;
        }
        
        public bool HasContractNominalValue {
          get { return result.hasContractNominalValue; }
        }
        public double ContractNominalValue {
          get { return result.ContractNominalValue; }
          set { SetContractNominalValue(value); }
        }
        public Builder SetContractNominalValue(double value) {
          PrepareBuilder();
          result.hasContractNominalValue = true;
          result.contractNominalValue_ = value;
          return this;
        }
        public Builder ClearContractNominalValue() {
          PrepareBuilder();
          result.hasContractNominalValue = false;
          result.contractNominalValue_ = 0D;
          return this;
        }
        
        public bool HasOwnerLotMultiplier {
          get { return result.hasOwnerLotMultiplier; }
        }
        public double OwnerLotMultiplier {
          get { return result.OwnerLotMultiplier; }
          set { SetOwnerLotMultiplier(value); }
        }
        public Builder SetOwnerLotMultiplier(double value) {
          PrepareBuilder();
          result.hasOwnerLotMultiplier = true;
          result.ownerLotMultiplier_ = value;
          return this;
        }
        public Builder ClearOwnerLotMultiplier() {
          PrepareBuilder();
          result.hasOwnerLotMultiplier = false;
          result.ownerLotMultiplier_ = 0D;
          return this;
        }
        
        public bool HasOptionAreaType {
          get { return result.hasOptionAreaType; }
        }
        public int OptionAreaType {
          get { return result.OptionAreaType; }
          set { SetOptionAreaType(value); }
        }
        public Builder SetOptionAreaType(int value) {
          PrepareBuilder();
          result.hasOptionAreaType = true;
          result.optionAreaType_ = value;
          return this;
        }
        public Builder ClearOptionAreaType() {
          PrepareBuilder();
          result.hasOptionAreaType = false;
          result.optionAreaType_ = 0;
          return this;
        }
        
        public bool HasContractMultiplier {
          get { return result.hasContractMultiplier; }
        }
        public double ContractMultiplier {
          get { return result.ContractMultiplier; }
          set { SetContractMultiplier(value); }
        }
        public Builder SetContractMultiplier(double value) {
          PrepareBuilder();
          result.hasContractMultiplier = true;
          result.contractMultiplier_ = value;
          return this;
        }
        public Builder ClearContractMultiplier() {
          PrepareBuilder();
          result.hasContractMultiplier = false;
          result.contractMultiplier_ = 0D;
          return this;
        }
      }
      static OptionBasicQotExData() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class PreAfterMarketData : pb::GeneratedMessage<PreAfterMarketData, PreAfterMarketData.Builder> {
      private PreAfterMarketData() { }
      private static readonly PreAfterMarketData defaultInstance = new PreAfterMarketData().MakeReadOnly();
      private static readonly string[] _preAfterMarketDataFieldNames = new string[] { "amplitude", "changeRate", "changeVal", "highPrice", "lowPrice", "price", "turnover", "volume" };
      private static readonly uint[] _preAfterMarketDataFieldTags = new uint[] { 65, 57, 49, 17, 25, 9, 41, 32 };
      public static PreAfterMarketData DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override PreAfterMarketData DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override PreAfterMarketData ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_PreAfterMarketData__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<PreAfterMarketData, PreAfterMarketData.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_PreAfterMarketData__FieldAccessorTable; }
      }
      
      public const int PriceFieldNumber = 1;
      private bool hasPrice;
      private double price_;
      public bool HasPrice {
        get { return hasPrice; }
      }
      public double Price {
        get { return price_; }
      }
      
      public const int HighPriceFieldNumber = 2;
      private bool hasHighPrice;
      private double highPrice_;
      public bool HasHighPrice {
        get { return hasHighPrice; }
      }
      public double HighPrice {
        get { return highPrice_; }
      }
      
      public const int LowPriceFieldNumber = 3;
      private bool hasLowPrice;
      private double lowPrice_;
      public bool HasLowPrice {
        get { return hasLowPrice; }
      }
      public double LowPrice {
        get { return lowPrice_; }
      }
      
      public const int VolumeFieldNumber = 4;
      private bool hasVolume;
      private long volume_;
      public bool HasVolume {
        get { return hasVolume; }
      }
      public long Volume {
        get { return volume_; }
      }
      
      public const int TurnoverFieldNumber = 5;
      private bool hasTurnover;
      private double turnover_;
      public bool HasTurnover {
        get { return hasTurnover; }
      }
      public double Turnover {
        get { return turnover_; }
      }
      
      public const int ChangeValFieldNumber = 6;
      private bool hasChangeVal;
      private double changeVal_;
      public bool HasChangeVal {
        get { return hasChangeVal; }
      }
      public double ChangeVal {
        get { return changeVal_; }
      }
      
      public const int ChangeRateFieldNumber = 7;
      private bool hasChangeRate;
      private double changeRate_;
      public bool HasChangeRate {
        get { return hasChangeRate; }
      }
      public double ChangeRate {
        get { return changeRate_; }
      }
      
      public const int AmplitudeFieldNumber = 8;
      private bool hasAmplitude;
      private double amplitude_;
      public bool HasAmplitude {
        get { return hasAmplitude; }
      }
      public double Amplitude {
        get { return amplitude_; }
      }
      
      public override bool IsInitialized {
        get {
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _preAfterMarketDataFieldNames;
        if (hasPrice) {
          output.WriteDouble(1, field_names[5], Price);
        }
        if (hasHighPrice) {
          output.WriteDouble(2, field_names[3], HighPrice);
        }
        if (hasLowPrice) {
          output.WriteDouble(3, field_names[4], LowPrice);
        }
        if (hasVolume) {
          output.WriteInt64(4, field_names[7], Volume);
        }
        if (hasTurnover) {
          output.WriteDouble(5, field_names[6], Turnover);
        }
        if (hasChangeVal) {
          output.WriteDouble(6, field_names[2], ChangeVal);
        }
        if (hasChangeRate) {
          output.WriteDouble(7, field_names[1], ChangeRate);
        }
        if (hasAmplitude) {
          output.WriteDouble(8, field_names[0], Amplitude);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(1, Price);
        }
        if (hasHighPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, HighPrice);
        }
        if (hasLowPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, LowPrice);
        }
        if (hasVolume) {
          size += pb::CodedOutputStream.ComputeInt64Size(4, Volume);
        }
        if (hasTurnover) {
          size += pb::CodedOutputStream.ComputeDoubleSize(5, Turnover);
        }
        if (hasChangeVal) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, ChangeVal);
        }
        if (hasChangeRate) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, ChangeRate);
        }
        if (hasAmplitude) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, Amplitude);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static PreAfterMarketData ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static PreAfterMarketData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static PreAfterMarketData ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static PreAfterMarketData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static PreAfterMarketData ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static PreAfterMarketData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static PreAfterMarketData ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static PreAfterMarketData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static PreAfterMarketData ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static PreAfterMarketData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private PreAfterMarketData MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(PreAfterMarketData prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<PreAfterMarketData, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(PreAfterMarketData cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private PreAfterMarketData result;
        
        private PreAfterMarketData PrepareBuilder() {
          if (resultIsReadOnly) {
            PreAfterMarketData original = result;
            result = new PreAfterMarketData();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override PreAfterMarketData MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.Descriptor; }
        }
        
        public override PreAfterMarketData DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.DefaultInstance; }
        }
        
        public override PreAfterMarketData BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is PreAfterMarketData) {
            return MergeFrom((PreAfterMarketData) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(PreAfterMarketData other) {
          if (other == global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasPrice) {
            Price = other.Price;
          }
          if (other.HasHighPrice) {
            HighPrice = other.HighPrice;
          }
          if (other.HasLowPrice) {
            LowPrice = other.LowPrice;
          }
          if (other.HasVolume) {
            Volume = other.Volume;
          }
          if (other.HasTurnover) {
            Turnover = other.Turnover;
          }
          if (other.HasChangeVal) {
            ChangeVal = other.ChangeVal;
          }
          if (other.HasChangeRate) {
            ChangeRate = other.ChangeRate;
          }
          if (other.HasAmplitude) {
            Amplitude = other.Amplitude;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_preAfterMarketDataFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _preAfterMarketDataFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 9: {
                result.hasPrice = input.ReadDouble(ref result.price_);
                break;
              }
              case 17: {
                result.hasHighPrice = input.ReadDouble(ref result.highPrice_);
                break;
              }
              case 25: {
                result.hasLowPrice = input.ReadDouble(ref result.lowPrice_);
                break;
              }
              case 32: {
                result.hasVolume = input.ReadInt64(ref result.volume_);
                break;
              }
              case 41: {
                result.hasTurnover = input.ReadDouble(ref result.turnover_);
                break;
              }
              case 49: {
                result.hasChangeVal = input.ReadDouble(ref result.changeVal_);
                break;
              }
              case 57: {
                result.hasChangeRate = input.ReadDouble(ref result.changeRate_);
                break;
              }
              case 65: {
                result.hasAmplitude = input.ReadDouble(ref result.amplitude_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasPrice {
          get { return result.hasPrice; }
        }
        public double Price {
          get { return result.Price; }
          set { SetPrice(value); }
        }
        public Builder SetPrice(double value) {
          PrepareBuilder();
          result.hasPrice = true;
          result.price_ = value;
          return this;
        }
        public Builder ClearPrice() {
          PrepareBuilder();
          result.hasPrice = false;
          result.price_ = 0D;
          return this;
        }
        
        public bool HasHighPrice {
          get { return result.hasHighPrice; }
        }
        public double HighPrice {
          get { return result.HighPrice; }
          set { SetHighPrice(value); }
        }
        public Builder SetHighPrice(double value) {
          PrepareBuilder();
          result.hasHighPrice = true;
          result.highPrice_ = value;
          return this;
        }
        public Builder ClearHighPrice() {
          PrepareBuilder();
          result.hasHighPrice = false;
          result.highPrice_ = 0D;
          return this;
        }
        
        public bool HasLowPrice {
          get { return result.hasLowPrice; }
        }
        public double LowPrice {
          get { return result.LowPrice; }
          set { SetLowPrice(value); }
        }
        public Builder SetLowPrice(double value) {
          PrepareBuilder();
          result.hasLowPrice = true;
          result.lowPrice_ = value;
          return this;
        }
        public Builder ClearLowPrice() {
          PrepareBuilder();
          result.hasLowPrice = false;
          result.lowPrice_ = 0D;
          return this;
        }
        
        public bool HasVolume {
          get { return result.hasVolume; }
        }
        public long Volume {
          get { return result.Volume; }
          set { SetVolume(value); }
        }
        public Builder SetVolume(long value) {
          PrepareBuilder();
          result.hasVolume = true;
          result.volume_ = value;
          return this;
        }
        public Builder ClearVolume() {
          PrepareBuilder();
          result.hasVolume = false;
          result.volume_ = 0L;
          return this;
        }
        
        public bool HasTurnover {
          get { return result.hasTurnover; }
        }
        public double Turnover {
          get { return result.Turnover; }
          set { SetTurnover(value); }
        }
        public Builder SetTurnover(double value) {
          PrepareBuilder();
          result.hasTurnover = true;
          result.turnover_ = value;
          return this;
        }
        public Builder ClearTurnover() {
          PrepareBuilder();
          result.hasTurnover = false;
          result.turnover_ = 0D;
          return this;
        }
        
        public bool HasChangeVal {
          get { return result.hasChangeVal; }
        }
        public double ChangeVal {
          get { return result.ChangeVal; }
          set { SetChangeVal(value); }
        }
        public Builder SetChangeVal(double value) {
          PrepareBuilder();
          result.hasChangeVal = true;
          result.changeVal_ = value;
          return this;
        }
        public Builder ClearChangeVal() {
          PrepareBuilder();
          result.hasChangeVal = false;
          result.changeVal_ = 0D;
          return this;
        }
        
        public bool HasChangeRate {
          get { return result.hasChangeRate; }
        }
        public double ChangeRate {
          get { return result.ChangeRate; }
          set { SetChangeRate(value); }
        }
        public Builder SetChangeRate(double value) {
          PrepareBuilder();
          result.hasChangeRate = true;
          result.changeRate_ = value;
          return this;
        }
        public Builder ClearChangeRate() {
          PrepareBuilder();
          result.hasChangeRate = false;
          result.changeRate_ = 0D;
          return this;
        }
        
        public bool HasAmplitude {
          get { return result.hasAmplitude; }
        }
        public double Amplitude {
          get { return result.Amplitude; }
          set { SetAmplitude(value); }
        }
        public Builder SetAmplitude(double value) {
          PrepareBuilder();
          result.hasAmplitude = true;
          result.amplitude_ = value;
          return this;
        }
        public Builder ClearAmplitude() {
          PrepareBuilder();
          result.hasAmplitude = false;
          result.amplitude_ = 0D;
          return this;
        }
      }
      static PreAfterMarketData() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class BasicQot : pb::GeneratedMessage<BasicQot, BasicQot.Builder> {
      private BasicQot() { }
      private static readonly BasicQot defaultInstance = new BasicQot().MakeReadOnly();
      private static readonly string[] _basicQotFieldNames = new string[] { "afterMarket", "amplitude", "curPrice", "darkStatus", "highPrice", "isSuspended", "lastClosePrice", "listTime", "listTimestamp", "lowPrice", "openPrice", "optionExData", "preMarket", "priceSpread", "secStatus", "security", "turnover", "turnoverRate", "updateTime", "updateTimestamp", "volume" };
      private static readonly uint[] _basicQotFieldTags = new uint[] { 162, 113, 73, 120, 49, 16, 81, 26, 137, 65, 57, 130, 154, 33, 168, 10, 97, 105, 42, 145, 88 };
      public static BasicQot DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override BasicQot DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override BasicQot ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_BasicQot__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<BasicQot, BasicQot.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_BasicQot__FieldAccessorTable; }
      }
      
      public const int SecurityFieldNumber = 1;
      private bool hasSecurity;
      private global::Futu.OpenApi.Pb.QotCommon.Security security_;
      public bool HasSecurity {
        get { return hasSecurity; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.Security Security {
        get { return security_ ?? global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance; }
      }
      
      public const int IsSuspendedFieldNumber = 2;
      private bool hasIsSuspended;
      private bool isSuspended_;
      public bool HasIsSuspended {
        get { return hasIsSuspended; }
      }
      public bool IsSuspended {
        get { return isSuspended_; }
      }
      
      public const int ListTimeFieldNumber = 3;
      private bool hasListTime;
      private string listTime_ = "";
      public bool HasListTime {
        get { return hasListTime; }
      }
      public string ListTime {
        get { return listTime_; }
      }
      
      public const int PriceSpreadFieldNumber = 4;
      private bool hasPriceSpread;
      private double priceSpread_;
      public bool HasPriceSpread {
        get { return hasPriceSpread; }
      }
      public double PriceSpread {
        get { return priceSpread_; }
      }
      
      public const int UpdateTimeFieldNumber = 5;
      private bool hasUpdateTime;
      private string updateTime_ = "";
      public bool HasUpdateTime {
        get { return hasUpdateTime; }
      }
      public string UpdateTime {
        get { return updateTime_; }
      }
      
      public const int HighPriceFieldNumber = 6;
      private bool hasHighPrice;
      private double highPrice_;
      public bool HasHighPrice {
        get { return hasHighPrice; }
      }
      public double HighPrice {
        get { return highPrice_; }
      }
      
      public const int OpenPriceFieldNumber = 7;
      private bool hasOpenPrice;
      private double openPrice_;
      public bool HasOpenPrice {
        get { return hasOpenPrice; }
      }
      public double OpenPrice {
        get { return openPrice_; }
      }
      
      public const int LowPriceFieldNumber = 8;
      private bool hasLowPrice;
      private double lowPrice_;
      public bool HasLowPrice {
        get { return hasLowPrice; }
      }
      public double LowPrice {
        get { return lowPrice_; }
      }
      
      public const int CurPriceFieldNumber = 9;
      private bool hasCurPrice;
      private double curPrice_;
      public bool HasCurPrice {
        get { return hasCurPrice; }
      }
      public double CurPrice {
        get { return curPrice_; }
      }
      
      public const int LastClosePriceFieldNumber = 10;
      private bool hasLastClosePrice;
      private double lastClosePrice_;
      public bool HasLastClosePrice {
        get { return hasLastClosePrice; }
      }
      public double LastClosePrice {
        get { return lastClosePrice_; }
      }
      
      public const int VolumeFieldNumber = 11;
      private bool hasVolume;
      private long volume_;
      public bool HasVolume {
        get { return hasVolume; }
      }
      public long Volume {
        get { return volume_; }
      }
      
      public const int TurnoverFieldNumber = 12;
      private bool hasTurnover;
      private double turnover_;
      public bool HasTurnover {
        get { return hasTurnover; }
      }
      public double Turnover {
        get { return turnover_; }
      }
      
      public const int TurnoverRateFieldNumber = 13;
      private bool hasTurnoverRate;
      private double turnoverRate_;
      public bool HasTurnoverRate {
        get { return hasTurnoverRate; }
      }
      public double TurnoverRate {
        get { return turnoverRate_; }
      }
      
      public const int AmplitudeFieldNumber = 14;
      private bool hasAmplitude;
      private double amplitude_;
      public bool HasAmplitude {
        get { return hasAmplitude; }
      }
      public double Amplitude {
        get { return amplitude_; }
      }
      
      public const int DarkStatusFieldNumber = 15;
      private bool hasDarkStatus;
      private int darkStatus_;
      public bool HasDarkStatus {
        get { return hasDarkStatus; }
      }
      public int DarkStatus {
        get { return darkStatus_; }
      }
      
      public const int OptionExDataFieldNumber = 16;
      private bool hasOptionExData;
      private global::Futu.OpenApi.Pb.QotCommon.OptionBasicQotExData optionExData_;
      public bool HasOptionExData {
        get { return hasOptionExData; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.OptionBasicQotExData OptionExData {
        get { return optionExData_ ?? global::Futu.OpenApi.Pb.QotCommon.OptionBasicQotExData.DefaultInstance; }
      }
      
      public const int ListTimestampFieldNumber = 17;
      private bool hasListTimestamp;
      private double listTimestamp_;
      public bool HasListTimestamp {
        get { return hasListTimestamp; }
      }
      public double ListTimestamp {
        get { return listTimestamp_; }
      }
      
      public const int UpdateTimestampFieldNumber = 18;
      private bool hasUpdateTimestamp;
      private double updateTimestamp_;
      public bool HasUpdateTimestamp {
        get { return hasUpdateTimestamp; }
      }
      public double UpdateTimestamp {
        get { return updateTimestamp_; }
      }
      
      public const int PreMarketFieldNumber = 19;
      private bool hasPreMarket;
      private global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData preMarket_;
      public bool HasPreMarket {
        get { return hasPreMarket; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData PreMarket {
        get { return preMarket_ ?? global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.DefaultInstance; }
      }
      
      public const int AfterMarketFieldNumber = 20;
      private bool hasAfterMarket;
      private global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData afterMarket_;
      public bool HasAfterMarket {
        get { return hasAfterMarket; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData AfterMarket {
        get { return afterMarket_ ?? global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.DefaultInstance; }
      }
      
      public const int SecStatusFieldNumber = 21;
      private bool hasSecStatus;
      private int secStatus_;
      public bool HasSecStatus {
        get { return hasSecStatus; }
      }
      public int SecStatus {
        get { return secStatus_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasSecurity) return false;
          if (!hasIsSuspended) return false;
          if (!hasListTime) return false;
          if (!hasPriceSpread) return false;
          if (!hasUpdateTime) return false;
          if (!hasHighPrice) return false;
          if (!hasOpenPrice) return false;
          if (!hasLowPrice) return false;
          if (!hasCurPrice) return false;
          if (!hasLastClosePrice) return false;
          if (!hasVolume) return false;
          if (!hasTurnover) return false;
          if (!hasTurnoverRate) return false;
          if (!hasAmplitude) return false;
          if (!Security.IsInitialized) return false;
          if (HasOptionExData) {
            if (!OptionExData.IsInitialized) return false;
          }
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _basicQotFieldNames;
        if (hasSecurity) {
          output.WriteMessage(1, field_names[15], Security);
        }
        if (hasIsSuspended) {
          output.WriteBool(2, field_names[5], IsSuspended);
        }
        if (hasListTime) {
          output.WriteString(3, field_names[7], ListTime);
        }
        if (hasPriceSpread) {
          output.WriteDouble(4, field_names[13], PriceSpread);
        }
        if (hasUpdateTime) {
          output.WriteString(5, field_names[18], UpdateTime);
        }
        if (hasHighPrice) {
          output.WriteDouble(6, field_names[4], HighPrice);
        }
        if (hasOpenPrice) {
          output.WriteDouble(7, field_names[10], OpenPrice);
        }
        if (hasLowPrice) {
          output.WriteDouble(8, field_names[9], LowPrice);
        }
        if (hasCurPrice) {
          output.WriteDouble(9, field_names[2], CurPrice);
        }
        if (hasLastClosePrice) {
          output.WriteDouble(10, field_names[6], LastClosePrice);
        }
        if (hasVolume) {
          output.WriteInt64(11, field_names[20], Volume);
        }
        if (hasTurnover) {
          output.WriteDouble(12, field_names[16], Turnover);
        }
        if (hasTurnoverRate) {
          output.WriteDouble(13, field_names[17], TurnoverRate);
        }
        if (hasAmplitude) {
          output.WriteDouble(14, field_names[1], Amplitude);
        }
        if (hasDarkStatus) {
          output.WriteInt32(15, field_names[3], DarkStatus);
        }
        if (hasOptionExData) {
          output.WriteMessage(16, field_names[11], OptionExData);
        }
        if (hasListTimestamp) {
          output.WriteDouble(17, field_names[8], ListTimestamp);
        }
        if (hasUpdateTimestamp) {
          output.WriteDouble(18, field_names[19], UpdateTimestamp);
        }
        if (hasPreMarket) {
          output.WriteMessage(19, field_names[12], PreMarket);
        }
        if (hasAfterMarket) {
          output.WriteMessage(20, field_names[0], AfterMarket);
        }
        if (hasSecStatus) {
          output.WriteInt32(21, field_names[14], SecStatus);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSecurity) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Security);
        }
        if (hasIsSuspended) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, IsSuspended);
        }
        if (hasListTime) {
          size += pb::CodedOutputStream.ComputeStringSize(3, ListTime);
        }
        if (hasPriceSpread) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, PriceSpread);
        }
        if (hasUpdateTime) {
          size += pb::CodedOutputStream.ComputeStringSize(5, UpdateTime);
        }
        if (hasHighPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, HighPrice);
        }
        if (hasOpenPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, OpenPrice);
        }
        if (hasLowPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, LowPrice);
        }
        if (hasCurPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, CurPrice);
        }
        if (hasLastClosePrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(10, LastClosePrice);
        }
        if (hasVolume) {
          size += pb::CodedOutputStream.ComputeInt64Size(11, Volume);
        }
        if (hasTurnover) {
          size += pb::CodedOutputStream.ComputeDoubleSize(12, Turnover);
        }
        if (hasTurnoverRate) {
          size += pb::CodedOutputStream.ComputeDoubleSize(13, TurnoverRate);
        }
        if (hasAmplitude) {
          size += pb::CodedOutputStream.ComputeDoubleSize(14, Amplitude);
        }
        if (hasDarkStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, DarkStatus);
        }
        if (hasOptionExData) {
          size += pb::CodedOutputStream.ComputeMessageSize(16, OptionExData);
        }
        if (hasListTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(17, ListTimestamp);
        }
        if (hasUpdateTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(18, UpdateTimestamp);
        }
        if (hasPreMarket) {
          size += pb::CodedOutputStream.ComputeMessageSize(19, PreMarket);
        }
        if (hasAfterMarket) {
          size += pb::CodedOutputStream.ComputeMessageSize(20, AfterMarket);
        }
        if (hasSecStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(21, SecStatus);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static BasicQot ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static BasicQot ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static BasicQot ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static BasicQot ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static BasicQot ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static BasicQot ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static BasicQot ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static BasicQot ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static BasicQot ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static BasicQot ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private BasicQot MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(BasicQot prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<BasicQot, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(BasicQot cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private BasicQot result;
        
        private BasicQot PrepareBuilder() {
          if (resultIsReadOnly) {
            BasicQot original = result;
            result = new BasicQot();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override BasicQot MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.BasicQot.Descriptor; }
        }
        
        public override BasicQot DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.BasicQot.DefaultInstance; }
        }
        
        public override BasicQot BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is BasicQot) {
            return MergeFrom((BasicQot) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(BasicQot other) {
          if (other == global::Futu.OpenApi.Pb.QotCommon.BasicQot.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasSecurity) {
            MergeSecurity(other.Security);
          }
          if (other.HasIsSuspended) {
            IsSuspended = other.IsSuspended;
          }
          if (other.HasListTime) {
            ListTime = other.ListTime;
          }
          if (other.HasPriceSpread) {
            PriceSpread = other.PriceSpread;
          }
          if (other.HasUpdateTime) {
            UpdateTime = other.UpdateTime;
          }
          if (other.HasHighPrice) {
            HighPrice = other.HighPrice;
          }
          if (other.HasOpenPrice) {
            OpenPrice = other.OpenPrice;
          }
          if (other.HasLowPrice) {
            LowPrice = other.LowPrice;
          }
          if (other.HasCurPrice) {
            CurPrice = other.CurPrice;
          }
          if (other.HasLastClosePrice) {
            LastClosePrice = other.LastClosePrice;
          }
          if (other.HasVolume) {
            Volume = other.Volume;
          }
          if (other.HasTurnover) {
            Turnover = other.Turnover;
          }
          if (other.HasTurnoverRate) {
            TurnoverRate = other.TurnoverRate;
          }
          if (other.HasAmplitude) {
            Amplitude = other.Amplitude;
          }
          if (other.HasDarkStatus) {
            DarkStatus = other.DarkStatus;
          }
          if (other.HasOptionExData) {
            MergeOptionExData(other.OptionExData);
          }
          if (other.HasListTimestamp) {
            ListTimestamp = other.ListTimestamp;
          }
          if (other.HasUpdateTimestamp) {
            UpdateTimestamp = other.UpdateTimestamp;
          }
          if (other.HasPreMarket) {
            MergePreMarket(other.PreMarket);
          }
          if (other.HasAfterMarket) {
            MergeAfterMarket(other.AfterMarket);
          }
          if (other.HasSecStatus) {
            SecStatus = other.SecStatus;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_basicQotFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _basicQotFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                global::Futu.OpenApi.Pb.QotCommon.Security.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder();
                if (result.hasSecurity) {
                  subBuilder.MergeFrom(Security);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Security = subBuilder.BuildPartial();
                break;
              }
              case 16: {
                result.hasIsSuspended = input.ReadBool(ref result.isSuspended_);
                break;
              }
              case 26: {
                result.hasListTime = input.ReadString(ref result.listTime_);
                break;
              }
              case 33: {
                result.hasPriceSpread = input.ReadDouble(ref result.priceSpread_);
                break;
              }
              case 42: {
                result.hasUpdateTime = input.ReadString(ref result.updateTime_);
                break;
              }
              case 49: {
                result.hasHighPrice = input.ReadDouble(ref result.highPrice_);
                break;
              }
              case 57: {
                result.hasOpenPrice = input.ReadDouble(ref result.openPrice_);
                break;
              }
              case 65: {
                result.hasLowPrice = input.ReadDouble(ref result.lowPrice_);
                break;
              }
              case 73: {
                result.hasCurPrice = input.ReadDouble(ref result.curPrice_);
                break;
              }
              case 81: {
                result.hasLastClosePrice = input.ReadDouble(ref result.lastClosePrice_);
                break;
              }
              case 88: {
                result.hasVolume = input.ReadInt64(ref result.volume_);
                break;
              }
              case 97: {
                result.hasTurnover = input.ReadDouble(ref result.turnover_);
                break;
              }
              case 105: {
                result.hasTurnoverRate = input.ReadDouble(ref result.turnoverRate_);
                break;
              }
              case 113: {
                result.hasAmplitude = input.ReadDouble(ref result.amplitude_);
                break;
              }
              case 120: {
                result.hasDarkStatus = input.ReadInt32(ref result.darkStatus_);
                break;
              }
              case 130: {
                global::Futu.OpenApi.Pb.QotCommon.OptionBasicQotExData.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.OptionBasicQotExData.CreateBuilder();
                if (result.hasOptionExData) {
                  subBuilder.MergeFrom(OptionExData);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                OptionExData = subBuilder.BuildPartial();
                break;
              }
              case 137: {
                result.hasListTimestamp = input.ReadDouble(ref result.listTimestamp_);
                break;
              }
              case 145: {
                result.hasUpdateTimestamp = input.ReadDouble(ref result.updateTimestamp_);
                break;
              }
              case 154: {
                global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.CreateBuilder();
                if (result.hasPreMarket) {
                  subBuilder.MergeFrom(PreMarket);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                PreMarket = subBuilder.BuildPartial();
                break;
              }
              case 162: {
                global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.CreateBuilder();
                if (result.hasAfterMarket) {
                  subBuilder.MergeFrom(AfterMarket);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                AfterMarket = subBuilder.BuildPartial();
                break;
              }
              case 168: {
                result.hasSecStatus = input.ReadInt32(ref result.secStatus_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasSecurity {
         get { return result.hasSecurity; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.Security Security {
          get { return result.Security; }
          set { SetSecurity(value); }
        }
        public Builder SetSecurity(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasSecurity = true;
          result.security_ = value;
          return this;
        }
        public Builder SetSecurity(global::Futu.OpenApi.Pb.QotCommon.Security.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasSecurity = true;
          result.security_ = builderForValue.Build();
          return this;
        }
        public Builder MergeSecurity(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasSecurity &&
              result.security_ != global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance) {
              result.security_ = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder(result.security_).MergeFrom(value).BuildPartial();
          } else {
            result.security_ = value;
          }
          result.hasSecurity = true;
          return this;
        }
        public Builder ClearSecurity() {
          PrepareBuilder();
          result.hasSecurity = false;
          result.security_ = null;
          return this;
        }
        
        public bool HasIsSuspended {
          get { return result.hasIsSuspended; }
        }
        public bool IsSuspended {
          get { return result.IsSuspended; }
          set { SetIsSuspended(value); }
        }
        public Builder SetIsSuspended(bool value) {
          PrepareBuilder();
          result.hasIsSuspended = true;
          result.isSuspended_ = value;
          return this;
        }
        public Builder ClearIsSuspended() {
          PrepareBuilder();
          result.hasIsSuspended = false;
          result.isSuspended_ = false;
          return this;
        }
        
        public bool HasListTime {
          get { return result.hasListTime; }
        }
        public string ListTime {
          get { return result.ListTime; }
          set { SetListTime(value); }
        }
        public Builder SetListTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasListTime = true;
          result.listTime_ = value;
          return this;
        }
        public Builder ClearListTime() {
          PrepareBuilder();
          result.hasListTime = false;
          result.listTime_ = "";
          return this;
        }
        
        public bool HasPriceSpread {
          get { return result.hasPriceSpread; }
        }
        public double PriceSpread {
          get { return result.PriceSpread; }
          set { SetPriceSpread(value); }
        }
        public Builder SetPriceSpread(double value) {
          PrepareBuilder();
          result.hasPriceSpread = true;
          result.priceSpread_ = value;
          return this;
        }
        public Builder ClearPriceSpread() {
          PrepareBuilder();
          result.hasPriceSpread = false;
          result.priceSpread_ = 0D;
          return this;
        }
        
        public bool HasUpdateTime {
          get { return result.hasUpdateTime; }
        }
        public string UpdateTime {
          get { return result.UpdateTime; }
          set { SetUpdateTime(value); }
        }
        public Builder SetUpdateTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasUpdateTime = true;
          result.updateTime_ = value;
          return this;
        }
        public Builder ClearUpdateTime() {
          PrepareBuilder();
          result.hasUpdateTime = false;
          result.updateTime_ = "";
          return this;
        }
        
        public bool HasHighPrice {
          get { return result.hasHighPrice; }
        }
        public double HighPrice {
          get { return result.HighPrice; }
          set { SetHighPrice(value); }
        }
        public Builder SetHighPrice(double value) {
          PrepareBuilder();
          result.hasHighPrice = true;
          result.highPrice_ = value;
          return this;
        }
        public Builder ClearHighPrice() {
          PrepareBuilder();
          result.hasHighPrice = false;
          result.highPrice_ = 0D;
          return this;
        }
        
        public bool HasOpenPrice {
          get { return result.hasOpenPrice; }
        }
        public double OpenPrice {
          get { return result.OpenPrice; }
          set { SetOpenPrice(value); }
        }
        public Builder SetOpenPrice(double value) {
          PrepareBuilder();
          result.hasOpenPrice = true;
          result.openPrice_ = value;
          return this;
        }
        public Builder ClearOpenPrice() {
          PrepareBuilder();
          result.hasOpenPrice = false;
          result.openPrice_ = 0D;
          return this;
        }
        
        public bool HasLowPrice {
          get { return result.hasLowPrice; }
        }
        public double LowPrice {
          get { return result.LowPrice; }
          set { SetLowPrice(value); }
        }
        public Builder SetLowPrice(double value) {
          PrepareBuilder();
          result.hasLowPrice = true;
          result.lowPrice_ = value;
          return this;
        }
        public Builder ClearLowPrice() {
          PrepareBuilder();
          result.hasLowPrice = false;
          result.lowPrice_ = 0D;
          return this;
        }
        
        public bool HasCurPrice {
          get { return result.hasCurPrice; }
        }
        public double CurPrice {
          get { return result.CurPrice; }
          set { SetCurPrice(value); }
        }
        public Builder SetCurPrice(double value) {
          PrepareBuilder();
          result.hasCurPrice = true;
          result.curPrice_ = value;
          return this;
        }
        public Builder ClearCurPrice() {
          PrepareBuilder();
          result.hasCurPrice = false;
          result.curPrice_ = 0D;
          return this;
        }
        
        public bool HasLastClosePrice {
          get { return result.hasLastClosePrice; }
        }
        public double LastClosePrice {
          get { return result.LastClosePrice; }
          set { SetLastClosePrice(value); }
        }
        public Builder SetLastClosePrice(double value) {
          PrepareBuilder();
          result.hasLastClosePrice = true;
          result.lastClosePrice_ = value;
          return this;
        }
        public Builder ClearLastClosePrice() {
          PrepareBuilder();
          result.hasLastClosePrice = false;
          result.lastClosePrice_ = 0D;
          return this;
        }
        
        public bool HasVolume {
          get { return result.hasVolume; }
        }
        public long Volume {
          get { return result.Volume; }
          set { SetVolume(value); }
        }
        public Builder SetVolume(long value) {
          PrepareBuilder();
          result.hasVolume = true;
          result.volume_ = value;
          return this;
        }
        public Builder ClearVolume() {
          PrepareBuilder();
          result.hasVolume = false;
          result.volume_ = 0L;
          return this;
        }
        
        public bool HasTurnover {
          get { return result.hasTurnover; }
        }
        public double Turnover {
          get { return result.Turnover; }
          set { SetTurnover(value); }
        }
        public Builder SetTurnover(double value) {
          PrepareBuilder();
          result.hasTurnover = true;
          result.turnover_ = value;
          return this;
        }
        public Builder ClearTurnover() {
          PrepareBuilder();
          result.hasTurnover = false;
          result.turnover_ = 0D;
          return this;
        }
        
        public bool HasTurnoverRate {
          get { return result.hasTurnoverRate; }
        }
        public double TurnoverRate {
          get { return result.TurnoverRate; }
          set { SetTurnoverRate(value); }
        }
        public Builder SetTurnoverRate(double value) {
          PrepareBuilder();
          result.hasTurnoverRate = true;
          result.turnoverRate_ = value;
          return this;
        }
        public Builder ClearTurnoverRate() {
          PrepareBuilder();
          result.hasTurnoverRate = false;
          result.turnoverRate_ = 0D;
          return this;
        }
        
        public bool HasAmplitude {
          get { return result.hasAmplitude; }
        }
        public double Amplitude {
          get { return result.Amplitude; }
          set { SetAmplitude(value); }
        }
        public Builder SetAmplitude(double value) {
          PrepareBuilder();
          result.hasAmplitude = true;
          result.amplitude_ = value;
          return this;
        }
        public Builder ClearAmplitude() {
          PrepareBuilder();
          result.hasAmplitude = false;
          result.amplitude_ = 0D;
          return this;
        }
        
        public bool HasDarkStatus {
          get { return result.hasDarkStatus; }
        }
        public int DarkStatus {
          get { return result.DarkStatus; }
          set { SetDarkStatus(value); }
        }
        public Builder SetDarkStatus(int value) {
          PrepareBuilder();
          result.hasDarkStatus = true;
          result.darkStatus_ = value;
          return this;
        }
        public Builder ClearDarkStatus() {
          PrepareBuilder();
          result.hasDarkStatus = false;
          result.darkStatus_ = 0;
          return this;
        }
        
        public bool HasOptionExData {
         get { return result.hasOptionExData; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.OptionBasicQotExData OptionExData {
          get { return result.OptionExData; }
          set { SetOptionExData(value); }
        }
        public Builder SetOptionExData(global::Futu.OpenApi.Pb.QotCommon.OptionBasicQotExData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasOptionExData = true;
          result.optionExData_ = value;
          return this;
        }
        public Builder SetOptionExData(global::Futu.OpenApi.Pb.QotCommon.OptionBasicQotExData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasOptionExData = true;
          result.optionExData_ = builderForValue.Build();
          return this;
        }
        public Builder MergeOptionExData(global::Futu.OpenApi.Pb.QotCommon.OptionBasicQotExData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasOptionExData &&
              result.optionExData_ != global::Futu.OpenApi.Pb.QotCommon.OptionBasicQotExData.DefaultInstance) {
              result.optionExData_ = global::Futu.OpenApi.Pb.QotCommon.OptionBasicQotExData.CreateBuilder(result.optionExData_).MergeFrom(value).BuildPartial();
          } else {
            result.optionExData_ = value;
          }
          result.hasOptionExData = true;
          return this;
        }
        public Builder ClearOptionExData() {
          PrepareBuilder();
          result.hasOptionExData = false;
          result.optionExData_ = null;
          return this;
        }
        
        public bool HasListTimestamp {
          get { return result.hasListTimestamp; }
        }
        public double ListTimestamp {
          get { return result.ListTimestamp; }
          set { SetListTimestamp(value); }
        }
        public Builder SetListTimestamp(double value) {
          PrepareBuilder();
          result.hasListTimestamp = true;
          result.listTimestamp_ = value;
          return this;
        }
        public Builder ClearListTimestamp() {
          PrepareBuilder();
          result.hasListTimestamp = false;
          result.listTimestamp_ = 0D;
          return this;
        }
        
        public bool HasUpdateTimestamp {
          get { return result.hasUpdateTimestamp; }
        }
        public double UpdateTimestamp {
          get { return result.UpdateTimestamp; }
          set { SetUpdateTimestamp(value); }
        }
        public Builder SetUpdateTimestamp(double value) {
          PrepareBuilder();
          result.hasUpdateTimestamp = true;
          result.updateTimestamp_ = value;
          return this;
        }
        public Builder ClearUpdateTimestamp() {
          PrepareBuilder();
          result.hasUpdateTimestamp = false;
          result.updateTimestamp_ = 0D;
          return this;
        }
        
        public bool HasPreMarket {
         get { return result.hasPreMarket; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData PreMarket {
          get { return result.PreMarket; }
          set { SetPreMarket(value); }
        }
        public Builder SetPreMarket(global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasPreMarket = true;
          result.preMarket_ = value;
          return this;
        }
        public Builder SetPreMarket(global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasPreMarket = true;
          result.preMarket_ = builderForValue.Build();
          return this;
        }
        public Builder MergePreMarket(global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasPreMarket &&
              result.preMarket_ != global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.DefaultInstance) {
              result.preMarket_ = global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.CreateBuilder(result.preMarket_).MergeFrom(value).BuildPartial();
          } else {
            result.preMarket_ = value;
          }
          result.hasPreMarket = true;
          return this;
        }
        public Builder ClearPreMarket() {
          PrepareBuilder();
          result.hasPreMarket = false;
          result.preMarket_ = null;
          return this;
        }
        
        public bool HasAfterMarket {
         get { return result.hasAfterMarket; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData AfterMarket {
          get { return result.AfterMarket; }
          set { SetAfterMarket(value); }
        }
        public Builder SetAfterMarket(global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasAfterMarket = true;
          result.afterMarket_ = value;
          return this;
        }
        public Builder SetAfterMarket(global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasAfterMarket = true;
          result.afterMarket_ = builderForValue.Build();
          return this;
        }
        public Builder MergeAfterMarket(global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasAfterMarket &&
              result.afterMarket_ != global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.DefaultInstance) {
              result.afterMarket_ = global::Futu.OpenApi.Pb.QotCommon.PreAfterMarketData.CreateBuilder(result.afterMarket_).MergeFrom(value).BuildPartial();
          } else {
            result.afterMarket_ = value;
          }
          result.hasAfterMarket = true;
          return this;
        }
        public Builder ClearAfterMarket() {
          PrepareBuilder();
          result.hasAfterMarket = false;
          result.afterMarket_ = null;
          return this;
        }
        
        public bool HasSecStatus {
          get { return result.hasSecStatus; }
        }
        public int SecStatus {
          get { return result.SecStatus; }
          set { SetSecStatus(value); }
        }
        public Builder SetSecStatus(int value) {
          PrepareBuilder();
          result.hasSecStatus = true;
          result.secStatus_ = value;
          return this;
        }
        public Builder ClearSecStatus() {
          PrepareBuilder();
          result.hasSecStatus = false;
          result.secStatus_ = 0;
          return this;
        }
      }
      static BasicQot() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class TimeShare : pb::GeneratedMessage<TimeShare, TimeShare.Builder> {
      private TimeShare() { }
      private static readonly TimeShare defaultInstance = new TimeShare().MakeReadOnly();
      private static readonly string[] _timeShareFieldNames = new string[] { "avgPrice", "isBlank", "lastClosePrice", "minute", "price", "time", "timestamp", "turnover", "volume" };
      private static readonly uint[] _timeShareFieldTags = new uint[] { 49, 24, 41, 16, 33, 10, 73, 65, 56 };
      public static TimeShare DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override TimeShare DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override TimeShare ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_TimeShare__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<TimeShare, TimeShare.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_TimeShare__FieldAccessorTable; }
      }
      
      public const int TimeFieldNumber = 1;
      private bool hasTime;
      private string time_ = "";
      public bool HasTime {
        get { return hasTime; }
      }
      public string Time {
        get { return time_; }
      }
      
      public const int MinuteFieldNumber = 2;
      private bool hasMinute;
      private int minute_;
      public bool HasMinute {
        get { return hasMinute; }
      }
      public int Minute {
        get { return minute_; }
      }
      
      public const int IsBlankFieldNumber = 3;
      private bool hasIsBlank;
      private bool isBlank_;
      public bool HasIsBlank {
        get { return hasIsBlank; }
      }
      public bool IsBlank {
        get { return isBlank_; }
      }
      
      public const int PriceFieldNumber = 4;
      private bool hasPrice;
      private double price_;
      public bool HasPrice {
        get { return hasPrice; }
      }
      public double Price {
        get { return price_; }
      }
      
      public const int LastClosePriceFieldNumber = 5;
      private bool hasLastClosePrice;
      private double lastClosePrice_;
      public bool HasLastClosePrice {
        get { return hasLastClosePrice; }
      }
      public double LastClosePrice {
        get { return lastClosePrice_; }
      }
      
      public const int AvgPriceFieldNumber = 6;
      private bool hasAvgPrice;
      private double avgPrice_;
      public bool HasAvgPrice {
        get { return hasAvgPrice; }
      }
      public double AvgPrice {
        get { return avgPrice_; }
      }
      
      public const int VolumeFieldNumber = 7;
      private bool hasVolume;
      private long volume_;
      public bool HasVolume {
        get { return hasVolume; }
      }
      public long Volume {
        get { return volume_; }
      }
      
      public const int TurnoverFieldNumber = 8;
      private bool hasTurnover;
      private double turnover_;
      public bool HasTurnover {
        get { return hasTurnover; }
      }
      public double Turnover {
        get { return turnover_; }
      }
      
      public const int TimestampFieldNumber = 9;
      private bool hasTimestamp;
      private double timestamp_;
      public bool HasTimestamp {
        get { return hasTimestamp; }
      }
      public double Timestamp {
        get { return timestamp_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasTime) return false;
          if (!hasMinute) return false;
          if (!hasIsBlank) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _timeShareFieldNames;
        if (hasTime) {
          output.WriteString(1, field_names[5], Time);
        }
        if (hasMinute) {
          output.WriteInt32(2, field_names[3], Minute);
        }
        if (hasIsBlank) {
          output.WriteBool(3, field_names[1], IsBlank);
        }
        if (hasPrice) {
          output.WriteDouble(4, field_names[4], Price);
        }
        if (hasLastClosePrice) {
          output.WriteDouble(5, field_names[2], LastClosePrice);
        }
        if (hasAvgPrice) {
          output.WriteDouble(6, field_names[0], AvgPrice);
        }
        if (hasVolume) {
          output.WriteInt64(7, field_names[8], Volume);
        }
        if (hasTurnover) {
          output.WriteDouble(8, field_names[7], Turnover);
        }
        if (hasTimestamp) {
          output.WriteDouble(9, field_names[6], Timestamp);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTime) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Time);
        }
        if (hasMinute) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Minute);
        }
        if (hasIsBlank) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, IsBlank);
        }
        if (hasPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, Price);
        }
        if (hasLastClosePrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(5, LastClosePrice);
        }
        if (hasAvgPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, AvgPrice);
        }
        if (hasVolume) {
          size += pb::CodedOutputStream.ComputeInt64Size(7, Volume);
        }
        if (hasTurnover) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, Turnover);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, Timestamp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static TimeShare ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static TimeShare ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static TimeShare ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static TimeShare ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static TimeShare ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static TimeShare ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static TimeShare ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static TimeShare ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static TimeShare ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static TimeShare ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private TimeShare MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(TimeShare prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<TimeShare, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(TimeShare cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private TimeShare result;
        
        private TimeShare PrepareBuilder() {
          if (resultIsReadOnly) {
            TimeShare original = result;
            result = new TimeShare();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override TimeShare MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.TimeShare.Descriptor; }
        }
        
        public override TimeShare DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.TimeShare.DefaultInstance; }
        }
        
        public override TimeShare BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is TimeShare) {
            return MergeFrom((TimeShare) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(TimeShare other) {
          if (other == global::Futu.OpenApi.Pb.QotCommon.TimeShare.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasTime) {
            Time = other.Time;
          }
          if (other.HasMinute) {
            Minute = other.Minute;
          }
          if (other.HasIsBlank) {
            IsBlank = other.IsBlank;
          }
          if (other.HasPrice) {
            Price = other.Price;
          }
          if (other.HasLastClosePrice) {
            LastClosePrice = other.LastClosePrice;
          }
          if (other.HasAvgPrice) {
            AvgPrice = other.AvgPrice;
          }
          if (other.HasVolume) {
            Volume = other.Volume;
          }
          if (other.HasTurnover) {
            Turnover = other.Turnover;
          }
          if (other.HasTimestamp) {
            Timestamp = other.Timestamp;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_timeShareFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _timeShareFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                result.hasTime = input.ReadString(ref result.time_);
                break;
              }
              case 16: {
                result.hasMinute = input.ReadInt32(ref result.minute_);
                break;
              }
              case 24: {
                result.hasIsBlank = input.ReadBool(ref result.isBlank_);
                break;
              }
              case 33: {
                result.hasPrice = input.ReadDouble(ref result.price_);
                break;
              }
              case 41: {
                result.hasLastClosePrice = input.ReadDouble(ref result.lastClosePrice_);
                break;
              }
              case 49: {
                result.hasAvgPrice = input.ReadDouble(ref result.avgPrice_);
                break;
              }
              case 56: {
                result.hasVolume = input.ReadInt64(ref result.volume_);
                break;
              }
              case 65: {
                result.hasTurnover = input.ReadDouble(ref result.turnover_);
                break;
              }
              case 73: {
                result.hasTimestamp = input.ReadDouble(ref result.timestamp_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasTime {
          get { return result.hasTime; }
        }
        public string Time {
          get { return result.Time; }
          set { SetTime(value); }
        }
        public Builder SetTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasTime = true;
          result.time_ = value;
          return this;
        }
        public Builder ClearTime() {
          PrepareBuilder();
          result.hasTime = false;
          result.time_ = "";
          return this;
        }
        
        public bool HasMinute {
          get { return result.hasMinute; }
        }
        public int Minute {
          get { return result.Minute; }
          set { SetMinute(value); }
        }
        public Builder SetMinute(int value) {
          PrepareBuilder();
          result.hasMinute = true;
          result.minute_ = value;
          return this;
        }
        public Builder ClearMinute() {
          PrepareBuilder();
          result.hasMinute = false;
          result.minute_ = 0;
          return this;
        }
        
        public bool HasIsBlank {
          get { return result.hasIsBlank; }
        }
        public bool IsBlank {
          get { return result.IsBlank; }
          set { SetIsBlank(value); }
        }
        public Builder SetIsBlank(bool value) {
          PrepareBuilder();
          result.hasIsBlank = true;
          result.isBlank_ = value;
          return this;
        }
        public Builder ClearIsBlank() {
          PrepareBuilder();
          result.hasIsBlank = false;
          result.isBlank_ = false;
          return this;
        }
        
        public bool HasPrice {
          get { return result.hasPrice; }
        }
        public double Price {
          get { return result.Price; }
          set { SetPrice(value); }
        }
        public Builder SetPrice(double value) {
          PrepareBuilder();
          result.hasPrice = true;
          result.price_ = value;
          return this;
        }
        public Builder ClearPrice() {
          PrepareBuilder();
          result.hasPrice = false;
          result.price_ = 0D;
          return this;
        }
        
        public bool HasLastClosePrice {
          get { return result.hasLastClosePrice; }
        }
        public double LastClosePrice {
          get { return result.LastClosePrice; }
          set { SetLastClosePrice(value); }
        }
        public Builder SetLastClosePrice(double value) {
          PrepareBuilder();
          result.hasLastClosePrice = true;
          result.lastClosePrice_ = value;
          return this;
        }
        public Builder ClearLastClosePrice() {
          PrepareBuilder();
          result.hasLastClosePrice = false;
          result.lastClosePrice_ = 0D;
          return this;
        }
        
        public bool HasAvgPrice {
          get { return result.hasAvgPrice; }
        }
        public double AvgPrice {
          get { return result.AvgPrice; }
          set { SetAvgPrice(value); }
        }
        public Builder SetAvgPrice(double value) {
          PrepareBuilder();
          result.hasAvgPrice = true;
          result.avgPrice_ = value;
          return this;
        }
        public Builder ClearAvgPrice() {
          PrepareBuilder();
          result.hasAvgPrice = false;
          result.avgPrice_ = 0D;
          return this;
        }
        
        public bool HasVolume {
          get { return result.hasVolume; }
        }
        public long Volume {
          get { return result.Volume; }
          set { SetVolume(value); }
        }
        public Builder SetVolume(long value) {
          PrepareBuilder();
          result.hasVolume = true;
          result.volume_ = value;
          return this;
        }
        public Builder ClearVolume() {
          PrepareBuilder();
          result.hasVolume = false;
          result.volume_ = 0L;
          return this;
        }
        
        public bool HasTurnover {
          get { return result.hasTurnover; }
        }
        public double Turnover {
          get { return result.Turnover; }
          set { SetTurnover(value); }
        }
        public Builder SetTurnover(double value) {
          PrepareBuilder();
          result.hasTurnover = true;
          result.turnover_ = value;
          return this;
        }
        public Builder ClearTurnover() {
          PrepareBuilder();
          result.hasTurnover = false;
          result.turnover_ = 0D;
          return this;
        }
        
        public bool HasTimestamp {
          get { return result.hasTimestamp; }
        }
        public double Timestamp {
          get { return result.Timestamp; }
          set { SetTimestamp(value); }
        }
        public Builder SetTimestamp(double value) {
          PrepareBuilder();
          result.hasTimestamp = true;
          result.timestamp_ = value;
          return this;
        }
        public Builder ClearTimestamp() {
          PrepareBuilder();
          result.hasTimestamp = false;
          result.timestamp_ = 0D;
          return this;
        }
      }
      static TimeShare() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class SecurityStaticBasic : pb::GeneratedMessage<SecurityStaticBasic, SecurityStaticBasic.Builder> {
      private SecurityStaticBasic() { }
      private static readonly SecurityStaticBasic defaultInstance = new SecurityStaticBasic().MakeReadOnly();
      private static readonly string[] _securityStaticBasicFieldNames = new string[] { "delisting", "id", "listTime", "listTimestamp", "lotSize", "name", "secType", "security" };
      private static readonly uint[] _securityStaticBasicFieldTags = new uint[] { 56, 16, 50, 65, 24, 42, 32, 10 };
      public static SecurityStaticBasic DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override SecurityStaticBasic DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override SecurityStaticBasic ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_SecurityStaticBasic__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<SecurityStaticBasic, SecurityStaticBasic.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_SecurityStaticBasic__FieldAccessorTable; }
      }
      
      public const int SecurityFieldNumber = 1;
      private bool hasSecurity;
      private global::Futu.OpenApi.Pb.QotCommon.Security security_;
      public bool HasSecurity {
        get { return hasSecurity; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.Security Security {
        get { return security_ ?? global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance; }
      }
      
      public const int IdFieldNumber = 2;
      private bool hasId;
      private long id_;
      public bool HasId {
        get { return hasId; }
      }
      public long Id {
        get { return id_; }
      }
      
      public const int LotSizeFieldNumber = 3;
      private bool hasLotSize;
      private int lotSize_;
      public bool HasLotSize {
        get { return hasLotSize; }
      }
      public int LotSize {
        get { return lotSize_; }
      }
      
      public const int SecTypeFieldNumber = 4;
      private bool hasSecType;
      private int secType_;
      public bool HasSecType {
        get { return hasSecType; }
      }
      public int SecType {
        get { return secType_; }
      }
      
      public const int NameFieldNumber = 5;
      private bool hasName;
      private string name_ = "";
      public bool HasName {
        get { return hasName; }
      }
      public string Name {
        get { return name_; }
      }
      
      public const int ListTimeFieldNumber = 6;
      private bool hasListTime;
      private string listTime_ = "";
      public bool HasListTime {
        get { return hasListTime; }
      }
      public string ListTime {
        get { return listTime_; }
      }
      
      public const int DelistingFieldNumber = 7;
      private bool hasDelisting;
      private bool delisting_;
      public bool HasDelisting {
        get { return hasDelisting; }
      }
      public bool Delisting {
        get { return delisting_; }
      }
      
      public const int ListTimestampFieldNumber = 8;
      private bool hasListTimestamp;
      private double listTimestamp_;
      public bool HasListTimestamp {
        get { return hasListTimestamp; }
      }
      public double ListTimestamp {
        get { return listTimestamp_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasSecurity) return false;
          if (!hasId) return false;
          if (!hasLotSize) return false;
          if (!hasSecType) return false;
          if (!hasName) return false;
          if (!hasListTime) return false;
          if (!Security.IsInitialized) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _securityStaticBasicFieldNames;
        if (hasSecurity) {
          output.WriteMessage(1, field_names[7], Security);
        }
        if (hasId) {
          output.WriteInt64(2, field_names[1], Id);
        }
        if (hasLotSize) {
          output.WriteInt32(3, field_names[4], LotSize);
        }
        if (hasSecType) {
          output.WriteInt32(4, field_names[6], SecType);
        }
        if (hasName) {
          output.WriteString(5, field_names[5], Name);
        }
        if (hasListTime) {
          output.WriteString(6, field_names[2], ListTime);
        }
        if (hasDelisting) {
          output.WriteBool(7, field_names[0], Delisting);
        }
        if (hasListTimestamp) {
          output.WriteDouble(8, field_names[3], ListTimestamp);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSecurity) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Security);
        }
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, Id);
        }
        if (hasLotSize) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, LotSize);
        }
        if (hasSecType) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, SecType);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Name);
        }
        if (hasListTime) {
          size += pb::CodedOutputStream.ComputeStringSize(6, ListTime);
        }
        if (hasDelisting) {
          size += pb::CodedOutputStream.ComputeBoolSize(7, Delisting);
        }
        if (hasListTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, ListTimestamp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static SecurityStaticBasic ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static SecurityStaticBasic ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static SecurityStaticBasic ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static SecurityStaticBasic ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static SecurityStaticBasic ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static SecurityStaticBasic ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static SecurityStaticBasic ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static SecurityStaticBasic ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static SecurityStaticBasic ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static SecurityStaticBasic ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private SecurityStaticBasic MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(SecurityStaticBasic prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<SecurityStaticBasic, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(SecurityStaticBasic cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private SecurityStaticBasic result;
        
        private SecurityStaticBasic PrepareBuilder() {
          if (resultIsReadOnly) {
            SecurityStaticBasic original = result;
            result = new SecurityStaticBasic();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override SecurityStaticBasic MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.SecurityStaticBasic.Descriptor; }
        }
        
        public override SecurityStaticBasic DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.SecurityStaticBasic.DefaultInstance; }
        }
        
        public override SecurityStaticBasic BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is SecurityStaticBasic) {
            return MergeFrom((SecurityStaticBasic) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(SecurityStaticBasic other) {
          if (other == global::Futu.OpenApi.Pb.QotCommon.SecurityStaticBasic.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasSecurity) {
            MergeSecurity(other.Security);
          }
          if (other.HasId) {
            Id = other.Id;
          }
          if (other.HasLotSize) {
            LotSize = other.LotSize;
          }
          if (other.HasSecType) {
            SecType = other.SecType;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasListTime) {
            ListTime = other.ListTime;
          }
          if (other.HasDelisting) {
            Delisting = other.Delisting;
          }
          if (other.HasListTimestamp) {
            ListTimestamp = other.ListTimestamp;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_securityStaticBasicFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _securityStaticBasicFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                global::Futu.OpenApi.Pb.QotCommon.Security.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder();
                if (result.hasSecurity) {
                  subBuilder.MergeFrom(Security);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Security = subBuilder.BuildPartial();
                break;
              }
              case 16: {
                result.hasId = input.ReadInt64(ref result.id_);
                break;
              }
              case 24: {
                result.hasLotSize = input.ReadInt32(ref result.lotSize_);
                break;
              }
              case 32: {
                result.hasSecType = input.ReadInt32(ref result.secType_);
                break;
              }
              case 42: {
                result.hasName = input.ReadString(ref result.name_);
                break;
              }
              case 50: {
                result.hasListTime = input.ReadString(ref result.listTime_);
                break;
              }
              case 56: {
                result.hasDelisting = input.ReadBool(ref result.delisting_);
                break;
              }
              case 65: {
                result.hasListTimestamp = input.ReadDouble(ref result.listTimestamp_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasSecurity {
         get { return result.hasSecurity; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.Security Security {
          get { return result.Security; }
          set { SetSecurity(value); }
        }
        public Builder SetSecurity(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasSecurity = true;
          result.security_ = value;
          return this;
        }
        public Builder SetSecurity(global::Futu.OpenApi.Pb.QotCommon.Security.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasSecurity = true;
          result.security_ = builderForValue.Build();
          return this;
        }
        public Builder MergeSecurity(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasSecurity &&
              result.security_ != global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance) {
              result.security_ = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder(result.security_).MergeFrom(value).BuildPartial();
          } else {
            result.security_ = value;
          }
          result.hasSecurity = true;
          return this;
        }
        public Builder ClearSecurity() {
          PrepareBuilder();
          result.hasSecurity = false;
          result.security_ = null;
          return this;
        }
        
        public bool HasId {
          get { return result.hasId; }
        }
        public long Id {
          get { return result.Id; }
          set { SetId(value); }
        }
        public Builder SetId(long value) {
          PrepareBuilder();
          result.hasId = true;
          result.id_ = value;
          return this;
        }
        public Builder ClearId() {
          PrepareBuilder();
          result.hasId = false;
          result.id_ = 0L;
          return this;
        }
        
        public bool HasLotSize {
          get { return result.hasLotSize; }
        }
        public int LotSize {
          get { return result.LotSize; }
          set { SetLotSize(value); }
        }
        public Builder SetLotSize(int value) {
          PrepareBuilder();
          result.hasLotSize = true;
          result.lotSize_ = value;
          return this;
        }
        public Builder ClearLotSize() {
          PrepareBuilder();
          result.hasLotSize = false;
          result.lotSize_ = 0;
          return this;
        }
        
        public bool HasSecType {
          get { return result.hasSecType; }
        }
        public int SecType {
          get { return result.SecType; }
          set { SetSecType(value); }
        }
        public Builder SetSecType(int value) {
          PrepareBuilder();
          result.hasSecType = true;
          result.secType_ = value;
          return this;
        }
        public Builder ClearSecType() {
          PrepareBuilder();
          result.hasSecType = false;
          result.secType_ = 0;
          return this;
        }
        
        public bool HasName {
          get { return result.hasName; }
        }
        public string Name {
          get { return result.Name; }
          set { SetName(value); }
        }
        public Builder SetName(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasName = true;
          result.name_ = value;
          return this;
        }
        public Builder ClearName() {
          PrepareBuilder();
          result.hasName = false;
          result.name_ = "";
          return this;
        }
        
        public bool HasListTime {
          get { return result.hasListTime; }
        }
        public string ListTime {
          get { return result.ListTime; }
          set { SetListTime(value); }
        }
        public Builder SetListTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasListTime = true;
          result.listTime_ = value;
          return this;
        }
        public Builder ClearListTime() {
          PrepareBuilder();
          result.hasListTime = false;
          result.listTime_ = "";
          return this;
        }
        
        public bool HasDelisting {
          get { return result.hasDelisting; }
        }
        public bool Delisting {
          get { return result.Delisting; }
          set { SetDelisting(value); }
        }
        public Builder SetDelisting(bool value) {
          PrepareBuilder();
          result.hasDelisting = true;
          result.delisting_ = value;
          return this;
        }
        public Builder ClearDelisting() {
          PrepareBuilder();
          result.hasDelisting = false;
          result.delisting_ = false;
          return this;
        }
        
        public bool HasListTimestamp {
          get { return result.hasListTimestamp; }
        }
        public double ListTimestamp {
          get { return result.ListTimestamp; }
          set { SetListTimestamp(value); }
        }
        public Builder SetListTimestamp(double value) {
          PrepareBuilder();
          result.hasListTimestamp = true;
          result.listTimestamp_ = value;
          return this;
        }
        public Builder ClearListTimestamp() {
          PrepareBuilder();
          result.hasListTimestamp = false;
          result.listTimestamp_ = 0D;
          return this;
        }
      }
      static SecurityStaticBasic() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class WarrantStaticExData : pb::GeneratedMessage<WarrantStaticExData, WarrantStaticExData.Builder> {
      private WarrantStaticExData() { }
      private static readonly WarrantStaticExData defaultInstance = new WarrantStaticExData().MakeReadOnly();
      private static readonly string[] _warrantStaticExDataFieldNames = new string[] { "owner", "type" };
      private static readonly uint[] _warrantStaticExDataFieldTags = new uint[] { 18, 8 };
      public static WarrantStaticExData DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override WarrantStaticExData DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override WarrantStaticExData ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_WarrantStaticExData__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<WarrantStaticExData, WarrantStaticExData.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_WarrantStaticExData__FieldAccessorTable; }
      }
      
      public const int TypeFieldNumber = 1;
      private bool hasType;
      private int type_;
      public bool HasType {
        get { return hasType; }
      }
      public int Type {
        get { return type_; }
      }
      
      public const int OwnerFieldNumber = 2;
      private bool hasOwner;
      private global::Futu.OpenApi.Pb.QotCommon.Security owner_;
      public bool HasOwner {
        get { return hasOwner; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.Security Owner {
        get { return owner_ ?? global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasType) return false;
          if (!hasOwner) return false;
          if (!Owner.IsInitialized) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _warrantStaticExDataFieldNames;
        if (hasType) {
          output.WriteInt32(1, field_names[1], Type);
        }
        if (hasOwner) {
          output.WriteMessage(2, field_names[0], Owner);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
        }
        if (hasOwner) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Owner);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static WarrantStaticExData ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static WarrantStaticExData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static WarrantStaticExData ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static WarrantStaticExData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static WarrantStaticExData ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static WarrantStaticExData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static WarrantStaticExData ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static WarrantStaticExData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static WarrantStaticExData ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static WarrantStaticExData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private WarrantStaticExData MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(WarrantStaticExData prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<WarrantStaticExData, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(WarrantStaticExData cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private WarrantStaticExData result;
        
        private WarrantStaticExData PrepareBuilder() {
          if (resultIsReadOnly) {
            WarrantStaticExData original = result;
            result = new WarrantStaticExData();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override WarrantStaticExData MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.WarrantStaticExData.Descriptor; }
        }
        
        public override WarrantStaticExData DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.WarrantStaticExData.DefaultInstance; }
        }
        
        public override WarrantStaticExData BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is WarrantStaticExData) {
            return MergeFrom((WarrantStaticExData) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(WarrantStaticExData other) {
          if (other == global::Futu.OpenApi.Pb.QotCommon.WarrantStaticExData.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasType) {
            Type = other.Type;
          }
          if (other.HasOwner) {
            MergeOwner(other.Owner);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_warrantStaticExDataFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _warrantStaticExDataFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasType = input.ReadInt32(ref result.type_);
                break;
              }
              case 18: {
                global::Futu.OpenApi.Pb.QotCommon.Security.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder();
                if (result.hasOwner) {
                  subBuilder.MergeFrom(Owner);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Owner = subBuilder.BuildPartial();
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasType {
          get { return result.hasType; }
        }
        public int Type {
          get { return result.Type; }
          set { SetType(value); }
        }
        public Builder SetType(int value) {
          PrepareBuilder();
          result.hasType = true;
          result.type_ = value;
          return this;
        }
        public Builder ClearType() {
          PrepareBuilder();
          result.hasType = false;
          result.type_ = 0;
          return this;
        }
        
        public bool HasOwner {
         get { return result.hasOwner; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.Security Owner {
          get { return result.Owner; }
          set { SetOwner(value); }
        }
        public Builder SetOwner(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasOwner = true;
          result.owner_ = value;
          return this;
        }
        public Builder SetOwner(global::Futu.OpenApi.Pb.QotCommon.Security.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasOwner = true;
          result.owner_ = builderForValue.Build();
          return this;
        }
        public Builder MergeOwner(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasOwner &&
              result.owner_ != global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance) {
              result.owner_ = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder(result.owner_).MergeFrom(value).BuildPartial();
          } else {
            result.owner_ = value;
          }
          result.hasOwner = true;
          return this;
        }
        public Builder ClearOwner() {
          PrepareBuilder();
          result.hasOwner = false;
          result.owner_ = null;
          return this;
        }
      }
      static WarrantStaticExData() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class OptionStaticExData : pb::GeneratedMessage<OptionStaticExData, OptionStaticExData.Builder> {
      private OptionStaticExData() { }
      private static readonly OptionStaticExData defaultInstance = new OptionStaticExData().MakeReadOnly();
      private static readonly string[] _optionStaticExDataFieldNames = new string[] { "indexOptionType", "market", "owner", "strikePrice", "strikeTime", "strikeTimestamp", "suspend", "type" };
      private static readonly uint[] _optionStaticExDataFieldTags = new uint[] { 64, 50, 18, 33, 26, 57, 40, 8 };
      public static OptionStaticExData DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override OptionStaticExData DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override OptionStaticExData ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_OptionStaticExData__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<OptionStaticExData, OptionStaticExData.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_OptionStaticExData__FieldAccessorTable; }
      }
      
      public const int TypeFieldNumber = 1;
      private bool hasType;
      private int type_;
      public bool HasType {
        get { return hasType; }
      }
      public int Type {
        get { return type_; }
      }
      
      public const int OwnerFieldNumber = 2;
      private bool hasOwner;
      private global::Futu.OpenApi.Pb.QotCommon.Security owner_;
      public bool HasOwner {
        get { return hasOwner; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.Security Owner {
        get { return owner_ ?? global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance; }
      }
      
      public const int StrikeTimeFieldNumber = 3;
      private bool hasStrikeTime;
      private string strikeTime_ = "";
      public bool HasStrikeTime {
        get { return hasStrikeTime; }
      }
      public string StrikeTime {
        get { return strikeTime_; }
      }
      
      public const int StrikePriceFieldNumber = 4;
      private bool hasStrikePrice;
      private double strikePrice_;
      public bool HasStrikePrice {
        get { return hasStrikePrice; }
      }
      public double StrikePrice {
        get { return strikePrice_; }
      }
      
      public const int SuspendFieldNumber = 5;
      private bool hasSuspend;
      private bool suspend_;
      public bool HasSuspend {
        get { return hasSuspend; }
      }
      public bool Suspend {
        get { return suspend_; }
      }
      
      public const int MarketFieldNumber = 6;
      private bool hasMarket;
      private string market_ = "";
      public bool HasMarket {
        get { return hasMarket; }
      }
      public string Market {
        get { return market_; }
      }
      
      public const int StrikeTimestampFieldNumber = 7;
      private bool hasStrikeTimestamp;
      private double strikeTimestamp_;
      public bool HasStrikeTimestamp {
        get { return hasStrikeTimestamp; }
      }
      public double StrikeTimestamp {
        get { return strikeTimestamp_; }
      }
      
      public const int IndexOptionTypeFieldNumber = 8;
      private bool hasIndexOptionType;
      private int indexOptionType_;
      public bool HasIndexOptionType {
        get { return hasIndexOptionType; }
      }
      public int IndexOptionType {
        get { return indexOptionType_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasType) return false;
          if (!hasOwner) return false;
          if (!hasStrikeTime) return false;
          if (!hasStrikePrice) return false;
          if (!hasSuspend) return false;
          if (!hasMarket) return false;
          if (!Owner.IsInitialized) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _optionStaticExDataFieldNames;
        if (hasType) {
          output.WriteInt32(1, field_names[7], Type);
        }
        if (hasOwner) {
          output.WriteMessage(2, field_names[2], Owner);
        }
        if (hasStrikeTime) {
          output.WriteString(3, field_names[4], StrikeTime);
        }
        if (hasStrikePrice) {
          output.WriteDouble(4, field_names[3], StrikePrice);
        }
        if (hasSuspend) {
          output.WriteBool(5, field_names[6], Suspend);
        }
        if (hasMarket) {
          output.WriteString(6, field_names[1], Market);
        }
        if (hasStrikeTimestamp) {
          output.WriteDouble(7, field_names[5], StrikeTimestamp);
        }
        if (hasIndexOptionType) {
          output.WriteInt32(8, field_names[0], IndexOptionType);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
        }
        if (hasOwner) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Owner);
        }
        if (hasStrikeTime) {
          size += pb::CodedOutputStream.ComputeStringSize(3, StrikeTime);
        }
        if (hasStrikePrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, StrikePrice);
        }
        if (hasSuspend) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, Suspend);
        }
        if (hasMarket) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Market);
        }
        if (hasStrikeTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, StrikeTimestamp);
        }
        if (hasIndexOptionType) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, IndexOptionType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static OptionStaticExData ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static OptionStaticExData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static OptionStaticExData ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static OptionStaticExData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static OptionStaticExData ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static OptionStaticExData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static OptionStaticExData ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static OptionStaticExData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static OptionStaticExData ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static OptionStaticExData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private OptionStaticExData MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(OptionStaticExData prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<OptionStaticExData, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(OptionStaticExData cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private OptionStaticExData result;
        
        private OptionStaticExData PrepareBuilder() {
          if (resultIsReadOnly) {
            OptionStaticExData original = result;
            result = new OptionStaticExData();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override OptionStaticExData MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.OptionStaticExData.Descriptor; }
        }
        
        public override OptionStaticExData DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.OptionStaticExData.DefaultInstance; }
        }
        
        public override OptionStaticExData BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is OptionStaticExData) {
            return MergeFrom((OptionStaticExData) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(OptionStaticExData other) {
          if (other == global::Futu.OpenApi.Pb.QotCommon.OptionStaticExData.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasType) {
            Type = other.Type;
          }
          if (other.HasOwner) {
            MergeOwner(other.Owner);
          }
          if (other.HasStrikeTime) {
            StrikeTime = other.StrikeTime;
          }
          if (other.HasStrikePrice) {
            StrikePrice = other.StrikePrice;
          }
          if (other.HasSuspend) {
            Suspend = other.Suspend;
          }
          if (other.HasMarket) {
            Market = other.Market;
          }
          if (other.HasStrikeTimestamp) {
            StrikeTimestamp = other.StrikeTimestamp;
          }
          if (other.HasIndexOptionType) {
            IndexOptionType = other.IndexOptionType;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_optionStaticExDataFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _optionStaticExDataFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasType = input.ReadInt32(ref result.type_);
                break;
              }
              case 18: {
                global::Futu.OpenApi.Pb.QotCommon.Security.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder();
                if (result.hasOwner) {
                  subBuilder.MergeFrom(Owner);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Owner = subBuilder.BuildPartial();
                break;
              }
              case 26: {
                result.hasStrikeTime = input.ReadString(ref result.strikeTime_);
                break;
              }
              case 33: {
                result.hasStrikePrice = input.ReadDouble(ref result.strikePrice_);
                break;
              }
              case 40: {
                result.hasSuspend = input.ReadBool(ref result.suspend_);
                break;
              }
              case 50: {
                result.hasMarket = input.ReadString(ref result.market_);
                break;
              }
              case 57: {
                result.hasStrikeTimestamp = input.ReadDouble(ref result.strikeTimestamp_);
                break;
              }
              case 64: {
                result.hasIndexOptionType = input.ReadInt32(ref result.indexOptionType_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasType {
          get { return result.hasType; }
        }
        public int Type {
          get { return result.Type; }
          set { SetType(value); }
        }
        public Builder SetType(int value) {
          PrepareBuilder();
          result.hasType = true;
          result.type_ = value;
          return this;
        }
        public Builder ClearType() {
          PrepareBuilder();
          result.hasType = false;
          result.type_ = 0;
          return this;
        }
        
        public bool HasOwner {
         get { return result.hasOwner; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.Security Owner {
          get { return result.Owner; }
          set { SetOwner(value); }
        }
        public Builder SetOwner(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasOwner = true;
          result.owner_ = value;
          return this;
        }
        public Builder SetOwner(global::Futu.OpenApi.Pb.QotCommon.Security.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasOwner = true;
          result.owner_ = builderForValue.Build();
          return this;
        }
        public Builder MergeOwner(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasOwner &&
              result.owner_ != global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance) {
              result.owner_ = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder(result.owner_).MergeFrom(value).BuildPartial();
          } else {
            result.owner_ = value;
          }
          result.hasOwner = true;
          return this;
        }
        public Builder ClearOwner() {
          PrepareBuilder();
          result.hasOwner = false;
          result.owner_ = null;
          return this;
        }
        
        public bool HasStrikeTime {
          get { return result.hasStrikeTime; }
        }
        public string StrikeTime {
          get { return result.StrikeTime; }
          set { SetStrikeTime(value); }
        }
        public Builder SetStrikeTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasStrikeTime = true;
          result.strikeTime_ = value;
          return this;
        }
        public Builder ClearStrikeTime() {
          PrepareBuilder();
          result.hasStrikeTime = false;
          result.strikeTime_ = "";
          return this;
        }
        
        public bool HasStrikePrice {
          get { return result.hasStrikePrice; }
        }
        public double StrikePrice {
          get { return result.StrikePrice; }
          set { SetStrikePrice(value); }
        }
        public Builder SetStrikePrice(double value) {
          PrepareBuilder();
          result.hasStrikePrice = true;
          result.strikePrice_ = value;
          return this;
        }
        public Builder ClearStrikePrice() {
          PrepareBuilder();
          result.hasStrikePrice = false;
          result.strikePrice_ = 0D;
          return this;
        }
        
        public bool HasSuspend {
          get { return result.hasSuspend; }
        }
        public bool Suspend {
          get { return result.Suspend; }
          set { SetSuspend(value); }
        }
        public Builder SetSuspend(bool value) {
          PrepareBuilder();
          result.hasSuspend = true;
          result.suspend_ = value;
          return this;
        }
        public Builder ClearSuspend() {
          PrepareBuilder();
          result.hasSuspend = false;
          result.suspend_ = false;
          return this;
        }
        
        public bool HasMarket {
          get { return result.hasMarket; }
        }
        public string Market {
          get { return result.Market; }
          set { SetMarket(value); }
        }
        public Builder SetMarket(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasMarket = true;
          result.market_ = value;
          return this;
        }
        public Builder ClearMarket() {
          PrepareBuilder();
          result.hasMarket = false;
          result.market_ = "";
          return this;
        }
        
        public bool HasStrikeTimestamp {
          get { return result.hasStrikeTimestamp; }
        }
        public double StrikeTimestamp {
          get { return result.StrikeTimestamp; }
          set { SetStrikeTimestamp(value); }
        }
        public Builder SetStrikeTimestamp(double value) {
          PrepareBuilder();
          result.hasStrikeTimestamp = true;
          result.strikeTimestamp_ = value;
          return this;
        }
        public Builder ClearStrikeTimestamp() {
          PrepareBuilder();
          result.hasStrikeTimestamp = false;
          result.strikeTimestamp_ = 0D;
          return this;
        }
        
        public bool HasIndexOptionType {
          get { return result.hasIndexOptionType; }
        }
        public int IndexOptionType {
          get { return result.IndexOptionType; }
          set { SetIndexOptionType(value); }
        }
        public Builder SetIndexOptionType(int value) {
          PrepareBuilder();
          result.hasIndexOptionType = true;
          result.indexOptionType_ = value;
          return this;
        }
        public Builder ClearIndexOptionType() {
          PrepareBuilder();
          result.hasIndexOptionType = false;
          result.indexOptionType_ = 0;
          return this;
        }
      }
      static OptionStaticExData() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class SecurityStaticInfo : pb::GeneratedMessage<SecurityStaticInfo, SecurityStaticInfo.Builder> {
      private SecurityStaticInfo() { }
      private static readonly SecurityStaticInfo defaultInstance = new SecurityStaticInfo().MakeReadOnly();
      private static readonly string[] _securityStaticInfoFieldNames = new string[] { "basic", "optionExData", "warrantExData" };
      private static readonly uint[] _securityStaticInfoFieldTags = new uint[] { 10, 26, 18 };
      public static SecurityStaticInfo DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override SecurityStaticInfo DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override SecurityStaticInfo ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_SecurityStaticInfo__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<SecurityStaticInfo, SecurityStaticInfo.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_SecurityStaticInfo__FieldAccessorTable; }
      }
      
      public const int BasicFieldNumber = 1;
      private bool hasBasic;
      private global::Futu.OpenApi.Pb.QotCommon.SecurityStaticBasic basic_;
      public bool HasBasic {
        get { return hasBasic; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.SecurityStaticBasic Basic {
        get { return basic_ ?? global::Futu.OpenApi.Pb.QotCommon.SecurityStaticBasic.DefaultInstance; }
      }
      
      public const int WarrantExDataFieldNumber = 2;
      private bool hasWarrantExData;
      private global::Futu.OpenApi.Pb.QotCommon.WarrantStaticExData warrantExData_;
      public bool HasWarrantExData {
        get { return hasWarrantExData; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.WarrantStaticExData WarrantExData {
        get { return warrantExData_ ?? global::Futu.OpenApi.Pb.QotCommon.WarrantStaticExData.DefaultInstance; }
      }
      
      public const int OptionExDataFieldNumber = 3;
      private bool hasOptionExData;
      private global::Futu.OpenApi.Pb.QotCommon.OptionStaticExData optionExData_;
      public bool HasOptionExData {
        get { return hasOptionExData; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.OptionStaticExData OptionExData {
        get { return optionExData_ ?? global::Futu.OpenApi.Pb.QotCommon.OptionStaticExData.DefaultInstance; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasBasic) return false;
          if (!Basic.IsInitialized) return false;
          if (HasWarrantExData) {
            if (!WarrantExData.IsInitialized) return false;
          }
          if (HasOptionExData) {
            if (!OptionExData.IsInitialized) return false;
          }
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _securityStaticInfoFieldNames;
        if (hasBasic) {
          output.WriteMessage(1, field_names[0], Basic);
        }
        if (hasWarrantExData) {
          output.WriteMessage(2, field_names[2], WarrantExData);
        }
        if (hasOptionExData) {
          output.WriteMessage(3, field_names[1], OptionExData);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBasic) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Basic);
        }
        if (hasWarrantExData) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, WarrantExData);
        }
        if (hasOptionExData) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, OptionExData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static SecurityStaticInfo ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static SecurityStaticInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static SecurityStaticInfo ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static SecurityStaticInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static SecurityStaticInfo ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static SecurityStaticInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static SecurityStaticInfo ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static SecurityStaticInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static SecurityStaticInfo ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static SecurityStaticInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private SecurityStaticInfo MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(SecurityStaticInfo prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<SecurityStaticInfo, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(SecurityStaticInfo cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private SecurityStaticInfo result;
        
        private SecurityStaticInfo PrepareBuilder() {
          if (resultIsReadOnly) {
            SecurityStaticInfo original = result;
            result = new SecurityStaticInfo();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override SecurityStaticInfo MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.SecurityStaticInfo.Descriptor; }
        }
        
        public override SecurityStaticInfo DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.SecurityStaticInfo.DefaultInstance; }
        }
        
        public override SecurityStaticInfo BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is SecurityStaticInfo) {
            return MergeFrom((SecurityStaticInfo) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(SecurityStaticInfo other) {
          if (other == global::Futu.OpenApi.Pb.QotCommon.SecurityStaticInfo.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasBasic) {
            MergeBasic(other.Basic);
          }
          if (other.HasWarrantExData) {
            MergeWarrantExData(other.WarrantExData);
          }
          if (other.HasOptionExData) {
            MergeOptionExData(other.OptionExData);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_securityStaticInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _securityStaticInfoFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                global::Futu.OpenApi.Pb.QotCommon.SecurityStaticBasic.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.SecurityStaticBasic.CreateBuilder();
                if (result.hasBasic) {
                  subBuilder.MergeFrom(Basic);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Basic = subBuilder.BuildPartial();
                break;
              }
              case 18: {
                global::Futu.OpenApi.Pb.QotCommon.WarrantStaticExData.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.WarrantStaticExData.CreateBuilder();
                if (result.hasWarrantExData) {
                  subBuilder.MergeFrom(WarrantExData);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                WarrantExData = subBuilder.BuildPartial();
                break;
              }
              case 26: {
                global::Futu.OpenApi.Pb.QotCommon.OptionStaticExData.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.OptionStaticExData.CreateBuilder();
                if (result.hasOptionExData) {
                  subBuilder.MergeFrom(OptionExData);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                OptionExData = subBuilder.BuildPartial();
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasBasic {
         get { return result.hasBasic; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.SecurityStaticBasic Basic {
          get { return result.Basic; }
          set { SetBasic(value); }
        }
        public Builder SetBasic(global::Futu.OpenApi.Pb.QotCommon.SecurityStaticBasic value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasBasic = true;
          result.basic_ = value;
          return this;
        }
        public Builder SetBasic(global::Futu.OpenApi.Pb.QotCommon.SecurityStaticBasic.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasBasic = true;
          result.basic_ = builderForValue.Build();
          return this;
        }
        public Builder MergeBasic(global::Futu.OpenApi.Pb.QotCommon.SecurityStaticBasic value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasBasic &&
              result.basic_ != global::Futu.OpenApi.Pb.QotCommon.SecurityStaticBasic.DefaultInstance) {
              result.basic_ = global::Futu.OpenApi.Pb.QotCommon.SecurityStaticBasic.CreateBuilder(result.basic_).MergeFrom(value).BuildPartial();
          } else {
            result.basic_ = value;
          }
          result.hasBasic = true;
          return this;
        }
        public Builder ClearBasic() {
          PrepareBuilder();
          result.hasBasic = false;
          result.basic_ = null;
          return this;
        }
        
        public bool HasWarrantExData {
         get { return result.hasWarrantExData; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.WarrantStaticExData WarrantExData {
          get { return result.WarrantExData; }
          set { SetWarrantExData(value); }
        }
        public Builder SetWarrantExData(global::Futu.OpenApi.Pb.QotCommon.WarrantStaticExData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasWarrantExData = true;
          result.warrantExData_ = value;
          return this;
        }
        public Builder SetWarrantExData(global::Futu.OpenApi.Pb.QotCommon.WarrantStaticExData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasWarrantExData = true;
          result.warrantExData_ = builderForValue.Build();
          return this;
        }
        public Builder MergeWarrantExData(global::Futu.OpenApi.Pb.QotCommon.WarrantStaticExData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasWarrantExData &&
              result.warrantExData_ != global::Futu.OpenApi.Pb.QotCommon.WarrantStaticExData.DefaultInstance) {
              result.warrantExData_ = global::Futu.OpenApi.Pb.QotCommon.WarrantStaticExData.CreateBuilder(result.warrantExData_).MergeFrom(value).BuildPartial();
          } else {
            result.warrantExData_ = value;
          }
          result.hasWarrantExData = true;
          return this;
        }
        public Builder ClearWarrantExData() {
          PrepareBuilder();
          result.hasWarrantExData = false;
          result.warrantExData_ = null;
          return this;
        }
        
        public bool HasOptionExData {
         get { return result.hasOptionExData; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.OptionStaticExData OptionExData {
          get { return result.OptionExData; }
          set { SetOptionExData(value); }
        }
        public Builder SetOptionExData(global::Futu.OpenApi.Pb.QotCommon.OptionStaticExData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasOptionExData = true;
          result.optionExData_ = value;
          return this;
        }
        public Builder SetOptionExData(global::Futu.OpenApi.Pb.QotCommon.OptionStaticExData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasOptionExData = true;
          result.optionExData_ = builderForValue.Build();
          return this;
        }
        public Builder MergeOptionExData(global::Futu.OpenApi.Pb.QotCommon.OptionStaticExData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasOptionExData &&
              result.optionExData_ != global::Futu.OpenApi.Pb.QotCommon.OptionStaticExData.DefaultInstance) {
              result.optionExData_ = global::Futu.OpenApi.Pb.QotCommon.OptionStaticExData.CreateBuilder(result.optionExData_).MergeFrom(value).BuildPartial();
          } else {
            result.optionExData_ = value;
          }
          result.hasOptionExData = true;
          return this;
        }
        public Builder ClearOptionExData() {
          PrepareBuilder();
          result.hasOptionExData = false;
          result.optionExData_ = null;
          return this;
        }
      }
      static SecurityStaticInfo() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Broker : pb::GeneratedMessage<Broker, Broker.Builder> {
      private Broker() { }
      private static readonly Broker defaultInstance = new Broker().MakeReadOnly();
      private static readonly string[] _brokerFieldNames = new string[] { "id", "name", "pos" };
      private static readonly uint[] _brokerFieldTags = new uint[] { 8, 18, 24 };
      public static Broker DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Broker DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Broker ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_Broker__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Broker, Broker.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_Broker__FieldAccessorTable; }
      }
      
      public const int IdFieldNumber = 1;
      private bool hasId;
      private long id_;
      public bool HasId {
        get { return hasId; }
      }
      public long Id {
        get { return id_; }
      }
      
      public const int NameFieldNumber = 2;
      private bool hasName;
      private string name_ = "";
      public bool HasName {
        get { return hasName; }
      }
      public string Name {
        get { return name_; }
      }
      
      public const int PosFieldNumber = 3;
      private bool hasPos;
      private int pos_;
      public bool HasPos {
        get { return hasPos; }
      }
      public int Pos {
        get { return pos_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasId) return false;
          if (!hasName) return false;
          if (!hasPos) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _brokerFieldNames;
        if (hasId) {
          output.WriteInt64(1, field_names[0], Id);
        }
        if (hasName) {
          output.WriteString(2, field_names[1], Name);
        }
        if (hasPos) {
          output.WriteInt32(3, field_names[2], Pos);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasPos) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Pos);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Broker ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Broker ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Broker ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Broker ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Broker ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Broker ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Broker ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Broker ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Broker ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Broker ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Broker MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Broker prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Broker, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Broker cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Broker result;
        
        private Broker PrepareBuilder() {
          if (resultIsReadOnly) {
            Broker original = result;
            result = new Broker();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Broker MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.Broker.Descriptor; }
        }
        
        public override Broker DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.Broker.DefaultInstance; }
        }
        
        public override Broker BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Broker) {
            return MergeFrom((Broker) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Broker other) {
          if (other == global::Futu.OpenApi.Pb.QotCommon.Broker.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasId) {
            Id = other.Id;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasPos) {
            Pos = other.Pos;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_brokerFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _brokerFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasId = input.ReadInt64(ref result.id_);
                break;
              }
              case 18: {
                result.hasName = input.ReadString(ref result.name_);
                break;
              }
              case 24: {
                result.hasPos = input.ReadInt32(ref result.pos_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasId {
          get { return result.hasId; }
        }
        public long Id {
          get { return result.Id; }
          set { SetId(value); }
        }
        public Builder SetId(long value) {
          PrepareBuilder();
          result.hasId = true;
          result.id_ = value;
          return this;
        }
        public Builder ClearId() {
          PrepareBuilder();
          result.hasId = false;
          result.id_ = 0L;
          return this;
        }
        
        public bool HasName {
          get { return result.hasName; }
        }
        public string Name {
          get { return result.Name; }
          set { SetName(value); }
        }
        public Builder SetName(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasName = true;
          result.name_ = value;
          return this;
        }
        public Builder ClearName() {
          PrepareBuilder();
          result.hasName = false;
          result.name_ = "";
          return this;
        }
        
        public bool HasPos {
          get { return result.hasPos; }
        }
        public int Pos {
          get { return result.Pos; }
          set { SetPos(value); }
        }
        public Builder SetPos(int value) {
          PrepareBuilder();
          result.hasPos = true;
          result.pos_ = value;
          return this;
        }
        public Builder ClearPos() {
          PrepareBuilder();
          result.hasPos = false;
          result.pos_ = 0;
          return this;
        }
      }
      static Broker() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Ticker : pb::GeneratedMessage<Ticker, Ticker.Builder> {
      private Ticker() { }
      private static readonly Ticker defaultInstance = new Ticker().MakeReadOnly();
      private static readonly string[] _tickerFieldNames = new string[] { "dir", "price", "pushDataType", "recvTime", "sequence", "time", "timestamp", "turnover", "type", "typeSign", "volume" };
      private static readonly uint[] _tickerFieldTags = new uint[] { 24, 33, 80, 57, 16, 10, 89, 49, 64, 72, 40 };
      public static Ticker DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Ticker DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Ticker ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_Ticker__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Ticker, Ticker.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_Ticker__FieldAccessorTable; }
      }
      
      public const int TimeFieldNumber = 1;
      private bool hasTime;
      private string time_ = "";
      public bool HasTime {
        get { return hasTime; }
      }
      public string Time {
        get { return time_; }
      }
      
      public const int SequenceFieldNumber = 2;
      private bool hasSequence;
      private long sequence_;
      public bool HasSequence {
        get { return hasSequence; }
      }
      public long Sequence {
        get { return sequence_; }
      }
      
      public const int DirFieldNumber = 3;
      private bool hasDir;
      private int dir_;
      public bool HasDir {
        get { return hasDir; }
      }
      public int Dir {
        get { return dir_; }
      }
      
      public const int PriceFieldNumber = 4;
      private bool hasPrice;
      private double price_;
      public bool HasPrice {
        get { return hasPrice; }
      }
      public double Price {
        get { return price_; }
      }
      
      public const int VolumeFieldNumber = 5;
      private bool hasVolume;
      private long volume_;
      public bool HasVolume {
        get { return hasVolume; }
      }
      public long Volume {
        get { return volume_; }
      }
      
      public const int TurnoverFieldNumber = 6;
      private bool hasTurnover;
      private double turnover_;
      public bool HasTurnover {
        get { return hasTurnover; }
      }
      public double Turnover {
        get { return turnover_; }
      }
      
      public const int RecvTimeFieldNumber = 7;
      private bool hasRecvTime;
      private double recvTime_;
      public bool HasRecvTime {
        get { return hasRecvTime; }
      }
      public double RecvTime {
        get { return recvTime_; }
      }
      
      public const int TypeFieldNumber = 8;
      private bool hasType;
      private int type_;
      public bool HasType {
        get { return hasType; }
      }
      public int Type {
        get { return type_; }
      }
      
      public const int TypeSignFieldNumber = 9;
      private bool hasTypeSign;
      private int typeSign_;
      public bool HasTypeSign {
        get { return hasTypeSign; }
      }
      public int TypeSign {
        get { return typeSign_; }
      }
      
      public const int PushDataTypeFieldNumber = 10;
      private bool hasPushDataType;
      private int pushDataType_;
      public bool HasPushDataType {
        get { return hasPushDataType; }
      }
      public int PushDataType {
        get { return pushDataType_; }
      }
      
      public const int TimestampFieldNumber = 11;
      private bool hasTimestamp;
      private double timestamp_;
      public bool HasTimestamp {
        get { return hasTimestamp; }
      }
      public double Timestamp {
        get { return timestamp_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasTime) return false;
          if (!hasSequence) return false;
          if (!hasDir) return false;
          if (!hasPrice) return false;
          if (!hasVolume) return false;
          if (!hasTurnover) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _tickerFieldNames;
        if (hasTime) {
          output.WriteString(1, field_names[5], Time);
        }
        if (hasSequence) {
          output.WriteInt64(2, field_names[4], Sequence);
        }
        if (hasDir) {
          output.WriteInt32(3, field_names[0], Dir);
        }
        if (hasPrice) {
          output.WriteDouble(4, field_names[1], Price);
        }
        if (hasVolume) {
          output.WriteInt64(5, field_names[10], Volume);
        }
        if (hasTurnover) {
          output.WriteDouble(6, field_names[7], Turnover);
        }
        if (hasRecvTime) {
          output.WriteDouble(7, field_names[3], RecvTime);
        }
        if (hasType) {
          output.WriteInt32(8, field_names[8], Type);
        }
        if (hasTypeSign) {
          output.WriteInt32(9, field_names[9], TypeSign);
        }
        if (hasPushDataType) {
          output.WriteInt32(10, field_names[2], PushDataType);
        }
        if (hasTimestamp) {
          output.WriteDouble(11, field_names[6], Timestamp);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTime) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Time);
        }
        if (hasSequence) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, Sequence);
        }
        if (hasDir) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Dir);
        }
        if (hasPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, Price);
        }
        if (hasVolume) {
          size += pb::CodedOutputStream.ComputeInt64Size(5, Volume);
        }
        if (hasTurnover) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, Turnover);
        }
        if (hasRecvTime) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, RecvTime);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Type);
        }
        if (hasTypeSign) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, TypeSign);
        }
        if (hasPushDataType) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, PushDataType);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(11, Timestamp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Ticker ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Ticker ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Ticker ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Ticker ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Ticker ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Ticker ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Ticker ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Ticker ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Ticker ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Ticker ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Ticker MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Ticker prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Ticker, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Ticker cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Ticker result;
        
        private Ticker PrepareBuilder() {
          if (resultIsReadOnly) {
            Ticker original = result;
            result = new Ticker();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Ticker MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.Ticker.Descriptor; }
        }
        
        public override Ticker DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.Ticker.DefaultInstance; }
        }
        
        public override Ticker BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Ticker) {
            return MergeFrom((Ticker) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Ticker other) {
          if (other == global::Futu.OpenApi.Pb.QotCommon.Ticker.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasTime) {
            Time = other.Time;
          }
          if (other.HasSequence) {
            Sequence = other.Sequence;
          }
          if (other.HasDir) {
            Dir = other.Dir;
          }
          if (other.HasPrice) {
            Price = other.Price;
          }
          if (other.HasVolume) {
            Volume = other.Volume;
          }
          if (other.HasTurnover) {
            Turnover = other.Turnover;
          }
          if (other.HasRecvTime) {
            RecvTime = other.RecvTime;
          }
          if (other.HasType) {
            Type = other.Type;
          }
          if (other.HasTypeSign) {
            TypeSign = other.TypeSign;
          }
          if (other.HasPushDataType) {
            PushDataType = other.PushDataType;
          }
          if (other.HasTimestamp) {
            Timestamp = other.Timestamp;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_tickerFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _tickerFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                result.hasTime = input.ReadString(ref result.time_);
                break;
              }
              case 16: {
                result.hasSequence = input.ReadInt64(ref result.sequence_);
                break;
              }
              case 24: {
                result.hasDir = input.ReadInt32(ref result.dir_);
                break;
              }
              case 33: {
                result.hasPrice = input.ReadDouble(ref result.price_);
                break;
              }
              case 40: {
                result.hasVolume = input.ReadInt64(ref result.volume_);
                break;
              }
              case 49: {
                result.hasTurnover = input.ReadDouble(ref result.turnover_);
                break;
              }
              case 57: {
                result.hasRecvTime = input.ReadDouble(ref result.recvTime_);
                break;
              }
              case 64: {
                result.hasType = input.ReadInt32(ref result.type_);
                break;
              }
              case 72: {
                result.hasTypeSign = input.ReadInt32(ref result.typeSign_);
                break;
              }
              case 80: {
                result.hasPushDataType = input.ReadInt32(ref result.pushDataType_);
                break;
              }
              case 89: {
                result.hasTimestamp = input.ReadDouble(ref result.timestamp_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasTime {
          get { return result.hasTime; }
        }
        public string Time {
          get { return result.Time; }
          set { SetTime(value); }
        }
        public Builder SetTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasTime = true;
          result.time_ = value;
          return this;
        }
        public Builder ClearTime() {
          PrepareBuilder();
          result.hasTime = false;
          result.time_ = "";
          return this;
        }
        
        public bool HasSequence {
          get { return result.hasSequence; }
        }
        public long Sequence {
          get { return result.Sequence; }
          set { SetSequence(value); }
        }
        public Builder SetSequence(long value) {
          PrepareBuilder();
          result.hasSequence = true;
          result.sequence_ = value;
          return this;
        }
        public Builder ClearSequence() {
          PrepareBuilder();
          result.hasSequence = false;
          result.sequence_ = 0L;
          return this;
        }
        
        public bool HasDir {
          get { return result.hasDir; }
        }
        public int Dir {
          get { return result.Dir; }
          set { SetDir(value); }
        }
        public Builder SetDir(int value) {
          PrepareBuilder();
          result.hasDir = true;
          result.dir_ = value;
          return this;
        }
        public Builder ClearDir() {
          PrepareBuilder();
          result.hasDir = false;
          result.dir_ = 0;
          return this;
        }
        
        public bool HasPrice {
          get { return result.hasPrice; }
        }
        public double Price {
          get { return result.Price; }
          set { SetPrice(value); }
        }
        public Builder SetPrice(double value) {
          PrepareBuilder();
          result.hasPrice = true;
          result.price_ = value;
          return this;
        }
        public Builder ClearPrice() {
          PrepareBuilder();
          result.hasPrice = false;
          result.price_ = 0D;
          return this;
        }
        
        public bool HasVolume {
          get { return result.hasVolume; }
        }
        public long Volume {
          get { return result.Volume; }
          set { SetVolume(value); }
        }
        public Builder SetVolume(long value) {
          PrepareBuilder();
          result.hasVolume = true;
          result.volume_ = value;
          return this;
        }
        public Builder ClearVolume() {
          PrepareBuilder();
          result.hasVolume = false;
          result.volume_ = 0L;
          return this;
        }
        
        public bool HasTurnover {
          get { return result.hasTurnover; }
        }
        public double Turnover {
          get { return result.Turnover; }
          set { SetTurnover(value); }
        }
        public Builder SetTurnover(double value) {
          PrepareBuilder();
          result.hasTurnover = true;
          result.turnover_ = value;
          return this;
        }
        public Builder ClearTurnover() {
          PrepareBuilder();
          result.hasTurnover = false;
          result.turnover_ = 0D;
          return this;
        }
        
        public bool HasRecvTime {
          get { return result.hasRecvTime; }
        }
        public double RecvTime {
          get { return result.RecvTime; }
          set { SetRecvTime(value); }
        }
        public Builder SetRecvTime(double value) {
          PrepareBuilder();
          result.hasRecvTime = true;
          result.recvTime_ = value;
          return this;
        }
        public Builder ClearRecvTime() {
          PrepareBuilder();
          result.hasRecvTime = false;
          result.recvTime_ = 0D;
          return this;
        }
        
        public bool HasType {
          get { return result.hasType; }
        }
        public int Type {
          get { return result.Type; }
          set { SetType(value); }
        }
        public Builder SetType(int value) {
          PrepareBuilder();
          result.hasType = true;
          result.type_ = value;
          return this;
        }
        public Builder ClearType() {
          PrepareBuilder();
          result.hasType = false;
          result.type_ = 0;
          return this;
        }
        
        public bool HasTypeSign {
          get { return result.hasTypeSign; }
        }
        public int TypeSign {
          get { return result.TypeSign; }
          set { SetTypeSign(value); }
        }
        public Builder SetTypeSign(int value) {
          PrepareBuilder();
          result.hasTypeSign = true;
          result.typeSign_ = value;
          return this;
        }
        public Builder ClearTypeSign() {
          PrepareBuilder();
          result.hasTypeSign = false;
          result.typeSign_ = 0;
          return this;
        }
        
        public bool HasPushDataType {
          get { return result.hasPushDataType; }
        }
        public int PushDataType {
          get { return result.PushDataType; }
          set { SetPushDataType(value); }
        }
        public Builder SetPushDataType(int value) {
          PrepareBuilder();
          result.hasPushDataType = true;
          result.pushDataType_ = value;
          return this;
        }
        public Builder ClearPushDataType() {
          PrepareBuilder();
          result.hasPushDataType = false;
          result.pushDataType_ = 0;
          return this;
        }
        
        public bool HasTimestamp {
          get { return result.hasTimestamp; }
        }
        public double Timestamp {
          get { return result.Timestamp; }
          set { SetTimestamp(value); }
        }
        public Builder SetTimestamp(double value) {
          PrepareBuilder();
          result.hasTimestamp = true;
          result.timestamp_ = value;
          return this;
        }
        public Builder ClearTimestamp() {
          PrepareBuilder();
          result.hasTimestamp = false;
          result.timestamp_ = 0D;
          return this;
        }
      }
      static Ticker() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class OrderBook : pb::GeneratedMessage<OrderBook, OrderBook.Builder> {
      private OrderBook() { }
      private static readonly OrderBook defaultInstance = new OrderBook().MakeReadOnly();
      private static readonly string[] _orderBookFieldNames = new string[] { "orederCount", "price", "volume" };
      private static readonly uint[] _orderBookFieldTags = new uint[] { 24, 9, 16 };
      public static OrderBook DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override OrderBook DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override OrderBook ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_OrderBook__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<OrderBook, OrderBook.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_OrderBook__FieldAccessorTable; }
      }
      
      public const int PriceFieldNumber = 1;
      private bool hasPrice;
      private double price_;
      public bool HasPrice {
        get { return hasPrice; }
      }
      public double Price {
        get { return price_; }
      }
      
      public const int VolumeFieldNumber = 2;
      private bool hasVolume;
      private long volume_;
      public bool HasVolume {
        get { return hasVolume; }
      }
      public long Volume {
        get { return volume_; }
      }
      
      public const int OrederCountFieldNumber = 3;
      private bool hasOrederCount;
      private int orederCount_;
      public bool HasOrederCount {
        get { return hasOrederCount; }
      }
      public int OrederCount {
        get { return orederCount_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasPrice) return false;
          if (!hasVolume) return false;
          if (!hasOrederCount) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _orderBookFieldNames;
        if (hasPrice) {
          output.WriteDouble(1, field_names[1], Price);
        }
        if (hasVolume) {
          output.WriteInt64(2, field_names[2], Volume);
        }
        if (hasOrederCount) {
          output.WriteInt32(3, field_names[0], OrederCount);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(1, Price);
        }
        if (hasVolume) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, Volume);
        }
        if (hasOrederCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, OrederCount);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static OrderBook ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static OrderBook ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static OrderBook ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static OrderBook ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static OrderBook ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static OrderBook ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static OrderBook ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static OrderBook ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static OrderBook ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static OrderBook ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private OrderBook MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(OrderBook prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<OrderBook, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(OrderBook cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private OrderBook result;
        
        private OrderBook PrepareBuilder() {
          if (resultIsReadOnly) {
            OrderBook original = result;
            result = new OrderBook();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override OrderBook MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.OrderBook.Descriptor; }
        }
        
        public override OrderBook DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.OrderBook.DefaultInstance; }
        }
        
        public override OrderBook BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is OrderBook) {
            return MergeFrom((OrderBook) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(OrderBook other) {
          if (other == global::Futu.OpenApi.Pb.QotCommon.OrderBook.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasPrice) {
            Price = other.Price;
          }
          if (other.HasVolume) {
            Volume = other.Volume;
          }
          if (other.HasOrederCount) {
            OrederCount = other.OrederCount;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_orderBookFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _orderBookFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 9: {
                result.hasPrice = input.ReadDouble(ref result.price_);
                break;
              }
              case 16: {
                result.hasVolume = input.ReadInt64(ref result.volume_);
                break;
              }
              case 24: {
                result.hasOrederCount = input.ReadInt32(ref result.orederCount_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasPrice {
          get { return result.hasPrice; }
        }
        public double Price {
          get { return result.Price; }
          set { SetPrice(value); }
        }
        public Builder SetPrice(double value) {
          PrepareBuilder();
          result.hasPrice = true;
          result.price_ = value;
          return this;
        }
        public Builder ClearPrice() {
          PrepareBuilder();
          result.hasPrice = false;
          result.price_ = 0D;
          return this;
        }
        
        public bool HasVolume {
          get { return result.hasVolume; }
        }
        public long Volume {
          get { return result.Volume; }
          set { SetVolume(value); }
        }
        public Builder SetVolume(long value) {
          PrepareBuilder();
          result.hasVolume = true;
          result.volume_ = value;
          return this;
        }
        public Builder ClearVolume() {
          PrepareBuilder();
          result.hasVolume = false;
          result.volume_ = 0L;
          return this;
        }
        
        public bool HasOrederCount {
          get { return result.hasOrederCount; }
        }
        public int OrederCount {
          get { return result.OrederCount; }
          set { SetOrederCount(value); }
        }
        public Builder SetOrederCount(int value) {
          PrepareBuilder();
          result.hasOrederCount = true;
          result.orederCount_ = value;
          return this;
        }
        public Builder ClearOrederCount() {
          PrepareBuilder();
          result.hasOrederCount = false;
          result.orederCount_ = 0;
          return this;
        }
      }
      static OrderBook() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class OrderDetail : pb::GeneratedMessage<OrderDetail, OrderDetail.Builder> {
      private OrderDetail() { }
      private static readonly OrderDetail defaultInstance = new OrderDetail().MakeReadOnly();
      private static readonly string[] _orderDetailFieldNames = new string[] { "orderCount", "orderVol" };
      private static readonly uint[] _orderDetailFieldTags = new uint[] { 8, 17 };
      public static OrderDetail DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override OrderDetail DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override OrderDetail ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_OrderDetail__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<OrderDetail, OrderDetail.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_OrderDetail__FieldAccessorTable; }
      }
      
      public const int OrderCountFieldNumber = 1;
      private bool hasOrderCount;
      private int orderCount_;
      public bool HasOrderCount {
        get { return hasOrderCount; }
      }
      public int OrderCount {
        get { return orderCount_; }
      }
      
      public const int OrderVolFieldNumber = 2;
      private pbc::PopsicleList<double> orderVol_ = new pbc::PopsicleList<double>();
      public scg::IList<double> OrderVolList {
        get { return pbc::Lists.AsReadOnly(orderVol_); }
      }
      public int OrderVolCount {
        get { return orderVol_.Count; }
      }
      public double GetOrderVol(int index) {
        return orderVol_[index];
      }
      
      public override bool IsInitialized {
        get {
          if (!hasOrderCount) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _orderDetailFieldNames;
        if (hasOrderCount) {
          output.WriteInt32(1, field_names[0], OrderCount);
        }
        if (orderVol_.Count > 0) {
          output.WriteDoubleArray(2, field_names[1], orderVol_);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasOrderCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, OrderCount);
        }
        {
          int dataSize = 0;
          dataSize = 8 * orderVol_.Count;
          size += dataSize;
          size += 1 * orderVol_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static OrderDetail ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static OrderDetail ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static OrderDetail ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static OrderDetail ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static OrderDetail ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static OrderDetail ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static OrderDetail ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static OrderDetail ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static OrderDetail ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static OrderDetail ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private OrderDetail MakeReadOnly() {
        orderVol_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(OrderDetail prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<OrderDetail, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(OrderDetail cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private OrderDetail result;
        
        private OrderDetail PrepareBuilder() {
          if (resultIsReadOnly) {
            OrderDetail original = result;
            result = new OrderDetail();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override OrderDetail MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.OrderDetail.Descriptor; }
        }
        
        public override OrderDetail DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.OrderDetail.DefaultInstance; }
        }
        
        public override OrderDetail BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is OrderDetail) {
            return MergeFrom((OrderDetail) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(OrderDetail other) {
          if (other == global::Futu.OpenApi.Pb.QotCommon.OrderDetail.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasOrderCount) {
            OrderCount = other.OrderCount;
          }
          if (other.orderVol_.Count != 0) {
            result.orderVol_.Add(other.orderVol_);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_orderDetailFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _orderDetailFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasOrderCount = input.ReadInt32(ref result.orderCount_);
                break;
              }
              case 18:
              case 17: {
                input.ReadDoubleArray(tag, field_name, result.orderVol_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasOrderCount {
          get { return result.hasOrderCount; }
        }
        public int OrderCount {
          get { return result.OrderCount; }
          set { SetOrderCount(value); }
        }
        public Builder SetOrderCount(int value) {
          PrepareBuilder();
          result.hasOrderCount = true;
          result.orderCount_ = value;
          return this;
        }
        public Builder ClearOrderCount() {
          PrepareBuilder();
          result.hasOrderCount = false;
          result.orderCount_ = 0;
          return this;
        }
        
        public pbc::IPopsicleList<double> OrderVolList {
          get { return PrepareBuilder().orderVol_; }
        }
        public int OrderVolCount {
          get { return result.OrderVolCount; }
        }
        public double GetOrderVol(int index) {
          return result.GetOrderVol(index);
        }
        public Builder SetOrderVol(int index, double value) {
          PrepareBuilder();
          result.orderVol_[index] = value;
          return this;
        }
        public Builder AddOrderVol(double value) {
          PrepareBuilder();
          result.orderVol_.Add(value);
          return this;
        }
        public Builder AddRangeOrderVol(scg::IEnumerable<double> values) {
          PrepareBuilder();
          result.orderVol_.Add(values);
          return this;
        }
        public Builder ClearOrderVol() {
          PrepareBuilder();
          result.orderVol_.Clear();
          return this;
        }
      }
      static OrderDetail() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class ShareHoldingChange : pb::GeneratedMessage<ShareHoldingChange, ShareHoldingChange.Builder> {
      private ShareHoldingChange() { }
      private static readonly ShareHoldingChange defaultInstance = new ShareHoldingChange().MakeReadOnly();
      private static readonly string[] _shareHoldingChangeFieldNames = new string[] { "changeQty", "changeRatio", "holderName", "holdingQty", "holdingRatio", "time", "timestamp" };
      private static readonly uint[] _shareHoldingChangeFieldTags = new uint[] { 33, 41, 10, 17, 25, 50, 57 };
      public static ShareHoldingChange DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override ShareHoldingChange DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override ShareHoldingChange ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_ShareHoldingChange__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<ShareHoldingChange, ShareHoldingChange.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_ShareHoldingChange__FieldAccessorTable; }
      }
      
      public const int HolderNameFieldNumber = 1;
      private bool hasHolderName;
      private string holderName_ = "";
      public bool HasHolderName {
        get { return hasHolderName; }
      }
      public string HolderName {
        get { return holderName_; }
      }
      
      public const int HoldingQtyFieldNumber = 2;
      private bool hasHoldingQty;
      private double holdingQty_;
      public bool HasHoldingQty {
        get { return hasHoldingQty; }
      }
      public double HoldingQty {
        get { return holdingQty_; }
      }
      
      public const int HoldingRatioFieldNumber = 3;
      private bool hasHoldingRatio;
      private double holdingRatio_;
      public bool HasHoldingRatio {
        get { return hasHoldingRatio; }
      }
      public double HoldingRatio {
        get { return holdingRatio_; }
      }
      
      public const int ChangeQtyFieldNumber = 4;
      private bool hasChangeQty;
      private double changeQty_;
      public bool HasChangeQty {
        get { return hasChangeQty; }
      }
      public double ChangeQty {
        get { return changeQty_; }
      }
      
      public const int ChangeRatioFieldNumber = 5;
      private bool hasChangeRatio;
      private double changeRatio_;
      public bool HasChangeRatio {
        get { return hasChangeRatio; }
      }
      public double ChangeRatio {
        get { return changeRatio_; }
      }
      
      public const int TimeFieldNumber = 6;
      private bool hasTime;
      private string time_ = "";
      public bool HasTime {
        get { return hasTime; }
      }
      public string Time {
        get { return time_; }
      }
      
      public const int TimestampFieldNumber = 7;
      private bool hasTimestamp;
      private double timestamp_;
      public bool HasTimestamp {
        get { return hasTimestamp; }
      }
      public double Timestamp {
        get { return timestamp_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasHolderName) return false;
          if (!hasHoldingQty) return false;
          if (!hasHoldingRatio) return false;
          if (!hasChangeQty) return false;
          if (!hasChangeRatio) return false;
          if (!hasTime) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _shareHoldingChangeFieldNames;
        if (hasHolderName) {
          output.WriteString(1, field_names[2], HolderName);
        }
        if (hasHoldingQty) {
          output.WriteDouble(2, field_names[3], HoldingQty);
        }
        if (hasHoldingRatio) {
          output.WriteDouble(3, field_names[4], HoldingRatio);
        }
        if (hasChangeQty) {
          output.WriteDouble(4, field_names[0], ChangeQty);
        }
        if (hasChangeRatio) {
          output.WriteDouble(5, field_names[1], ChangeRatio);
        }
        if (hasTime) {
          output.WriteString(6, field_names[5], Time);
        }
        if (hasTimestamp) {
          output.WriteDouble(7, field_names[6], Timestamp);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHolderName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, HolderName);
        }
        if (hasHoldingQty) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, HoldingQty);
        }
        if (hasHoldingRatio) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, HoldingRatio);
        }
        if (hasChangeQty) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, ChangeQty);
        }
        if (hasChangeRatio) {
          size += pb::CodedOutputStream.ComputeDoubleSize(5, ChangeRatio);
        }
        if (hasTime) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Time);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, Timestamp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static ShareHoldingChange ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static ShareHoldingChange ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static ShareHoldingChange ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static ShareHoldingChange ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static ShareHoldingChange ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static ShareHoldingChange ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static ShareHoldingChange ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static ShareHoldingChange ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static ShareHoldingChange ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static ShareHoldingChange ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private ShareHoldingChange MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(ShareHoldingChange prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<ShareHoldingChange, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(ShareHoldingChange cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private ShareHoldingChange result;
        
        private ShareHoldingChange PrepareBuilder() {
          if (resultIsReadOnly) {
            ShareHoldingChange original = result;
            result = new ShareHoldingChange();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override ShareHoldingChange MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.ShareHoldingChange.Descriptor; }
        }
        
        public override ShareHoldingChange DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.ShareHoldingChange.DefaultInstance; }
        }
        
        public override ShareHoldingChange BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is ShareHoldingChange) {
            return MergeFrom((ShareHoldingChange) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(ShareHoldingChange other) {
          if (other == global::Futu.OpenApi.Pb.QotCommon.ShareHoldingChange.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasHolderName) {
            HolderName = other.HolderName;
          }
          if (other.HasHoldingQty) {
            HoldingQty = other.HoldingQty;
          }
          if (other.HasHoldingRatio) {
            HoldingRatio = other.HoldingRatio;
          }
          if (other.HasChangeQty) {
            ChangeQty = other.ChangeQty;
          }
          if (other.HasChangeRatio) {
            ChangeRatio = other.ChangeRatio;
          }
          if (other.HasTime) {
            Time = other.Time;
          }
          if (other.HasTimestamp) {
            Timestamp = other.Timestamp;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_shareHoldingChangeFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _shareHoldingChangeFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                result.hasHolderName = input.ReadString(ref result.holderName_);
                break;
              }
              case 17: {
                result.hasHoldingQty = input.ReadDouble(ref result.holdingQty_);
                break;
              }
              case 25: {
                result.hasHoldingRatio = input.ReadDouble(ref result.holdingRatio_);
                break;
              }
              case 33: {
                result.hasChangeQty = input.ReadDouble(ref result.changeQty_);
                break;
              }
              case 41: {
                result.hasChangeRatio = input.ReadDouble(ref result.changeRatio_);
                break;
              }
              case 50: {
                result.hasTime = input.ReadString(ref result.time_);
                break;
              }
              case 57: {
                result.hasTimestamp = input.ReadDouble(ref result.timestamp_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasHolderName {
          get { return result.hasHolderName; }
        }
        public string HolderName {
          get { return result.HolderName; }
          set { SetHolderName(value); }
        }
        public Builder SetHolderName(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasHolderName = true;
          result.holderName_ = value;
          return this;
        }
        public Builder ClearHolderName() {
          PrepareBuilder();
          result.hasHolderName = false;
          result.holderName_ = "";
          return this;
        }
        
        public bool HasHoldingQty {
          get { return result.hasHoldingQty; }
        }
        public double HoldingQty {
          get { return result.HoldingQty; }
          set { SetHoldingQty(value); }
        }
        public Builder SetHoldingQty(double value) {
          PrepareBuilder();
          result.hasHoldingQty = true;
          result.holdingQty_ = value;
          return this;
        }
        public Builder ClearHoldingQty() {
          PrepareBuilder();
          result.hasHoldingQty = false;
          result.holdingQty_ = 0D;
          return this;
        }
        
        public bool HasHoldingRatio {
          get { return result.hasHoldingRatio; }
        }
        public double HoldingRatio {
          get { return result.HoldingRatio; }
          set { SetHoldingRatio(value); }
        }
        public Builder SetHoldingRatio(double value) {
          PrepareBuilder();
          result.hasHoldingRatio = true;
          result.holdingRatio_ = value;
          return this;
        }
        public Builder ClearHoldingRatio() {
          PrepareBuilder();
          result.hasHoldingRatio = false;
          result.holdingRatio_ = 0D;
          return this;
        }
        
        public bool HasChangeQty {
          get { return result.hasChangeQty; }
        }
        public double ChangeQty {
          get { return result.ChangeQty; }
          set { SetChangeQty(value); }
        }
        public Builder SetChangeQty(double value) {
          PrepareBuilder();
          result.hasChangeQty = true;
          result.changeQty_ = value;
          return this;
        }
        public Builder ClearChangeQty() {
          PrepareBuilder();
          result.hasChangeQty = false;
          result.changeQty_ = 0D;
          return this;
        }
        
        public bool HasChangeRatio {
          get { return result.hasChangeRatio; }
        }
        public double ChangeRatio {
          get { return result.ChangeRatio; }
          set { SetChangeRatio(value); }
        }
        public Builder SetChangeRatio(double value) {
          PrepareBuilder();
          result.hasChangeRatio = true;
          result.changeRatio_ = value;
          return this;
        }
        public Builder ClearChangeRatio() {
          PrepareBuilder();
          result.hasChangeRatio = false;
          result.changeRatio_ = 0D;
          return this;
        }
        
        public bool HasTime {
          get { return result.hasTime; }
        }
        public string Time {
          get { return result.Time; }
          set { SetTime(value); }
        }
        public Builder SetTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasTime = true;
          result.time_ = value;
          return this;
        }
        public Builder ClearTime() {
          PrepareBuilder();
          result.hasTime = false;
          result.time_ = "";
          return this;
        }
        
        public bool HasTimestamp {
          get { return result.hasTimestamp; }
        }
        public double Timestamp {
          get { return result.Timestamp; }
          set { SetTimestamp(value); }
        }
        public Builder SetTimestamp(double value) {
          PrepareBuilder();
          result.hasTimestamp = true;
          result.timestamp_ = value;
          return this;
        }
        public Builder ClearTimestamp() {
          PrepareBuilder();
          result.hasTimestamp = false;
          result.timestamp_ = 0D;
          return this;
        }
      }
      static ShareHoldingChange() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class SubInfo : pb::GeneratedMessage<SubInfo, SubInfo.Builder> {
      private SubInfo() { }
      private static readonly SubInfo defaultInstance = new SubInfo().MakeReadOnly();
      private static readonly string[] _subInfoFieldNames = new string[] { "securityList", "subType" };
      private static readonly uint[] _subInfoFieldTags = new uint[] { 18, 8 };
      public static SubInfo DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override SubInfo DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override SubInfo ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_SubInfo__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<SubInfo, SubInfo.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_SubInfo__FieldAccessorTable; }
      }
      
      public const int SubTypeFieldNumber = 1;
      private bool hasSubType;
      private int subType_;
      public bool HasSubType {
        get { return hasSubType; }
      }
      public int SubType {
        get { return subType_; }
      }
      
      public const int SecurityListFieldNumber = 2;
      private pbc::PopsicleList<global::Futu.OpenApi.Pb.QotCommon.Security> securityList_ = new pbc::PopsicleList<global::Futu.OpenApi.Pb.QotCommon.Security>();
      public scg::IList<global::Futu.OpenApi.Pb.QotCommon.Security> SecurityListList {
        get { return securityList_; }
      }
      public int SecurityListCount {
        get { return securityList_.Count; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.Security GetSecurityList(int index) {
        return securityList_[index];
      }
      
      public override bool IsInitialized {
        get {
          if (!hasSubType) return false;
          foreach (global::Futu.OpenApi.Pb.QotCommon.Security element in SecurityListList) {
            if (!element.IsInitialized) return false;
          }
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _subInfoFieldNames;
        if (hasSubType) {
          output.WriteInt32(1, field_names[1], SubType);
        }
        if (securityList_.Count > 0) {
          output.WriteMessageArray(2, field_names[0], securityList_);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSubType) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, SubType);
        }
        foreach (global::Futu.OpenApi.Pb.QotCommon.Security element in SecurityListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static SubInfo ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static SubInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static SubInfo ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static SubInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static SubInfo ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static SubInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static SubInfo ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static SubInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static SubInfo ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static SubInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private SubInfo MakeReadOnly() {
        securityList_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(SubInfo prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<SubInfo, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(SubInfo cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private SubInfo result;
        
        private SubInfo PrepareBuilder() {
          if (resultIsReadOnly) {
            SubInfo original = result;
            result = new SubInfo();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override SubInfo MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.SubInfo.Descriptor; }
        }
        
        public override SubInfo DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.SubInfo.DefaultInstance; }
        }
        
        public override SubInfo BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is SubInfo) {
            return MergeFrom((SubInfo) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(SubInfo other) {
          if (other == global::Futu.OpenApi.Pb.QotCommon.SubInfo.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasSubType) {
            SubType = other.SubType;
          }
          if (other.securityList_.Count != 0) {
            result.securityList_.Add(other.securityList_);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_subInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _subInfoFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasSubType = input.ReadInt32(ref result.subType_);
                break;
              }
              case 18: {
                input.ReadMessageArray(tag, field_name, result.securityList_, global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance, extensionRegistry);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasSubType {
          get { return result.hasSubType; }
        }
        public int SubType {
          get { return result.SubType; }
          set { SetSubType(value); }
        }
        public Builder SetSubType(int value) {
          PrepareBuilder();
          result.hasSubType = true;
          result.subType_ = value;
          return this;
        }
        public Builder ClearSubType() {
          PrepareBuilder();
          result.hasSubType = false;
          result.subType_ = 0;
          return this;
        }
        
        public pbc::IPopsicleList<global::Futu.OpenApi.Pb.QotCommon.Security> SecurityListList {
          get { return PrepareBuilder().securityList_; }
        }
        public int SecurityListCount {
          get { return result.SecurityListCount; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.Security GetSecurityList(int index) {
          return result.GetSecurityList(index);
        }
        public Builder SetSecurityList(int index, global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.securityList_[index] = value;
          return this;
        }
        public Builder SetSecurityList(int index, global::Futu.OpenApi.Pb.QotCommon.Security.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.securityList_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddSecurityList(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.securityList_.Add(value);
          return this;
        }
        public Builder AddSecurityList(global::Futu.OpenApi.Pb.QotCommon.Security.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.securityList_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeSecurityList(scg::IEnumerable<global::Futu.OpenApi.Pb.QotCommon.Security> values) {
          PrepareBuilder();
          result.securityList_.Add(values);
          return this;
        }
        public Builder ClearSecurityList() {
          PrepareBuilder();
          result.securityList_.Clear();
          return this;
        }
      }
      static SubInfo() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class ConnSubInfo : pb::GeneratedMessage<ConnSubInfo, ConnSubInfo.Builder> {
      private ConnSubInfo() { }
      private static readonly ConnSubInfo defaultInstance = new ConnSubInfo().MakeReadOnly();
      private static readonly string[] _connSubInfoFieldNames = new string[] { "isOwnConnData", "subInfoList", "usedQuota" };
      private static readonly uint[] _connSubInfoFieldTags = new uint[] { 24, 10, 16 };
      public static ConnSubInfo DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override ConnSubInfo DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override ConnSubInfo ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_ConnSubInfo__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<ConnSubInfo, ConnSubInfo.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_ConnSubInfo__FieldAccessorTable; }
      }
      
      public const int SubInfoListFieldNumber = 1;
      private pbc::PopsicleList<global::Futu.OpenApi.Pb.QotCommon.SubInfo> subInfoList_ = new pbc::PopsicleList<global::Futu.OpenApi.Pb.QotCommon.SubInfo>();
      public scg::IList<global::Futu.OpenApi.Pb.QotCommon.SubInfo> SubInfoListList {
        get { return subInfoList_; }
      }
      public int SubInfoListCount {
        get { return subInfoList_.Count; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.SubInfo GetSubInfoList(int index) {
        return subInfoList_[index];
      }
      
      public const int UsedQuotaFieldNumber = 2;
      private bool hasUsedQuota;
      private int usedQuota_;
      public bool HasUsedQuota {
        get { return hasUsedQuota; }
      }
      public int UsedQuota {
        get { return usedQuota_; }
      }
      
      public const int IsOwnConnDataFieldNumber = 3;
      private bool hasIsOwnConnData;
      private bool isOwnConnData_;
      public bool HasIsOwnConnData {
        get { return hasIsOwnConnData; }
      }
      public bool IsOwnConnData {
        get { return isOwnConnData_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasUsedQuota) return false;
          if (!hasIsOwnConnData) return false;
          foreach (global::Futu.OpenApi.Pb.QotCommon.SubInfo element in SubInfoListList) {
            if (!element.IsInitialized) return false;
          }
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _connSubInfoFieldNames;
        if (subInfoList_.Count > 0) {
          output.WriteMessageArray(1, field_names[1], subInfoList_);
        }
        if (hasUsedQuota) {
          output.WriteInt32(2, field_names[2], UsedQuota);
        }
        if (hasIsOwnConnData) {
          output.WriteBool(3, field_names[0], IsOwnConnData);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::Futu.OpenApi.Pb.QotCommon.SubInfo element in SubInfoListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasUsedQuota) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, UsedQuota);
        }
        if (hasIsOwnConnData) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, IsOwnConnData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static ConnSubInfo ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static ConnSubInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static ConnSubInfo ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static ConnSubInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static ConnSubInfo ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static ConnSubInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static ConnSubInfo ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static ConnSubInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static ConnSubInfo ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static ConnSubInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private ConnSubInfo MakeReadOnly() {
        subInfoList_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(ConnSubInfo prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<ConnSubInfo, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(ConnSubInfo cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private ConnSubInfo result;
        
        private ConnSubInfo PrepareBuilder() {
          if (resultIsReadOnly) {
            ConnSubInfo original = result;
            result = new ConnSubInfo();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override ConnSubInfo MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.ConnSubInfo.Descriptor; }
        }
        
        public override ConnSubInfo DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.ConnSubInfo.DefaultInstance; }
        }
        
        public override ConnSubInfo BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is ConnSubInfo) {
            return MergeFrom((ConnSubInfo) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(ConnSubInfo other) {
          if (other == global::Futu.OpenApi.Pb.QotCommon.ConnSubInfo.DefaultInstance) return this;
          PrepareBuilder();
          if (other.subInfoList_.Count != 0) {
            result.subInfoList_.Add(other.subInfoList_);
          }
          if (other.HasUsedQuota) {
            UsedQuota = other.UsedQuota;
          }
          if (other.HasIsOwnConnData) {
            IsOwnConnData = other.IsOwnConnData;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_connSubInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _connSubInfoFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                input.ReadMessageArray(tag, field_name, result.subInfoList_, global::Futu.OpenApi.Pb.QotCommon.SubInfo.DefaultInstance, extensionRegistry);
                break;
              }
              case 16: {
                result.hasUsedQuota = input.ReadInt32(ref result.usedQuota_);
                break;
              }
              case 24: {
                result.hasIsOwnConnData = input.ReadBool(ref result.isOwnConnData_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public pbc::IPopsicleList<global::Futu.OpenApi.Pb.QotCommon.SubInfo> SubInfoListList {
          get { return PrepareBuilder().subInfoList_; }
        }
        public int SubInfoListCount {
          get { return result.SubInfoListCount; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.SubInfo GetSubInfoList(int index) {
          return result.GetSubInfoList(index);
        }
        public Builder SetSubInfoList(int index, global::Futu.OpenApi.Pb.QotCommon.SubInfo value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.subInfoList_[index] = value;
          return this;
        }
        public Builder SetSubInfoList(int index, global::Futu.OpenApi.Pb.QotCommon.SubInfo.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.subInfoList_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddSubInfoList(global::Futu.OpenApi.Pb.QotCommon.SubInfo value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.subInfoList_.Add(value);
          return this;
        }
        public Builder AddSubInfoList(global::Futu.OpenApi.Pb.QotCommon.SubInfo.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.subInfoList_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeSubInfoList(scg::IEnumerable<global::Futu.OpenApi.Pb.QotCommon.SubInfo> values) {
          PrepareBuilder();
          result.subInfoList_.Add(values);
          return this;
        }
        public Builder ClearSubInfoList() {
          PrepareBuilder();
          result.subInfoList_.Clear();
          return this;
        }
        
        public bool HasUsedQuota {
          get { return result.hasUsedQuota; }
        }
        public int UsedQuota {
          get { return result.UsedQuota; }
          set { SetUsedQuota(value); }
        }
        public Builder SetUsedQuota(int value) {
          PrepareBuilder();
          result.hasUsedQuota = true;
          result.usedQuota_ = value;
          return this;
        }
        public Builder ClearUsedQuota() {
          PrepareBuilder();
          result.hasUsedQuota = false;
          result.usedQuota_ = 0;
          return this;
        }
        
        public bool HasIsOwnConnData {
          get { return result.hasIsOwnConnData; }
        }
        public bool IsOwnConnData {
          get { return result.IsOwnConnData; }
          set { SetIsOwnConnData(value); }
        }
        public Builder SetIsOwnConnData(bool value) {
          PrepareBuilder();
          result.hasIsOwnConnData = true;
          result.isOwnConnData_ = value;
          return this;
        }
        public Builder ClearIsOwnConnData() {
          PrepareBuilder();
          result.hasIsOwnConnData = false;
          result.isOwnConnData_ = false;
          return this;
        }
      }
      static ConnSubInfo() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class PlateInfo : pb::GeneratedMessage<PlateInfo, PlateInfo.Builder> {
      private PlateInfo() { }
      private static readonly PlateInfo defaultInstance = new PlateInfo().MakeReadOnly();
      private static readonly string[] _plateInfoFieldNames = new string[] { "name", "plate", "plateType" };
      private static readonly uint[] _plateInfoFieldTags = new uint[] { 18, 10, 24 };
      public static PlateInfo DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override PlateInfo DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override PlateInfo ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_PlateInfo__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<PlateInfo, PlateInfo.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_PlateInfo__FieldAccessorTable; }
      }
      
      public const int PlateFieldNumber = 1;
      private bool hasPlate;
      private global::Futu.OpenApi.Pb.QotCommon.Security plate_;
      public bool HasPlate {
        get { return hasPlate; }
      }
      public global::Futu.OpenApi.Pb.QotCommon.Security Plate {
        get { return plate_ ?? global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance; }
      }
      
      public const int NameFieldNumber = 2;
      private bool hasName;
      private string name_ = "";
      public bool HasName {
        get { return hasName; }
      }
      public string Name {
        get { return name_; }
      }
      
      public const int PlateTypeFieldNumber = 3;
      private bool hasPlateType;
      private int plateType_;
      public bool HasPlateType {
        get { return hasPlateType; }
      }
      public int PlateType {
        get { return plateType_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasPlate) return false;
          if (!hasName) return false;
          if (!Plate.IsInitialized) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _plateInfoFieldNames;
        if (hasPlate) {
          output.WriteMessage(1, field_names[1], Plate);
        }
        if (hasName) {
          output.WriteString(2, field_names[0], Name);
        }
        if (hasPlateType) {
          output.WriteInt32(3, field_names[2], PlateType);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlate) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Plate);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasPlateType) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, PlateType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static PlateInfo ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static PlateInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static PlateInfo ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static PlateInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static PlateInfo ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static PlateInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static PlateInfo ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static PlateInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static PlateInfo ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static PlateInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private PlateInfo MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(PlateInfo prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<PlateInfo, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(PlateInfo cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private PlateInfo result;
        
        private PlateInfo PrepareBuilder() {
          if (resultIsReadOnly) {
            PlateInfo original = result;
            result = new PlateInfo();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override PlateInfo MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.PlateInfo.Descriptor; }
        }
        
        public override PlateInfo DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.PlateInfo.DefaultInstance; }
        }
        
        public override PlateInfo BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is PlateInfo) {
            return MergeFrom((PlateInfo) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(PlateInfo other) {
          if (other == global::Futu.OpenApi.Pb.QotCommon.PlateInfo.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasPlate) {
            MergePlate(other.Plate);
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasPlateType) {
            PlateType = other.PlateType;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_plateInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _plateInfoFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                global::Futu.OpenApi.Pb.QotCommon.Security.Builder subBuilder = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder();
                if (result.hasPlate) {
                  subBuilder.MergeFrom(Plate);
                }
                input.ReadMessage(subBuilder, extensionRegistry);
                Plate = subBuilder.BuildPartial();
                break;
              }
              case 18: {
                result.hasName = input.ReadString(ref result.name_);
                break;
              }
              case 24: {
                result.hasPlateType = input.ReadInt32(ref result.plateType_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasPlate {
         get { return result.hasPlate; }
        }
        public global::Futu.OpenApi.Pb.QotCommon.Security Plate {
          get { return result.Plate; }
          set { SetPlate(value); }
        }
        public Builder SetPlate(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasPlate = true;
          result.plate_ = value;
          return this;
        }
        public Builder SetPlate(global::Futu.OpenApi.Pb.QotCommon.Security.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.hasPlate = true;
          result.plate_ = builderForValue.Build();
          return this;
        }
        public Builder MergePlate(global::Futu.OpenApi.Pb.QotCommon.Security value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          if (result.hasPlate &&
              result.plate_ != global::Futu.OpenApi.Pb.QotCommon.Security.DefaultInstance) {
              result.plate_ = global::Futu.OpenApi.Pb.QotCommon.Security.CreateBuilder(result.plate_).MergeFrom(value).BuildPartial();
          } else {
            result.plate_ = value;
          }
          result.hasPlate = true;
          return this;
        }
        public Builder ClearPlate() {
          PrepareBuilder();
          result.hasPlate = false;
          result.plate_ = null;
          return this;
        }
        
        public bool HasName {
          get { return result.hasName; }
        }
        public string Name {
          get { return result.Name; }
          set { SetName(value); }
        }
        public Builder SetName(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasName = true;
          result.name_ = value;
          return this;
        }
        public Builder ClearName() {
          PrepareBuilder();
          result.hasName = false;
          result.name_ = "";
          return this;
        }
        
        public bool HasPlateType {
          get { return result.hasPlateType; }
        }
        public int PlateType {
          get { return result.PlateType; }
          set { SetPlateType(value); }
        }
        public Builder SetPlateType(int value) {
          PrepareBuilder();
          result.hasPlateType = true;
          result.plateType_ = value;
          return this;
        }
        public Builder ClearPlateType() {
          PrepareBuilder();
          result.hasPlateType = false;
          result.plateType_ = 0;
          return this;
        }
      }
      static PlateInfo() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Rehab : pb::GeneratedMessage<Rehab, Rehab.Builder> {
      private Rehab() { }
      private static readonly Rehab defaultInstance = new Rehab().MakeReadOnly();
      private static readonly string[] _rehabFieldNames = new string[] { "addBase", "addErt", "addPrice", "allotBase", "allotErt", "allotPrice", "bonusBase", "bonusErt", "bwdFactorA", "bwdFactorB", "companyActFlag", "dividend", "fwdFactorA", "fwdFactorB", "joinBase", "joinErt", "spDividend", "splitBase", "splitErt", "time", "timestamp", "transferBase", "transferErt" };
      private static readonly uint[] _rehabFieldTags = new uint[] { 144, 152, 161, 120, 128, 137, 88, 96, 41, 49, 16, 169, 25, 33, 72, 80, 177, 56, 64, 10, 185, 104, 112 };
      public static Rehab DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Rehab DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Rehab ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_Rehab__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Rehab, Rehab.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.QotCommon.internal__static_Qot_Common_Rehab__FieldAccessorTable; }
      }
      
      public const int TimeFieldNumber = 1;
      private bool hasTime;
      private string time_ = "";
      public bool HasTime {
        get { return hasTime; }
      }
      public string Time {
        get { return time_; }
      }
      
      public const int CompanyActFlagFieldNumber = 2;
      private bool hasCompanyActFlag;
      private long companyActFlag_;
      public bool HasCompanyActFlag {
        get { return hasCompanyActFlag; }
      }
      public long CompanyActFlag {
        get { return companyActFlag_; }
      }
      
      public const int FwdFactorAFieldNumber = 3;
      private bool hasFwdFactorA;
      private double fwdFactorA_;
      public bool HasFwdFactorA {
        get { return hasFwdFactorA; }
      }
      public double FwdFactorA {
        get { return fwdFactorA_; }
      }
      
      public const int FwdFactorBFieldNumber = 4;
      private bool hasFwdFactorB;
      private double fwdFactorB_;
      public bool HasFwdFactorB {
        get { return hasFwdFactorB; }
      }
      public double FwdFactorB {
        get { return fwdFactorB_; }
      }
      
      public const int BwdFactorAFieldNumber = 5;
      private bool hasBwdFactorA;
      private double bwdFactorA_;
      public bool HasBwdFactorA {
        get { return hasBwdFactorA; }
      }
      public double BwdFactorA {
        get { return bwdFactorA_; }
      }
      
      public const int BwdFactorBFieldNumber = 6;
      private bool hasBwdFactorB;
      private double bwdFactorB_;
      public bool HasBwdFactorB {
        get { return hasBwdFactorB; }
      }
      public double BwdFactorB {
        get { return bwdFactorB_; }
      }
      
      public const int SplitBaseFieldNumber = 7;
      private bool hasSplitBase;
      private int splitBase_;
      public bool HasSplitBase {
        get { return hasSplitBase; }
      }
      public int SplitBase {
        get { return splitBase_; }
      }
      
      public const int SplitErtFieldNumber = 8;
      private bool hasSplitErt;
      private int splitErt_;
      public bool HasSplitErt {
        get { return hasSplitErt; }
      }
      public int SplitErt {
        get { return splitErt_; }
      }
      
      public const int JoinBaseFieldNumber = 9;
      private bool hasJoinBase;
      private int joinBase_;
      public bool HasJoinBase {
        get { return hasJoinBase; }
      }
      public int JoinBase {
        get { return joinBase_; }
      }
      
      public const int JoinErtFieldNumber = 10;
      private bool hasJoinErt;
      private int joinErt_;
      public bool HasJoinErt {
        get { return hasJoinErt; }
      }
      public int JoinErt {
        get { return joinErt_; }
      }
      
      public const int BonusBaseFieldNumber = 11;
      private bool hasBonusBase;
      private int bonusBase_;
      public bool HasBonusBase {
        get { return hasBonusBase; }
      }
      public int BonusBase {
        get { return bonusBase_; }
      }
      
      public const int BonusErtFieldNumber = 12;
      private bool hasBonusErt;
      private int bonusErt_;
      public bool HasBonusErt {
        get { return hasBonusErt; }
      }
      public int BonusErt {
        get { return bonusErt_; }
      }
      
      public const int TransferBaseFieldNumber = 13;
      private bool hasTransferBase;
      private int transferBase_;
      public bool HasTransferBase {
        get { return hasTransferBase; }
      }
      public int TransferBase {
        get { return transferBase_; }
      }
      
      public const int TransferErtFieldNumber = 14;
      private bool hasTransferErt;
      private int transferErt_;
      public bool HasTransferErt {
        get { return hasTransferErt; }
      }
      public int TransferErt {
        get { return transferErt_; }
      }
      
      public const int AllotBaseFieldNumber = 15;
      private bool hasAllotBase;
      private int allotBase_;
      public bool HasAllotBase {
        get { return hasAllotBase; }
      }
      public int AllotBase {
        get { return allotBase_; }
      }
      
      public const int AllotErtFieldNumber = 16;
      private bool hasAllotErt;
      private int allotErt_;
      public bool HasAllotErt {
        get { return hasAllotErt; }
      }
      public int AllotErt {
        get { return allotErt_; }
      }
      
      public const int AllotPriceFieldNumber = 17;
      private bool hasAllotPrice;
      private double allotPrice_;
      public bool HasAllotPrice {
        get { return hasAllotPrice; }
      }
      public double AllotPrice {
        get { return allotPrice_; }
      }
      
      public const int AddBaseFieldNumber = 18;
      private bool hasAddBase;
      private int addBase_;
      public bool HasAddBase {
        get { return hasAddBase; }
      }
      public int AddBase {
        get { return addBase_; }
      }
      
      public const int AddErtFieldNumber = 19;
      private bool hasAddErt;
      private int addErt_;
      public bool HasAddErt {
        get { return hasAddErt; }
      }
      public int AddErt {
        get { return addErt_; }
      }
      
      public const int AddPriceFieldNumber = 20;
      private bool hasAddPrice;
      private double addPrice_;
      public bool HasAddPrice {
        get { return hasAddPrice; }
      }
      public double AddPrice {
        get { return addPrice_; }
      }
      
      public const int DividendFieldNumber = 21;
      private bool hasDividend;
      private double dividend_;
      public bool HasDividend {
        get { return hasDividend; }
      }
      public double Dividend {
        get { return dividend_; }
      }
      
      public const int SpDividendFieldNumber = 22;
      private bool hasSpDividend;
      private double spDividend_;
      public bool HasSpDividend {
        get { return hasSpDividend; }
      }
      public double SpDividend {
        get { return spDividend_; }
      }
      
      public const int TimestampFieldNumber = 23;
      private bool hasTimestamp;
      private double timestamp_;
      public bool HasTimestamp {
        get { return hasTimestamp; }
      }
      public double Timestamp {
        get { return timestamp_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasTime) return false;
          if (!hasCompanyActFlag) return false;
          if (!hasFwdFactorA) return false;
          if (!hasFwdFactorB) return false;
          if (!hasBwdFactorA) return false;
          if (!hasBwdFactorB) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _rehabFieldNames;
        if (hasTime) {
          output.WriteString(1, field_names[19], Time);
        }
        if (hasCompanyActFlag) {
          output.WriteInt64(2, field_names[10], CompanyActFlag);
        }
        if (hasFwdFactorA) {
          output.WriteDouble(3, field_names[12], FwdFactorA);
        }
        if (hasFwdFactorB) {
          output.WriteDouble(4, field_names[13], FwdFactorB);
        }
        if (hasBwdFactorA) {
          output.WriteDouble(5, field_names[8], BwdFactorA);
        }
        if (hasBwdFactorB) {
          output.WriteDouble(6, field_names[9], BwdFactorB);
        }
        if (hasSplitBase) {
          output.WriteInt32(7, field_names[17], SplitBase);
        }
        if (hasSplitErt) {
          output.WriteInt32(8, field_names[18], SplitErt);
        }
        if (hasJoinBase) {
          output.WriteInt32(9, field_names[14], JoinBase);
        }
        if (hasJoinErt) {
          output.WriteInt32(10, field_names[15], JoinErt);
        }
        if (hasBonusBase) {
          output.WriteInt32(11, field_names[6], BonusBase);
        }
        if (hasBonusErt) {
          output.WriteInt32(12, field_names[7], BonusErt);
        }
        if (hasTransferBase) {
          output.WriteInt32(13, field_names[21], TransferBase);
        }
        if (hasTransferErt) {
          output.WriteInt32(14, field_names[22], TransferErt);
        }
        if (hasAllotBase) {
          output.WriteInt32(15, field_names[3], AllotBase);
        }
        if (hasAllotErt) {
          output.WriteInt32(16, field_names[4], AllotErt);
        }
        if (hasAllotPrice) {
          output.WriteDouble(17, field_names[5], AllotPrice);
        }
        if (hasAddBase) {
          output.WriteInt32(18, field_names[0], AddBase);
        }
        if (hasAddErt) {
          output.WriteInt32(19, field_names[1], AddErt);
        }
        if (hasAddPrice) {
          output.WriteDouble(20, field_names[2], AddPrice);
        }
        if (hasDividend) {
          output.WriteDouble(21, field_names[11], Dividend);
        }
        if (hasSpDividend) {
          output.WriteDouble(22, field_names[16], SpDividend);
        }
        if (hasTimestamp) {
          output.WriteDouble(23, field_names[20], Timestamp);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTime) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Time);
        }
        if (hasCompanyActFlag) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, CompanyActFlag);
        }
        if (hasFwdFactorA) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, FwdFactorA);
        }
        if (hasFwdFactorB) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, FwdFactorB);
        }
        if (hasBwdFactorA) {
          size += pb::CodedOutputStream.ComputeDoubleSize(5, BwdFactorA);
        }
        if (hasBwdFactorB) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, BwdFactorB);
        }
        if (hasSplitBase) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, SplitBase);
        }
        if (hasSplitErt) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, SplitErt);
        }
        if (hasJoinBase) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, JoinBase);
        }
        if (hasJoinErt) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, JoinErt);
        }
        if (hasBonusBase) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, BonusBase);
        }
        if (hasBonusErt) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, BonusErt);
        }
        if (hasTransferBase) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, TransferBase);
        }
        if (hasTransferErt) {
          size += pb::CodedOutputStream.ComputeInt32Size(14, TransferErt);
        }
        if (hasAllotBase) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, AllotBase);
        }
        if (hasAllotErt) {
          size += pb::CodedOutputStream.ComputeInt32Size(16, AllotErt);
        }
        if (hasAllotPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(17, AllotPrice);
        }
        if (hasAddBase) {
          size += pb::CodedOutputStream.ComputeInt32Size(18, AddBase);
        }
        if (hasAddErt) {
          size += pb::CodedOutputStream.ComputeInt32Size(19, AddErt);
        }
        if (hasAddPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(20, AddPrice);
        }
        if (hasDividend) {
          size += pb::CodedOutputStream.ComputeDoubleSize(21, Dividend);
        }
        if (hasSpDividend) {
          size += pb::CodedOutputStream.ComputeDoubleSize(22, SpDividend);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(23, Timestamp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Rehab ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Rehab ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Rehab ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Rehab ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Rehab ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Rehab ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Rehab ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Rehab ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Rehab ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Rehab ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Rehab MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Rehab prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Rehab, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Rehab cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Rehab result;
        
        private Rehab PrepareBuilder() {
          if (resultIsReadOnly) {
            Rehab original = result;
            result = new Rehab();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Rehab MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.Rehab.Descriptor; }
        }
        
        public override Rehab DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.QotCommon.Rehab.DefaultInstance; }
        }
        
        public override Rehab BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Rehab) {
            return MergeFrom((Rehab) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Rehab other) {
          if (other == global::Futu.OpenApi.Pb.QotCommon.Rehab.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasTime) {
            Time = other.Time;
          }
          if (other.HasCompanyActFlag) {
            CompanyActFlag = other.CompanyActFlag;
          }
          if (other.HasFwdFactorA) {
            FwdFactorA = other.FwdFactorA;
          }
          if (other.HasFwdFactorB) {
            FwdFactorB = other.FwdFactorB;
          }
          if (other.HasBwdFactorA) {
            BwdFactorA = other.BwdFactorA;
          }
          if (other.HasBwdFactorB) {
            BwdFactorB = other.BwdFactorB;
          }
          if (other.HasSplitBase) {
            SplitBase = other.SplitBase;
          }
          if (other.HasSplitErt) {
            SplitErt = other.SplitErt;
          }
          if (other.HasJoinBase) {
            JoinBase = other.JoinBase;
          }
          if (other.HasJoinErt) {
            JoinErt = other.JoinErt;
          }
          if (other.HasBonusBase) {
            BonusBase = other.BonusBase;
          }
          if (other.HasBonusErt) {
            BonusErt = other.BonusErt;
          }
          if (other.HasTransferBase) {
            TransferBase = other.TransferBase;
          }
          if (other.HasTransferErt) {
            TransferErt = other.TransferErt;
          }
          if (other.HasAllotBase) {
            AllotBase = other.AllotBase;
          }
          if (other.HasAllotErt) {
            AllotErt = other.AllotErt;
          }
          if (other.HasAllotPrice) {
            AllotPrice = other.AllotPrice;
          }
          if (other.HasAddBase) {
            AddBase = other.AddBase;
          }
          if (other.HasAddErt) {
            AddErt = other.AddErt;
          }
          if (other.HasAddPrice) {
            AddPrice = other.AddPrice;
          }
          if (other.HasDividend) {
            Dividend = other.Dividend;
          }
          if (other.HasSpDividend) {
            SpDividend = other.SpDividend;
          }
          if (other.HasTimestamp) {
            Timestamp = other.Timestamp;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_rehabFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _rehabFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                result.hasTime = input.ReadString(ref result.time_);
                break;
              }
              case 16: {
                result.hasCompanyActFlag = input.ReadInt64(ref result.companyActFlag_);
                break;
              }
              case 25: {
                result.hasFwdFactorA = input.ReadDouble(ref result.fwdFactorA_);
                break;
              }
              case 33: {
                result.hasFwdFactorB = input.ReadDouble(ref result.fwdFactorB_);
                break;
              }
              case 41: {
                result.hasBwdFactorA = input.ReadDouble(ref result.bwdFactorA_);
                break;
              }
              case 49: {
                result.hasBwdFactorB = input.ReadDouble(ref result.bwdFactorB_);
                break;
              }
              case 56: {
                result.hasSplitBase = input.ReadInt32(ref result.splitBase_);
                break;
              }
              case 64: {
                result.hasSplitErt = input.ReadInt32(ref result.splitErt_);
                break;
              }
              case 72: {
                result.hasJoinBase = input.ReadInt32(ref result.joinBase_);
                break;
              }
              case 80: {
                result.hasJoinErt = input.ReadInt32(ref result.joinErt_);
                break;
              }
              case 88: {
                result.hasBonusBase = input.ReadInt32(ref result.bonusBase_);
                break;
              }
              case 96: {
                result.hasBonusErt = input.ReadInt32(ref result.bonusErt_);
                break;
              }
              case 104: {
                result.hasTransferBase = input.ReadInt32(ref result.transferBase_);
                break;
              }
              case 112: {
                result.hasTransferErt = input.ReadInt32(ref result.transferErt_);
                break;
              }
              case 120: {
                result.hasAllotBase = input.ReadInt32(ref result.allotBase_);
                break;
              }
              case 128: {
                result.hasAllotErt = input.ReadInt32(ref result.allotErt_);
                break;
              }
              case 137: {
                result.hasAllotPrice = input.ReadDouble(ref result.allotPrice_);
                break;
              }
              case 144: {
                result.hasAddBase = input.ReadInt32(ref result.addBase_);
                break;
              }
              case 152: {
                result.hasAddErt = input.ReadInt32(ref result.addErt_);
                break;
              }
              case 161: {
                result.hasAddPrice = input.ReadDouble(ref result.addPrice_);
                break;
              }
              case 169: {
                result.hasDividend = input.ReadDouble(ref result.dividend_);
                break;
              }
              case 177: {
                result.hasSpDividend = input.ReadDouble(ref result.spDividend_);
                break;
              }
              case 185: {
                result.hasTimestamp = input.ReadDouble(ref result.timestamp_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasTime {
          get { return result.hasTime; }
        }
        public string Time {
          get { return result.Time; }
          set { SetTime(value); }
        }
        public Builder SetTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasTime = true;
          result.time_ = value;
          return this;
        }
        public Builder ClearTime() {
          PrepareBuilder();
          result.hasTime = false;
          result.time_ = "";
          return this;
        }
        
        public bool HasCompanyActFlag {
          get { return result.hasCompanyActFlag; }
        }
        public long CompanyActFlag {
          get { return result.CompanyActFlag; }
          set { SetCompanyActFlag(value); }
        }
        public Builder SetCompanyActFlag(long value) {
          PrepareBuilder();
          result.hasCompanyActFlag = true;
          result.companyActFlag_ = value;
          return this;
        }
        public Builder ClearCompanyActFlag() {
          PrepareBuilder();
          result.hasCompanyActFlag = false;
          result.companyActFlag_ = 0L;
          return this;
        }
        
        public bool HasFwdFactorA {
          get { return result.hasFwdFactorA; }
        }
        public double FwdFactorA {
          get { return result.FwdFactorA; }
          set { SetFwdFactorA(value); }
        }
        public Builder SetFwdFactorA(double value) {
          PrepareBuilder();
          result.hasFwdFactorA = true;
          result.fwdFactorA_ = value;
          return this;
        }
        public Builder ClearFwdFactorA() {
          PrepareBuilder();
          result.hasFwdFactorA = false;
          result.fwdFactorA_ = 0D;
          return this;
        }
        
        public bool HasFwdFactorB {
          get { return result.hasFwdFactorB; }
        }
        public double FwdFactorB {
          get { return result.FwdFactorB; }
          set { SetFwdFactorB(value); }
        }
        public Builder SetFwdFactorB(double value) {
          PrepareBuilder();
          result.hasFwdFactorB = true;
          result.fwdFactorB_ = value;
          return this;
        }
        public Builder ClearFwdFactorB() {
          PrepareBuilder();
          result.hasFwdFactorB = false;
          result.fwdFactorB_ = 0D;
          return this;
        }
        
        public bool HasBwdFactorA {
          get { return result.hasBwdFactorA; }
        }
        public double BwdFactorA {
          get { return result.BwdFactorA; }
          set { SetBwdFactorA(value); }
        }
        public Builder SetBwdFactorA(double value) {
          PrepareBuilder();
          result.hasBwdFactorA = true;
          result.bwdFactorA_ = value;
          return this;
        }
        public Builder ClearBwdFactorA() {
          PrepareBuilder();
          result.hasBwdFactorA = false;
          result.bwdFactorA_ = 0D;
          return this;
        }
        
        public bool HasBwdFactorB {
          get { return result.hasBwdFactorB; }
        }
        public double BwdFactorB {
          get { return result.BwdFactorB; }
          set { SetBwdFactorB(value); }
        }
        public Builder SetBwdFactorB(double value) {
          PrepareBuilder();
          result.hasBwdFactorB = true;
          result.bwdFactorB_ = value;
          return this;
        }
        public Builder ClearBwdFactorB() {
          PrepareBuilder();
          result.hasBwdFactorB = false;
          result.bwdFactorB_ = 0D;
          return this;
        }
        
        public bool HasSplitBase {
          get { return result.hasSplitBase; }
        }
        public int SplitBase {
          get { return result.SplitBase; }
          set { SetSplitBase(value); }
        }
        public Builder SetSplitBase(int value) {
          PrepareBuilder();
          result.hasSplitBase = true;
          result.splitBase_ = value;
          return this;
        }
        public Builder ClearSplitBase() {
          PrepareBuilder();
          result.hasSplitBase = false;
          result.splitBase_ = 0;
          return this;
        }
        
        public bool HasSplitErt {
          get { return result.hasSplitErt; }
        }
        public int SplitErt {
          get { return result.SplitErt; }
          set { SetSplitErt(value); }
        }
        public Builder SetSplitErt(int value) {
          PrepareBuilder();
          result.hasSplitErt = true;
          result.splitErt_ = value;
          return this;
        }
        public Builder ClearSplitErt() {
          PrepareBuilder();
          result.hasSplitErt = false;
          result.splitErt_ = 0;
          return this;
        }
        
        public bool HasJoinBase {
          get { return result.hasJoinBase; }
        }
        public int JoinBase {
          get { return result.JoinBase; }
          set { SetJoinBase(value); }
        }
        public Builder SetJoinBase(int value) {
          PrepareBuilder();
          result.hasJoinBase = true;
          result.joinBase_ = value;
          return this;
        }
        public Builder ClearJoinBase() {
          PrepareBuilder();
          result.hasJoinBase = false;
          result.joinBase_ = 0;
          return this;
        }
        
        public bool HasJoinErt {
          get { return result.hasJoinErt; }
        }
        public int JoinErt {
          get { return result.JoinErt; }
          set { SetJoinErt(value); }
        }
        public Builder SetJoinErt(int value) {
          PrepareBuilder();
          result.hasJoinErt = true;
          result.joinErt_ = value;
          return this;
        }
        public Builder ClearJoinErt() {
          PrepareBuilder();
          result.hasJoinErt = false;
          result.joinErt_ = 0;
          return this;
        }
        
        public bool HasBonusBase {
          get { return result.hasBonusBase; }
        }
        public int BonusBase {
          get { return result.BonusBase; }
          set { SetBonusBase(value); }
        }
        public Builder SetBonusBase(int value) {
          PrepareBuilder();
          result.hasBonusBase = true;
          result.bonusBase_ = value;
          return this;
        }
        public Builder ClearBonusBase() {
          PrepareBuilder();
          result.hasBonusBase = false;
          result.bonusBase_ = 0;
          return this;
        }
        
        public bool HasBonusErt {
          get { return result.hasBonusErt; }
        }
        public int BonusErt {
          get { return result.BonusErt; }
          set { SetBonusErt(value); }
        }
        public Builder SetBonusErt(int value) {
          PrepareBuilder();
          result.hasBonusErt = true;
          result.bonusErt_ = value;
          return this;
        }
        public Builder ClearBonusErt() {
          PrepareBuilder();
          result.hasBonusErt = false;
          result.bonusErt_ = 0;
          return this;
        }
        
        public bool HasTransferBase {
          get { return result.hasTransferBase; }
        }
        public int TransferBase {
          get { return result.TransferBase; }
          set { SetTransferBase(value); }
        }
        public Builder SetTransferBase(int value) {
          PrepareBuilder();
          result.hasTransferBase = true;
          result.transferBase_ = value;
          return this;
        }
        public Builder ClearTransferBase() {
          PrepareBuilder();
          result.hasTransferBase = false;
          result.transferBase_ = 0;
          return this;
        }
        
        public bool HasTransferErt {
          get { return result.hasTransferErt; }
        }
        public int TransferErt {
          get { return result.TransferErt; }
          set { SetTransferErt(value); }
        }
        public Builder SetTransferErt(int value) {
          PrepareBuilder();
          result.hasTransferErt = true;
          result.transferErt_ = value;
          return this;
        }
        public Builder ClearTransferErt() {
          PrepareBuilder();
          result.hasTransferErt = false;
          result.transferErt_ = 0;
          return this;
        }
        
        public bool HasAllotBase {
          get { return result.hasAllotBase; }
        }
        public int AllotBase {
          get { return result.AllotBase; }
          set { SetAllotBase(value); }
        }
        public Builder SetAllotBase(int value) {
          PrepareBuilder();
          result.hasAllotBase = true;
          result.allotBase_ = value;
          return this;
        }
        public Builder ClearAllotBase() {
          PrepareBuilder();
          result.hasAllotBase = false;
          result.allotBase_ = 0;
          return this;
        }
        
        public bool HasAllotErt {
          get { return result.hasAllotErt; }
        }
        public int AllotErt {
          get { return result.AllotErt; }
          set { SetAllotErt(value); }
        }
        public Builder SetAllotErt(int value) {
          PrepareBuilder();
          result.hasAllotErt = true;
          result.allotErt_ = value;
          return this;
        }
        public Builder ClearAllotErt() {
          PrepareBuilder();
          result.hasAllotErt = false;
          result.allotErt_ = 0;
          return this;
        }
        
        public bool HasAllotPrice {
          get { return result.hasAllotPrice; }
        }
        public double AllotPrice {
          get { return result.AllotPrice; }
          set { SetAllotPrice(value); }
        }
        public Builder SetAllotPrice(double value) {
          PrepareBuilder();
          result.hasAllotPrice = true;
          result.allotPrice_ = value;
          return this;
        }
        public Builder ClearAllotPrice() {
          PrepareBuilder();
          result.hasAllotPrice = false;
          result.allotPrice_ = 0D;
          return this;
        }
        
        public bool HasAddBase {
          get { return result.hasAddBase; }
        }
        public int AddBase {
          get { return result.AddBase; }
          set { SetAddBase(value); }
        }
        public Builder SetAddBase(int value) {
          PrepareBuilder();
          result.hasAddBase = true;
          result.addBase_ = value;
          return this;
        }
        public Builder ClearAddBase() {
          PrepareBuilder();
          result.hasAddBase = false;
          result.addBase_ = 0;
          return this;
        }
        
        public bool HasAddErt {
          get { return result.hasAddErt; }
        }
        public int AddErt {
          get { return result.AddErt; }
          set { SetAddErt(value); }
        }
        public Builder SetAddErt(int value) {
          PrepareBuilder();
          result.hasAddErt = true;
          result.addErt_ = value;
          return this;
        }
        public Builder ClearAddErt() {
          PrepareBuilder();
          result.hasAddErt = false;
          result.addErt_ = 0;
          return this;
        }
        
        public bool HasAddPrice {
          get { return result.hasAddPrice; }
        }
        public double AddPrice {
          get { return result.AddPrice; }
          set { SetAddPrice(value); }
        }
        public Builder SetAddPrice(double value) {
          PrepareBuilder();
          result.hasAddPrice = true;
          result.addPrice_ = value;
          return this;
        }
        public Builder ClearAddPrice() {
          PrepareBuilder();
          result.hasAddPrice = false;
          result.addPrice_ = 0D;
          return this;
        }
        
        public bool HasDividend {
          get { return result.hasDividend; }
        }
        public double Dividend {
          get { return result.Dividend; }
          set { SetDividend(value); }
        }
        public Builder SetDividend(double value) {
          PrepareBuilder();
          result.hasDividend = true;
          result.dividend_ = value;
          return this;
        }
        public Builder ClearDividend() {
          PrepareBuilder();
          result.hasDividend = false;
          result.dividend_ = 0D;
          return this;
        }
        
        public bool HasSpDividend {
          get { return result.hasSpDividend; }
        }
        public double SpDividend {
          get { return result.SpDividend; }
          set { SetSpDividend(value); }
        }
        public Builder SetSpDividend(double value) {
          PrepareBuilder();
          result.hasSpDividend = true;
          result.spDividend_ = value;
          return this;
        }
        public Builder ClearSpDividend() {
          PrepareBuilder();
          result.hasSpDividend = false;
          result.spDividend_ = 0D;
          return this;
        }
        
        public bool HasTimestamp {
          get { return result.hasTimestamp; }
        }
        public double Timestamp {
          get { return result.Timestamp; }
          set { SetTimestamp(value); }
        }
        public Builder SetTimestamp(double value) {
          PrepareBuilder();
          result.hasTimestamp = true;
          result.timestamp_ = value;
          return this;
        }
        public Builder ClearTimestamp() {
          PrepareBuilder();
          result.hasTimestamp = false;
          result.timestamp_ = 0D;
          return this;
        }
      }
      static Rehab() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.QotCommon.Descriptor, null);
      }
    }
    
    #endregion
    
  }
}

#endregion Designer generated code
