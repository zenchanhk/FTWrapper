// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Futu.OpenApi.Pb {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class TrdCommon {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    private static pbd::MessageDescriptor internal__static_Trd_Common_TrdHeader__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.TrdHeader, global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.Builder> internal__static_Trd_Common_TrdHeader__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_Common_TrdAcc__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.TrdAcc, global::Futu.OpenApi.Pb.TrdCommon.TrdAcc.Builder> internal__static_Trd_Common_TrdAcc__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_Common_Funds__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.Funds, global::Futu.OpenApi.Pb.TrdCommon.Funds.Builder> internal__static_Trd_Common_Funds__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_Common_Position__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.Position, global::Futu.OpenApi.Pb.TrdCommon.Position.Builder> internal__static_Trd_Common_Position__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_Common_Order__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.Order, global::Futu.OpenApi.Pb.TrdCommon.Order.Builder> internal__static_Trd_Common_Order__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_Common_OrderFill__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.OrderFill, global::Futu.OpenApi.Pb.TrdCommon.OrderFill.Builder> internal__static_Trd_Common_OrderFill__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_Common_MaxTrdQtys__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.MaxTrdQtys, global::Futu.OpenApi.Pb.TrdCommon.MaxTrdQtys.Builder> internal__static_Trd_Common_MaxTrdQtys__FieldAccessorTable;
    private static pbd::MessageDescriptor internal__static_Trd_Common_TrdFilterConditions__Descriptor;
    private static pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.TrdFilterConditions, global::Futu.OpenApi.Pb.TrdCommon.TrdFilterConditions.Builder> internal__static_Trd_Common_TrdFilterConditions__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static TrdCommon() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBUcmRfQ29tbW9uLnByb3RvEgpUcmRfQ29tbW9uGgxDb21tb24ucHJvdG8i", 
            "VwoJVHJkSGVhZGVyEhYKBnRyZEVudhgBIAIoBVIGdHJkRW52EhQKBWFjY0lE", 
            "GAIgAigEUgVhY2NJRBIcCgl0cmRNYXJrZXQYAyACKAVSCXRyZE1hcmtldCKY", 
            "AQoGVHJkQWNjEhYKBnRyZEVudhgBIAIoBVIGdHJkRW52EhQKBWFjY0lEGAIg", 
            "AigEUgVhY2NJRBIsChF0cmRNYXJrZXRBdXRoTGlzdBgDIAMoBVIRdHJkTWFy", 
            "a2V0QXV0aExpc3QSGAoHYWNjVHlwZRgEIAEoBVIHYWNjVHlwZRIYCgdjYXJk", 
            "TnVtGAUgASgJUgdjYXJkTnVtItsBCgVGdW5kcxIUCgVwb3dlchgBIAIoAVIF", 
            "cG93ZXISIAoLdG90YWxBc3NldHMYAiACKAFSC3RvdGFsQXNzZXRzEhIKBGNh", 
            "c2gYAyACKAFSBGNhc2gSHAoJbWFya2V0VmFsGAQgAigBUgltYXJrZXRWYWwS", 
            "HgoKZnJvemVuQ2FzaBgFIAIoAVIKZnJvemVuQ2FzaBIaCghkZWJ0Q2FzaBgG", 
            "IAIoAVIIZGVidENhc2gSLAoRYXZsV2l0aGRyYXdhbENhc2gYByACKAFSEWF2", 
            "bFdpdGhkcmF3YWxDYXNoIuwDCghQb3NpdGlvbhIeCgpwb3NpdGlvbklEGAEg", 
            "AigEUgpwb3NpdGlvbklEEiIKDHBvc2l0aW9uU2lkZRgCIAIoBVIMcG9zaXRp", 
            "b25TaWRlEhIKBGNvZGUYAyACKAlSBGNvZGUSEgoEbmFtZRgEIAIoCVIEbmFt", 
            "ZRIQCgNxdHkYBSACKAFSA3F0eRIeCgpjYW5TZWxsUXR5GAYgAigBUgpjYW5T", 
            "ZWxsUXR5EhQKBXByaWNlGAcgAigBUgVwcmljZRIcCgljb3N0UHJpY2UYCCAB", 
            "KAFSCWNvc3RQcmljZRIQCgN2YWwYCSACKAFSA3ZhbBIUCgVwbFZhbBgKIAIo", 
            "AVIFcGxWYWwSGAoHcGxSYXRpbxgLIAEoAVIHcGxSYXRpbxIcCglzZWNNYXJr", 
            "ZXQYDCABKAVSCXNlY01hcmtldBIZCgh0ZF9wbFZhbBgVIAEoAVIHdGRQbFZh", 
            "bBIbCgl0ZF90cmRWYWwYFiABKAFSCHRkVHJkVmFsEhsKCXRkX2J1eVZhbBgX", 
            "IAEoAVIIdGRCdXlWYWwSGwoJdGRfYnV5UXR5GBggASgBUgh0ZEJ1eVF0eRId", 
            "Cgp0ZF9zZWxsVmFsGBkgASgBUgl0ZFNlbGxWYWwSHQoKdGRfc2VsbFF0eRga", 
            "IAEoAVIJdGRTZWxsUXR5IpEECgVPcmRlchIYCgd0cmRTaWRlGAEgAigFUgd0", 
            "cmRTaWRlEhwKCW9yZGVyVHlwZRgCIAIoBVIJb3JkZXJUeXBlEiAKC29yZGVy", 
            "U3RhdHVzGAMgAigFUgtvcmRlclN0YXR1cxIYCgdvcmRlcklEGAQgAigEUgdv", 
            "cmRlcklEEhwKCW9yZGVySURFeBgFIAIoCVIJb3JkZXJJREV4EhIKBGNvZGUY", 
            "BiACKAlSBGNvZGUSEgoEbmFtZRgHIAIoCVIEbmFtZRIQCgNxdHkYCCACKAFS", 
            "A3F0eRIUCgVwcmljZRgJIAEoAVIFcHJpY2USHgoKY3JlYXRlVGltZRgKIAIo", 
            "CVIKY3JlYXRlVGltZRIeCgp1cGRhdGVUaW1lGAsgAigJUgp1cGRhdGVUaW1l", 
            "EhgKB2ZpbGxRdHkYDCABKAFSB2ZpbGxRdHkSIgoMZmlsbEF2Z1ByaWNlGA0g", 
            "ASgBUgxmaWxsQXZnUHJpY2USHgoKbGFzdEVyck1zZxgOIAEoCVIKbGFzdEVy", 
            "ck1zZxIcCglzZWNNYXJrZXQYDyABKAVSCXNlY01hcmtldBIoCg9jcmVhdGVU", 
            "aW1lc3RhbXAYECABKAFSD2NyZWF0ZVRpbWVzdGFtcBIoCg91cGRhdGVUaW1l", 
            "c3RhbXAYESABKAFSD3VwZGF0ZVRpbWVzdGFtcBIWCgZyZW1hcmsYEiABKAlS", 
            "BnJlbWFyayLjAwoJT3JkZXJGaWxsEhgKB3RyZFNpZGUYASACKAVSB3RyZFNp", 
            "ZGUSFgoGZmlsbElEGAIgAigEUgZmaWxsSUQSGgoIZmlsbElERXgYAyACKAlS", 
            "CGZpbGxJREV4EhgKB29yZGVySUQYBCABKARSB29yZGVySUQSHAoJb3JkZXJJ", 
            "REV4GAUgASgJUglvcmRlcklERXgSEgoEY29kZRgGIAIoCVIEY29kZRISCgRu", 
            "YW1lGAcgAigJUgRuYW1lEhAKA3F0eRgIIAIoAVIDcXR5EhQKBXByaWNlGAkg", 
            "AigBUgVwcmljZRIeCgpjcmVhdGVUaW1lGAogAigJUgpjcmVhdGVUaW1lEigK", 
            "D2NvdW50ZXJCcm9rZXJJRBgLIAEoBVIPY291bnRlckJyb2tlcklEEiwKEWNv", 
            "dW50ZXJCcm9rZXJOYW1lGAwgASgJUhFjb3VudGVyQnJva2VyTmFtZRIcCglz", 
            "ZWNNYXJrZXQYDSABKAVSCXNlY01hcmtldBIoCg9jcmVhdGVUaW1lc3RhbXAY", 
            "DiABKAFSD2NyZWF0ZVRpbWVzdGFtcBIoCg91cGRhdGVUaW1lc3RhbXAYDyAB", 
            "KAFSD3VwZGF0ZVRpbWVzdGFtcBIWCgZzdGF0dXMYECABKAVSBnN0YXR1cyLM", 
            "AQoKTWF4VHJkUXR5cxIeCgptYXhDYXNoQnV5GAEgAigBUgptYXhDYXNoQnV5", 
            "EjAKE21heENhc2hBbmRNYXJnaW5CdXkYAiABKAFSE21heENhc2hBbmRNYXJn", 
            "aW5CdXkSKAoPbWF4UG9zaXRpb25TZWxsGAMgAigBUg9tYXhQb3NpdGlvblNl", 
            "bGwSIgoMbWF4U2VsbFNob3J0GAQgASgBUgxtYXhTZWxsU2hvcnQSHgoKbWF4", 
            "QnV5QmFjaxgFIAEoAVIKbWF4QnV5QmFjayKBAQoTVHJkRmlsdGVyQ29uZGl0", 
            "aW9ucxIaCghjb2RlTGlzdBgBIAMoCVIIY29kZUxpc3QSFgoGaWRMaXN0GAIg", 
            "AygEUgZpZExpc3QSHAoJYmVnaW5UaW1lGAMgASgJUgliZWdpblRpbWUSGAoH", 
            "ZW5kVGltZRgEIAEoCVIHZW5kVGltZSouCgZUcmRFbnYSEwoPVHJkRW52X1Np", 
            "bXVsYXRlEAASDwoLVHJkRW52X1JlYWwQASpsCglUcmRNYXJrZXQSFQoRVHJk", 
            "TWFya2V0X1Vua25vd24QABIQCgxUcmRNYXJrZXRfSEsQARIQCgxUcmRNYXJr", 
            "ZXRfVVMQAhIQCgxUcmRNYXJrZXRfQ04QAxISCg5UcmRNYXJrZXRfSEtDQxAE", 
            "KoIBCgxUcmRTZWNNYXJrZXQSGAoUVHJkU2VjTWFya2V0X1Vua25vd24QABIT", 
            "Cg9UcmRTZWNNYXJrZXRfSEsQARITCg9UcmRTZWNNYXJrZXRfVVMQAhIWChJU", 
            "cmRTZWNNYXJrZXRfQ05fU0gQHxIWChJUcmRTZWNNYXJrZXRfQ05fU1oQICpt", 
            "CgdUcmRTaWRlEhMKD1RyZFNpZGVfVW5rbm93bhAAEg8KC1RyZFNpZGVfQnV5", 
            "EAESEAoMVHJkU2lkZV9TZWxsEAISFQoRVHJkU2lkZV9TZWxsU2hvcnQQAxIT", 
            "Cg9UcmRTaWRlX0J1eUJhY2sQBCraAQoJT3JkZXJUeXBlEhUKEU9yZGVyVHlw", 
            "ZV9Vbmtub3duEAASFAoQT3JkZXJUeXBlX05vcm1hbBABEhQKEE9yZGVyVHlw", 
            "ZV9NYXJrZXQQAhIbChdPcmRlclR5cGVfQWJzb2x1dGVMaW1pdBAFEhUKEU9y", 
            "ZGVyVHlwZV9BdWN0aW9uEAYSGgoWT3JkZXJUeXBlX0F1Y3Rpb25MaW1pdBAH", 
            "EhoKFk9yZGVyVHlwZV9TcGVjaWFsTGltaXQQCBIeChpPcmRlclR5cGVfU3Bl", 
            "Y2lhbExpbWl0X0FsbBAJKvwDCgtPcmRlclN0YXR1cxIbChdPcmRlclN0YXR1", 
            "c19VbnN1Ym1pdHRlZBAAEiAKE09yZGVyU3RhdHVzX1Vua25vd24Q////////", 
            "////ARIdChlPcmRlclN0YXR1c19XYWl0aW5nU3VibWl0EAESGgoWT3JkZXJT", 
            "dGF0dXNfU3VibWl0dGluZxACEhwKGE9yZGVyU3RhdHVzX1N1Ym1pdEZhaWxl", 
            "ZBADEhcKE09yZGVyU3RhdHVzX1RpbWVPdXQQBBIZChVPcmRlclN0YXR1c19T", 
            "dWJtaXR0ZWQQBRIbChdPcmRlclN0YXR1c19GaWxsZWRfUGFydBAKEhoKFk9y", 
            "ZGVyU3RhdHVzX0ZpbGxlZF9BbGwQCxIfChtPcmRlclN0YXR1c19DYW5jZWxs", 
            "aW5nX1BhcnQQDBIeChpPcmRlclN0YXR1c19DYW5jZWxsaW5nX0FsbBANEh4K", 
            "Gk9yZGVyU3RhdHVzX0NhbmNlbGxlZF9QYXJ0EA4SHQoZT3JkZXJTdGF0dXNf", 
            "Q2FuY2VsbGVkX0FsbBAPEhYKEk9yZGVyU3RhdHVzX0ZhaWxlZBAVEhgKFE9y", 
            "ZGVyU3RhdHVzX0Rpc2FibGVkEBYSFwoTT3JkZXJTdGF0dXNfRGVsZXRlZBAX", 
            "Eh0KGU9yZGVyU3RhdHVzX0ZpbGxDYW5jZWxsZWQQGCplCg9PcmRlckZpbGxT", 
            "dGF0dXMSFgoST3JkZXJGaWxsU3RhdHVzX09LEAASHQoZT3JkZXJGaWxsU3Rh", 
            "dHVzX0NhbmNlbGxlZBABEhsKF09yZGVyRmlsbFN0YXR1c19DaGFuZ2VkEAIq", 
            "YAoMUG9zaXRpb25TaWRlEhUKEVBvc2l0aW9uU2lkZV9Mb25nEAASIQoUUG9z", 
            "aXRpb25TaWRlX1Vua25vd24Q////////////ARIWChJQb3NpdGlvblNpZGVf", 
            "U2hvcnQQASqtAQoNTW9kaWZ5T3JkZXJPcBIZChVNb2RpZnlPcmRlck9wX1Vu", 
            "a25vd24QABIYChRNb2RpZnlPcmRlck9wX05vcm1hbBABEhgKFE1vZGlmeU9y", 
            "ZGVyT3BfQ2FuY2VsEAISGQoVTW9kaWZ5T3JkZXJPcF9EaXNhYmxlEAMSGAoU", 
            "TW9kaWZ5T3JkZXJPcF9FbmFibGUQBBIYChRNb2RpZnlPcmRlck9wX0RlbGV0", 
            "ZRAFKlAKClRyZEFjY1R5cGUSFgoSVHJkQWNjVHlwZV9Vbmtub3duEAASEwoP", 
            "VHJkQWNjVHlwZV9DYXNoEAESFQoRVHJkQWNjVHlwZV9NYXJnaW4QAkIVChNj", 
          "b20uZnV0dS5vcGVuYXBpLnBi"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Trd_Common_TrdHeader__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Trd_Common_TrdHeader__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.TrdHeader, global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.Builder>(internal__static_Trd_Common_TrdHeader__Descriptor,
                new string[] { "TrdEnv", "AccID", "TrdMarket", });
        internal__static_Trd_Common_TrdAcc__Descriptor = Descriptor.MessageTypes[1];
        internal__static_Trd_Common_TrdAcc__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.TrdAcc, global::Futu.OpenApi.Pb.TrdCommon.TrdAcc.Builder>(internal__static_Trd_Common_TrdAcc__Descriptor,
                new string[] { "TrdEnv", "AccID", "TrdMarketAuthList", "AccType", "CardNum", });
        internal__static_Trd_Common_Funds__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Trd_Common_Funds__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.Funds, global::Futu.OpenApi.Pb.TrdCommon.Funds.Builder>(internal__static_Trd_Common_Funds__Descriptor,
                new string[] { "Power", "TotalAssets", "Cash", "MarketVal", "FrozenCash", "DebtCash", "AvlWithdrawalCash", });
        internal__static_Trd_Common_Position__Descriptor = Descriptor.MessageTypes[3];
        internal__static_Trd_Common_Position__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.Position, global::Futu.OpenApi.Pb.TrdCommon.Position.Builder>(internal__static_Trd_Common_Position__Descriptor,
                new string[] { "PositionID", "PositionSide", "Code", "Name", "Qty", "CanSellQty", "Price", "CostPrice", "Val", "PlVal", "PlRatio", "SecMarket", "TdPlVal", "TdTrdVal", "TdBuyVal", "TdBuyQty", "TdSellVal", "TdSellQty", });
        internal__static_Trd_Common_Order__Descriptor = Descriptor.MessageTypes[4];
        internal__static_Trd_Common_Order__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.Order, global::Futu.OpenApi.Pb.TrdCommon.Order.Builder>(internal__static_Trd_Common_Order__Descriptor,
                new string[] { "TrdSide", "OrderType", "OrderStatus", "OrderID", "OrderIDEx", "Code", "Name", "Qty", "Price", "CreateTime", "UpdateTime", "FillQty", "FillAvgPrice", "LastErrMsg", "SecMarket", "CreateTimestamp", "UpdateTimestamp", "Remark", });
        internal__static_Trd_Common_OrderFill__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Trd_Common_OrderFill__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.OrderFill, global::Futu.OpenApi.Pb.TrdCommon.OrderFill.Builder>(internal__static_Trd_Common_OrderFill__Descriptor,
                new string[] { "TrdSide", "FillID", "FillIDEx", "OrderID", "OrderIDEx", "Code", "Name", "Qty", "Price", "CreateTime", "CounterBrokerID", "CounterBrokerName", "SecMarket", "CreateTimestamp", "UpdateTimestamp", "Status", });
        internal__static_Trd_Common_MaxTrdQtys__Descriptor = Descriptor.MessageTypes[6];
        internal__static_Trd_Common_MaxTrdQtys__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.MaxTrdQtys, global::Futu.OpenApi.Pb.TrdCommon.MaxTrdQtys.Builder>(internal__static_Trd_Common_MaxTrdQtys__Descriptor,
                new string[] { "MaxCashBuy", "MaxCashAndMarginBuy", "MaxPositionSell", "MaxSellShort", "MaxBuyBack", });
        internal__static_Trd_Common_TrdFilterConditions__Descriptor = Descriptor.MessageTypes[7];
        internal__static_Trd_Common_TrdFilterConditions__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Futu.OpenApi.Pb.TrdCommon.TrdFilterConditions, global::Futu.OpenApi.Pb.TrdCommon.TrdFilterConditions.Builder>(internal__static_Trd_Common_TrdFilterConditions__Descriptor,
                new string[] { "CodeList", "IdList", "BeginTime", "EndTime", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Futu.OpenApi.Pb.Common.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Futu.OpenApi.Pb.Common.Descriptor, 
          }, assigner);
    }
    #endregion
    
    #region Enums
    public enum TrdEnv {
      TrdEnv_Simulate = 0,
      TrdEnv_Real = 1,
    }
    
    public enum TrdMarket {
      TrdMarket_Unknown = 0,
      TrdMarket_HK = 1,
      TrdMarket_US = 2,
      TrdMarket_CN = 3,
      TrdMarket_HKCC = 4,
    }
    
    public enum TrdSecMarket {
      TrdSecMarket_Unknown = 0,
      TrdSecMarket_HK = 1,
      TrdSecMarket_US = 2,
      TrdSecMarket_CN_SH = 31,
      TrdSecMarket_CN_SZ = 32,
    }
    
    public enum TrdSide {
      TrdSide_Unknown = 0,
      TrdSide_Buy = 1,
      TrdSide_Sell = 2,
      TrdSide_SellShort = 3,
      TrdSide_BuyBack = 4,
    }
    
    public enum OrderType {
      OrderType_Unknown = 0,
      OrderType_Normal = 1,
      OrderType_Market = 2,
      OrderType_AbsoluteLimit = 5,
      OrderType_Auction = 6,
      OrderType_AuctionLimit = 7,
      OrderType_SpecialLimit = 8,
      OrderType_SpecialLimit_All = 9,
    }
    
    public enum OrderStatus {
      OrderStatus_Unsubmitted = 0,
      OrderStatus_Unknown = -1,
      OrderStatus_WaitingSubmit = 1,
      OrderStatus_Submitting = 2,
      OrderStatus_SubmitFailed = 3,
      OrderStatus_TimeOut = 4,
      OrderStatus_Submitted = 5,
      OrderStatus_Filled_Part = 10,
      OrderStatus_Filled_All = 11,
      OrderStatus_Cancelling_Part = 12,
      OrderStatus_Cancelling_All = 13,
      OrderStatus_Cancelled_Part = 14,
      OrderStatus_Cancelled_All = 15,
      OrderStatus_Failed = 21,
      OrderStatus_Disabled = 22,
      OrderStatus_Deleted = 23,
      OrderStatus_FillCancelled = 24,
    }
    
    public enum OrderFillStatus {
      OrderFillStatus_OK = 0,
      OrderFillStatus_Cancelled = 1,
      OrderFillStatus_Changed = 2,
    }
    
    public enum PositionSide {
      PositionSide_Long = 0,
      PositionSide_Unknown = -1,
      PositionSide_Short = 1,
    }
    
    public enum ModifyOrderOp {
      ModifyOrderOp_Unknown = 0,
      ModifyOrderOp_Normal = 1,
      ModifyOrderOp_Cancel = 2,
      ModifyOrderOp_Disable = 3,
      ModifyOrderOp_Enable = 4,
      ModifyOrderOp_Delete = 5,
    }
    
    public enum TrdAccType {
      TrdAccType_Unknown = 0,
      TrdAccType_Cash = 1,
      TrdAccType_Margin = 2,
    }
    
    #endregion
    
    #region Messages
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class TrdHeader : pb::GeneratedMessage<TrdHeader, TrdHeader.Builder> {
      private TrdHeader() { }
      private static readonly TrdHeader defaultInstance = new TrdHeader().MakeReadOnly();
      private static readonly string[] _trdHeaderFieldNames = new string[] { "accID", "trdEnv", "trdMarket" };
      private static readonly uint[] _trdHeaderFieldTags = new uint[] { 16, 8, 24 };
      public static TrdHeader DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override TrdHeader DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override TrdHeader ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_TrdHeader__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<TrdHeader, TrdHeader.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_TrdHeader__FieldAccessorTable; }
      }
      
      public const int TrdEnvFieldNumber = 1;
      private bool hasTrdEnv;
      private int trdEnv_;
      public bool HasTrdEnv {
        get { return hasTrdEnv; }
      }
      public int TrdEnv {
        get { return trdEnv_; }
      }
      
      public const int AccIDFieldNumber = 2;
      private bool hasAccID;
      private ulong accID_;
      public bool HasAccID {
        get { return hasAccID; }
      }
      [global::System.CLSCompliant(false)]
      public ulong AccID {
        get { return accID_; }
      }
      
      public const int TrdMarketFieldNumber = 3;
      private bool hasTrdMarket;
      private int trdMarket_;
      public bool HasTrdMarket {
        get { return hasTrdMarket; }
      }
      public int TrdMarket {
        get { return trdMarket_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasTrdEnv) return false;
          if (!hasAccID) return false;
          if (!hasTrdMarket) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _trdHeaderFieldNames;
        if (hasTrdEnv) {
          output.WriteInt32(1, field_names[1], TrdEnv);
        }
        if (hasAccID) {
          output.WriteUInt64(2, field_names[0], AccID);
        }
        if (hasTrdMarket) {
          output.WriteInt32(3, field_names[2], TrdMarket);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTrdEnv) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, TrdEnv);
        }
        if (hasAccID) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, AccID);
        }
        if (hasTrdMarket) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, TrdMarket);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static TrdHeader ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static TrdHeader ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static TrdHeader ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static TrdHeader ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static TrdHeader ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static TrdHeader ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static TrdHeader ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static TrdHeader ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static TrdHeader ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static TrdHeader ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private TrdHeader MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(TrdHeader prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<TrdHeader, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(TrdHeader cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private TrdHeader result;
        
        private TrdHeader PrepareBuilder() {
          if (resultIsReadOnly) {
            TrdHeader original = result;
            result = new TrdHeader();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override TrdHeader MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.Descriptor; }
        }
        
        public override TrdHeader DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.DefaultInstance; }
        }
        
        public override TrdHeader BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is TrdHeader) {
            return MergeFrom((TrdHeader) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(TrdHeader other) {
          if (other == global::Futu.OpenApi.Pb.TrdCommon.TrdHeader.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasTrdEnv) {
            TrdEnv = other.TrdEnv;
          }
          if (other.HasAccID) {
            AccID = other.AccID;
          }
          if (other.HasTrdMarket) {
            TrdMarket = other.TrdMarket;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_trdHeaderFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _trdHeaderFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasTrdEnv = input.ReadInt32(ref result.trdEnv_);
                break;
              }
              case 16: {
                result.hasAccID = input.ReadUInt64(ref result.accID_);
                break;
              }
              case 24: {
                result.hasTrdMarket = input.ReadInt32(ref result.trdMarket_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasTrdEnv {
          get { return result.hasTrdEnv; }
        }
        public int TrdEnv {
          get { return result.TrdEnv; }
          set { SetTrdEnv(value); }
        }
        public Builder SetTrdEnv(int value) {
          PrepareBuilder();
          result.hasTrdEnv = true;
          result.trdEnv_ = value;
          return this;
        }
        public Builder ClearTrdEnv() {
          PrepareBuilder();
          result.hasTrdEnv = false;
          result.trdEnv_ = 0;
          return this;
        }
        
        public bool HasAccID {
          get { return result.hasAccID; }
        }
        [global::System.CLSCompliant(false)]
        public ulong AccID {
          get { return result.AccID; }
          set { SetAccID(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetAccID(ulong value) {
          PrepareBuilder();
          result.hasAccID = true;
          result.accID_ = value;
          return this;
        }
        public Builder ClearAccID() {
          PrepareBuilder();
          result.hasAccID = false;
          result.accID_ = 0UL;
          return this;
        }
        
        public bool HasTrdMarket {
          get { return result.hasTrdMarket; }
        }
        public int TrdMarket {
          get { return result.TrdMarket; }
          set { SetTrdMarket(value); }
        }
        public Builder SetTrdMarket(int value) {
          PrepareBuilder();
          result.hasTrdMarket = true;
          result.trdMarket_ = value;
          return this;
        }
        public Builder ClearTrdMarket() {
          PrepareBuilder();
          result.hasTrdMarket = false;
          result.trdMarket_ = 0;
          return this;
        }
      }
      static TrdHeader() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class TrdAcc : pb::GeneratedMessage<TrdAcc, TrdAcc.Builder> {
      private TrdAcc() { }
      private static readonly TrdAcc defaultInstance = new TrdAcc().MakeReadOnly();
      private static readonly string[] _trdAccFieldNames = new string[] { "accID", "accType", "cardNum", "trdEnv", "trdMarketAuthList" };
      private static readonly uint[] _trdAccFieldTags = new uint[] { 16, 32, 42, 8, 24 };
      public static TrdAcc DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override TrdAcc DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override TrdAcc ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_TrdAcc__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<TrdAcc, TrdAcc.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_TrdAcc__FieldAccessorTable; }
      }
      
      public const int TrdEnvFieldNumber = 1;
      private bool hasTrdEnv;
      private int trdEnv_;
      public bool HasTrdEnv {
        get { return hasTrdEnv; }
      }
      public int TrdEnv {
        get { return trdEnv_; }
      }
      
      public const int AccIDFieldNumber = 2;
      private bool hasAccID;
      private ulong accID_;
      public bool HasAccID {
        get { return hasAccID; }
      }
      [global::System.CLSCompliant(false)]
      public ulong AccID {
        get { return accID_; }
      }
      
      public const int TrdMarketAuthListFieldNumber = 3;
      private pbc::PopsicleList<int> trdMarketAuthList_ = new pbc::PopsicleList<int>();
      public scg::IList<int> TrdMarketAuthListList {
        get { return pbc::Lists.AsReadOnly(trdMarketAuthList_); }
      }
      public int TrdMarketAuthListCount {
        get { return trdMarketAuthList_.Count; }
      }
      public int GetTrdMarketAuthList(int index) {
        return trdMarketAuthList_[index];
      }
      
      public const int AccTypeFieldNumber = 4;
      private bool hasAccType;
      private int accType_;
      public bool HasAccType {
        get { return hasAccType; }
      }
      public int AccType {
        get { return accType_; }
      }
      
      public const int CardNumFieldNumber = 5;
      private bool hasCardNum;
      private string cardNum_ = "";
      public bool HasCardNum {
        get { return hasCardNum; }
      }
      public string CardNum {
        get { return cardNum_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasTrdEnv) return false;
          if (!hasAccID) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _trdAccFieldNames;
        if (hasTrdEnv) {
          output.WriteInt32(1, field_names[3], TrdEnv);
        }
        if (hasAccID) {
          output.WriteUInt64(2, field_names[0], AccID);
        }
        if (trdMarketAuthList_.Count > 0) {
          output.WriteInt32Array(3, field_names[4], trdMarketAuthList_);
        }
        if (hasAccType) {
          output.WriteInt32(4, field_names[1], AccType);
        }
        if (hasCardNum) {
          output.WriteString(5, field_names[2], CardNum);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTrdEnv) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, TrdEnv);
        }
        if (hasAccID) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, AccID);
        }
        {
          int dataSize = 0;
          foreach (int element in TrdMarketAuthListList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * trdMarketAuthList_.Count;
        }
        if (hasAccType) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, AccType);
        }
        if (hasCardNum) {
          size += pb::CodedOutputStream.ComputeStringSize(5, CardNum);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static TrdAcc ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static TrdAcc ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static TrdAcc ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static TrdAcc ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static TrdAcc ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static TrdAcc ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static TrdAcc ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static TrdAcc ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static TrdAcc ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static TrdAcc ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private TrdAcc MakeReadOnly() {
        trdMarketAuthList_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(TrdAcc prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<TrdAcc, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(TrdAcc cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private TrdAcc result;
        
        private TrdAcc PrepareBuilder() {
          if (resultIsReadOnly) {
            TrdAcc original = result;
            result = new TrdAcc();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override TrdAcc MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.TrdAcc.Descriptor; }
        }
        
        public override TrdAcc DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.TrdAcc.DefaultInstance; }
        }
        
        public override TrdAcc BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is TrdAcc) {
            return MergeFrom((TrdAcc) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(TrdAcc other) {
          if (other == global::Futu.OpenApi.Pb.TrdCommon.TrdAcc.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasTrdEnv) {
            TrdEnv = other.TrdEnv;
          }
          if (other.HasAccID) {
            AccID = other.AccID;
          }
          if (other.trdMarketAuthList_.Count != 0) {
            result.trdMarketAuthList_.Add(other.trdMarketAuthList_);
          }
          if (other.HasAccType) {
            AccType = other.AccType;
          }
          if (other.HasCardNum) {
            CardNum = other.CardNum;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_trdAccFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _trdAccFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasTrdEnv = input.ReadInt32(ref result.trdEnv_);
                break;
              }
              case 16: {
                result.hasAccID = input.ReadUInt64(ref result.accID_);
                break;
              }
              case 26:
              case 24: {
                input.ReadInt32Array(tag, field_name, result.trdMarketAuthList_);
                break;
              }
              case 32: {
                result.hasAccType = input.ReadInt32(ref result.accType_);
                break;
              }
              case 42: {
                result.hasCardNum = input.ReadString(ref result.cardNum_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasTrdEnv {
          get { return result.hasTrdEnv; }
        }
        public int TrdEnv {
          get { return result.TrdEnv; }
          set { SetTrdEnv(value); }
        }
        public Builder SetTrdEnv(int value) {
          PrepareBuilder();
          result.hasTrdEnv = true;
          result.trdEnv_ = value;
          return this;
        }
        public Builder ClearTrdEnv() {
          PrepareBuilder();
          result.hasTrdEnv = false;
          result.trdEnv_ = 0;
          return this;
        }
        
        public bool HasAccID {
          get { return result.hasAccID; }
        }
        [global::System.CLSCompliant(false)]
        public ulong AccID {
          get { return result.AccID; }
          set { SetAccID(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetAccID(ulong value) {
          PrepareBuilder();
          result.hasAccID = true;
          result.accID_ = value;
          return this;
        }
        public Builder ClearAccID() {
          PrepareBuilder();
          result.hasAccID = false;
          result.accID_ = 0UL;
          return this;
        }
        
        public pbc::IPopsicleList<int> TrdMarketAuthListList {
          get { return PrepareBuilder().trdMarketAuthList_; }
        }
        public int TrdMarketAuthListCount {
          get { return result.TrdMarketAuthListCount; }
        }
        public int GetTrdMarketAuthList(int index) {
          return result.GetTrdMarketAuthList(index);
        }
        public Builder SetTrdMarketAuthList(int index, int value) {
          PrepareBuilder();
          result.trdMarketAuthList_[index] = value;
          return this;
        }
        public Builder AddTrdMarketAuthList(int value) {
          PrepareBuilder();
          result.trdMarketAuthList_.Add(value);
          return this;
        }
        public Builder AddRangeTrdMarketAuthList(scg::IEnumerable<int> values) {
          PrepareBuilder();
          result.trdMarketAuthList_.Add(values);
          return this;
        }
        public Builder ClearTrdMarketAuthList() {
          PrepareBuilder();
          result.trdMarketAuthList_.Clear();
          return this;
        }
        
        public bool HasAccType {
          get { return result.hasAccType; }
        }
        public int AccType {
          get { return result.AccType; }
          set { SetAccType(value); }
        }
        public Builder SetAccType(int value) {
          PrepareBuilder();
          result.hasAccType = true;
          result.accType_ = value;
          return this;
        }
        public Builder ClearAccType() {
          PrepareBuilder();
          result.hasAccType = false;
          result.accType_ = 0;
          return this;
        }
        
        public bool HasCardNum {
          get { return result.hasCardNum; }
        }
        public string CardNum {
          get { return result.CardNum; }
          set { SetCardNum(value); }
        }
        public Builder SetCardNum(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasCardNum = true;
          result.cardNum_ = value;
          return this;
        }
        public Builder ClearCardNum() {
          PrepareBuilder();
          result.hasCardNum = false;
          result.cardNum_ = "";
          return this;
        }
      }
      static TrdAcc() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Funds : pb::GeneratedMessage<Funds, Funds.Builder> {
      private Funds() { }
      private static readonly Funds defaultInstance = new Funds().MakeReadOnly();
      private static readonly string[] _fundsFieldNames = new string[] { "avlWithdrawalCash", "cash", "debtCash", "frozenCash", "marketVal", "power", "totalAssets" };
      private static readonly uint[] _fundsFieldTags = new uint[] { 57, 25, 49, 41, 33, 9, 17 };
      public static Funds DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Funds DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Funds ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_Funds__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Funds, Funds.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_Funds__FieldAccessorTable; }
      }
      
      public const int PowerFieldNumber = 1;
      private bool hasPower;
      private double power_;
      public bool HasPower {
        get { return hasPower; }
      }
      public double Power {
        get { return power_; }
      }
      
      public const int TotalAssetsFieldNumber = 2;
      private bool hasTotalAssets;
      private double totalAssets_;
      public bool HasTotalAssets {
        get { return hasTotalAssets; }
      }
      public double TotalAssets {
        get { return totalAssets_; }
      }
      
      public const int CashFieldNumber = 3;
      private bool hasCash;
      private double cash_;
      public bool HasCash {
        get { return hasCash; }
      }
      public double Cash {
        get { return cash_; }
      }
      
      public const int MarketValFieldNumber = 4;
      private bool hasMarketVal;
      private double marketVal_;
      public bool HasMarketVal {
        get { return hasMarketVal; }
      }
      public double MarketVal {
        get { return marketVal_; }
      }
      
      public const int FrozenCashFieldNumber = 5;
      private bool hasFrozenCash;
      private double frozenCash_;
      public bool HasFrozenCash {
        get { return hasFrozenCash; }
      }
      public double FrozenCash {
        get { return frozenCash_; }
      }
      
      public const int DebtCashFieldNumber = 6;
      private bool hasDebtCash;
      private double debtCash_;
      public bool HasDebtCash {
        get { return hasDebtCash; }
      }
      public double DebtCash {
        get { return debtCash_; }
      }
      
      public const int AvlWithdrawalCashFieldNumber = 7;
      private bool hasAvlWithdrawalCash;
      private double avlWithdrawalCash_;
      public bool HasAvlWithdrawalCash {
        get { return hasAvlWithdrawalCash; }
      }
      public double AvlWithdrawalCash {
        get { return avlWithdrawalCash_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasPower) return false;
          if (!hasTotalAssets) return false;
          if (!hasCash) return false;
          if (!hasMarketVal) return false;
          if (!hasFrozenCash) return false;
          if (!hasDebtCash) return false;
          if (!hasAvlWithdrawalCash) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _fundsFieldNames;
        if (hasPower) {
          output.WriteDouble(1, field_names[5], Power);
        }
        if (hasTotalAssets) {
          output.WriteDouble(2, field_names[6], TotalAssets);
        }
        if (hasCash) {
          output.WriteDouble(3, field_names[1], Cash);
        }
        if (hasMarketVal) {
          output.WriteDouble(4, field_names[4], MarketVal);
        }
        if (hasFrozenCash) {
          output.WriteDouble(5, field_names[3], FrozenCash);
        }
        if (hasDebtCash) {
          output.WriteDouble(6, field_names[2], DebtCash);
        }
        if (hasAvlWithdrawalCash) {
          output.WriteDouble(7, field_names[0], AvlWithdrawalCash);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPower) {
          size += pb::CodedOutputStream.ComputeDoubleSize(1, Power);
        }
        if (hasTotalAssets) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, TotalAssets);
        }
        if (hasCash) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, Cash);
        }
        if (hasMarketVal) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, MarketVal);
        }
        if (hasFrozenCash) {
          size += pb::CodedOutputStream.ComputeDoubleSize(5, FrozenCash);
        }
        if (hasDebtCash) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, DebtCash);
        }
        if (hasAvlWithdrawalCash) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, AvlWithdrawalCash);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Funds ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Funds ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Funds ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Funds ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Funds ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Funds ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Funds ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Funds ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Funds ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Funds ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Funds MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Funds prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Funds, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Funds cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Funds result;
        
        private Funds PrepareBuilder() {
          if (resultIsReadOnly) {
            Funds original = result;
            result = new Funds();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Funds MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.Funds.Descriptor; }
        }
        
        public override Funds DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.Funds.DefaultInstance; }
        }
        
        public override Funds BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Funds) {
            return MergeFrom((Funds) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Funds other) {
          if (other == global::Futu.OpenApi.Pb.TrdCommon.Funds.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasPower) {
            Power = other.Power;
          }
          if (other.HasTotalAssets) {
            TotalAssets = other.TotalAssets;
          }
          if (other.HasCash) {
            Cash = other.Cash;
          }
          if (other.HasMarketVal) {
            MarketVal = other.MarketVal;
          }
          if (other.HasFrozenCash) {
            FrozenCash = other.FrozenCash;
          }
          if (other.HasDebtCash) {
            DebtCash = other.DebtCash;
          }
          if (other.HasAvlWithdrawalCash) {
            AvlWithdrawalCash = other.AvlWithdrawalCash;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_fundsFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _fundsFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 9: {
                result.hasPower = input.ReadDouble(ref result.power_);
                break;
              }
              case 17: {
                result.hasTotalAssets = input.ReadDouble(ref result.totalAssets_);
                break;
              }
              case 25: {
                result.hasCash = input.ReadDouble(ref result.cash_);
                break;
              }
              case 33: {
                result.hasMarketVal = input.ReadDouble(ref result.marketVal_);
                break;
              }
              case 41: {
                result.hasFrozenCash = input.ReadDouble(ref result.frozenCash_);
                break;
              }
              case 49: {
                result.hasDebtCash = input.ReadDouble(ref result.debtCash_);
                break;
              }
              case 57: {
                result.hasAvlWithdrawalCash = input.ReadDouble(ref result.avlWithdrawalCash_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasPower {
          get { return result.hasPower; }
        }
        public double Power {
          get { return result.Power; }
          set { SetPower(value); }
        }
        public Builder SetPower(double value) {
          PrepareBuilder();
          result.hasPower = true;
          result.power_ = value;
          return this;
        }
        public Builder ClearPower() {
          PrepareBuilder();
          result.hasPower = false;
          result.power_ = 0D;
          return this;
        }
        
        public bool HasTotalAssets {
          get { return result.hasTotalAssets; }
        }
        public double TotalAssets {
          get { return result.TotalAssets; }
          set { SetTotalAssets(value); }
        }
        public Builder SetTotalAssets(double value) {
          PrepareBuilder();
          result.hasTotalAssets = true;
          result.totalAssets_ = value;
          return this;
        }
        public Builder ClearTotalAssets() {
          PrepareBuilder();
          result.hasTotalAssets = false;
          result.totalAssets_ = 0D;
          return this;
        }
        
        public bool HasCash {
          get { return result.hasCash; }
        }
        public double Cash {
          get { return result.Cash; }
          set { SetCash(value); }
        }
        public Builder SetCash(double value) {
          PrepareBuilder();
          result.hasCash = true;
          result.cash_ = value;
          return this;
        }
        public Builder ClearCash() {
          PrepareBuilder();
          result.hasCash = false;
          result.cash_ = 0D;
          return this;
        }
        
        public bool HasMarketVal {
          get { return result.hasMarketVal; }
        }
        public double MarketVal {
          get { return result.MarketVal; }
          set { SetMarketVal(value); }
        }
        public Builder SetMarketVal(double value) {
          PrepareBuilder();
          result.hasMarketVal = true;
          result.marketVal_ = value;
          return this;
        }
        public Builder ClearMarketVal() {
          PrepareBuilder();
          result.hasMarketVal = false;
          result.marketVal_ = 0D;
          return this;
        }
        
        public bool HasFrozenCash {
          get { return result.hasFrozenCash; }
        }
        public double FrozenCash {
          get { return result.FrozenCash; }
          set { SetFrozenCash(value); }
        }
        public Builder SetFrozenCash(double value) {
          PrepareBuilder();
          result.hasFrozenCash = true;
          result.frozenCash_ = value;
          return this;
        }
        public Builder ClearFrozenCash() {
          PrepareBuilder();
          result.hasFrozenCash = false;
          result.frozenCash_ = 0D;
          return this;
        }
        
        public bool HasDebtCash {
          get { return result.hasDebtCash; }
        }
        public double DebtCash {
          get { return result.DebtCash; }
          set { SetDebtCash(value); }
        }
        public Builder SetDebtCash(double value) {
          PrepareBuilder();
          result.hasDebtCash = true;
          result.debtCash_ = value;
          return this;
        }
        public Builder ClearDebtCash() {
          PrepareBuilder();
          result.hasDebtCash = false;
          result.debtCash_ = 0D;
          return this;
        }
        
        public bool HasAvlWithdrawalCash {
          get { return result.hasAvlWithdrawalCash; }
        }
        public double AvlWithdrawalCash {
          get { return result.AvlWithdrawalCash; }
          set { SetAvlWithdrawalCash(value); }
        }
        public Builder SetAvlWithdrawalCash(double value) {
          PrepareBuilder();
          result.hasAvlWithdrawalCash = true;
          result.avlWithdrawalCash_ = value;
          return this;
        }
        public Builder ClearAvlWithdrawalCash() {
          PrepareBuilder();
          result.hasAvlWithdrawalCash = false;
          result.avlWithdrawalCash_ = 0D;
          return this;
        }
      }
      static Funds() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Position : pb::GeneratedMessage<Position, Position.Builder> {
      private Position() { }
      private static readonly Position defaultInstance = new Position().MakeReadOnly();
      private static readonly string[] _positionFieldNames = new string[] { "canSellQty", "code", "costPrice", "name", "plRatio", "plVal", "positionID", "positionSide", "price", "qty", "secMarket", "td_buyQty", "td_buyVal", "td_plVal", "td_sellQty", "td_sellVal", "td_trdVal", "val" };
      private static readonly uint[] _positionFieldTags = new uint[] { 49, 26, 65, 34, 89, 81, 8, 16, 57, 41, 96, 193, 185, 169, 209, 201, 177, 73 };
      public static Position DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Position DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Position ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_Position__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Position, Position.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_Position__FieldAccessorTable; }
      }
      
      public const int PositionIDFieldNumber = 1;
      private bool hasPositionID;
      private ulong positionID_;
      public bool HasPositionID {
        get { return hasPositionID; }
      }
      [global::System.CLSCompliant(false)]
      public ulong PositionID {
        get { return positionID_; }
      }
      
      public const int PositionSideFieldNumber = 2;
      private bool hasPositionSide;
      private int positionSide_;
      public bool HasPositionSide {
        get { return hasPositionSide; }
      }
      public int PositionSide {
        get { return positionSide_; }
      }
      
      public const int CodeFieldNumber = 3;
      private bool hasCode;
      private string code_ = "";
      public bool HasCode {
        get { return hasCode; }
      }
      public string Code {
        get { return code_; }
      }
      
      public const int NameFieldNumber = 4;
      private bool hasName;
      private string name_ = "";
      public bool HasName {
        get { return hasName; }
      }
      public string Name {
        get { return name_; }
      }
      
      public const int QtyFieldNumber = 5;
      private bool hasQty;
      private double qty_;
      public bool HasQty {
        get { return hasQty; }
      }
      public double Qty {
        get { return qty_; }
      }
      
      public const int CanSellQtyFieldNumber = 6;
      private bool hasCanSellQty;
      private double canSellQty_;
      public bool HasCanSellQty {
        get { return hasCanSellQty; }
      }
      public double CanSellQty {
        get { return canSellQty_; }
      }
      
      public const int PriceFieldNumber = 7;
      private bool hasPrice;
      private double price_;
      public bool HasPrice {
        get { return hasPrice; }
      }
      public double Price {
        get { return price_; }
      }
      
      public const int CostPriceFieldNumber = 8;
      private bool hasCostPrice;
      private double costPrice_;
      public bool HasCostPrice {
        get { return hasCostPrice; }
      }
      public double CostPrice {
        get { return costPrice_; }
      }
      
      public const int ValFieldNumber = 9;
      private bool hasVal;
      private double val_;
      public bool HasVal {
        get { return hasVal; }
      }
      public double Val {
        get { return val_; }
      }
      
      public const int PlValFieldNumber = 10;
      private bool hasPlVal;
      private double plVal_;
      public bool HasPlVal {
        get { return hasPlVal; }
      }
      public double PlVal {
        get { return plVal_; }
      }
      
      public const int PlRatioFieldNumber = 11;
      private bool hasPlRatio;
      private double plRatio_;
      public bool HasPlRatio {
        get { return hasPlRatio; }
      }
      public double PlRatio {
        get { return plRatio_; }
      }
      
      public const int SecMarketFieldNumber = 12;
      private bool hasSecMarket;
      private int secMarket_;
      public bool HasSecMarket {
        get { return hasSecMarket; }
      }
      public int SecMarket {
        get { return secMarket_; }
      }
      
      public const int TdPlValFieldNumber = 21;
      private bool hasTdPlVal;
      private double tdPlVal_;
      public bool HasTdPlVal {
        get { return hasTdPlVal; }
      }
      public double TdPlVal {
        get { return tdPlVal_; }
      }
      
      public const int TdTrdValFieldNumber = 22;
      private bool hasTdTrdVal;
      private double tdTrdVal_;
      public bool HasTdTrdVal {
        get { return hasTdTrdVal; }
      }
      public double TdTrdVal {
        get { return tdTrdVal_; }
      }
      
      public const int TdBuyValFieldNumber = 23;
      private bool hasTdBuyVal;
      private double tdBuyVal_;
      public bool HasTdBuyVal {
        get { return hasTdBuyVal; }
      }
      public double TdBuyVal {
        get { return tdBuyVal_; }
      }
      
      public const int TdBuyQtyFieldNumber = 24;
      private bool hasTdBuyQty;
      private double tdBuyQty_;
      public bool HasTdBuyQty {
        get { return hasTdBuyQty; }
      }
      public double TdBuyQty {
        get { return tdBuyQty_; }
      }
      
      public const int TdSellValFieldNumber = 25;
      private bool hasTdSellVal;
      private double tdSellVal_;
      public bool HasTdSellVal {
        get { return hasTdSellVal; }
      }
      public double TdSellVal {
        get { return tdSellVal_; }
      }
      
      public const int TdSellQtyFieldNumber = 26;
      private bool hasTdSellQty;
      private double tdSellQty_;
      public bool HasTdSellQty {
        get { return hasTdSellQty; }
      }
      public double TdSellQty {
        get { return tdSellQty_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasPositionID) return false;
          if (!hasPositionSide) return false;
          if (!hasCode) return false;
          if (!hasName) return false;
          if (!hasQty) return false;
          if (!hasCanSellQty) return false;
          if (!hasPrice) return false;
          if (!hasVal) return false;
          if (!hasPlVal) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _positionFieldNames;
        if (hasPositionID) {
          output.WriteUInt64(1, field_names[6], PositionID);
        }
        if (hasPositionSide) {
          output.WriteInt32(2, field_names[7], PositionSide);
        }
        if (hasCode) {
          output.WriteString(3, field_names[1], Code);
        }
        if (hasName) {
          output.WriteString(4, field_names[3], Name);
        }
        if (hasQty) {
          output.WriteDouble(5, field_names[9], Qty);
        }
        if (hasCanSellQty) {
          output.WriteDouble(6, field_names[0], CanSellQty);
        }
        if (hasPrice) {
          output.WriteDouble(7, field_names[8], Price);
        }
        if (hasCostPrice) {
          output.WriteDouble(8, field_names[2], CostPrice);
        }
        if (hasVal) {
          output.WriteDouble(9, field_names[17], Val);
        }
        if (hasPlVal) {
          output.WriteDouble(10, field_names[5], PlVal);
        }
        if (hasPlRatio) {
          output.WriteDouble(11, field_names[4], PlRatio);
        }
        if (hasSecMarket) {
          output.WriteInt32(12, field_names[10], SecMarket);
        }
        if (hasTdPlVal) {
          output.WriteDouble(21, field_names[13], TdPlVal);
        }
        if (hasTdTrdVal) {
          output.WriteDouble(22, field_names[16], TdTrdVal);
        }
        if (hasTdBuyVal) {
          output.WriteDouble(23, field_names[12], TdBuyVal);
        }
        if (hasTdBuyQty) {
          output.WriteDouble(24, field_names[11], TdBuyQty);
        }
        if (hasTdSellVal) {
          output.WriteDouble(25, field_names[15], TdSellVal);
        }
        if (hasTdSellQty) {
          output.WriteDouble(26, field_names[14], TdSellQty);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPositionID) {
          size += pb::CodedOutputStream.ComputeUInt64Size(1, PositionID);
        }
        if (hasPositionSide) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, PositionSide);
        }
        if (hasCode) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Code);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Name);
        }
        if (hasQty) {
          size += pb::CodedOutputStream.ComputeDoubleSize(5, Qty);
        }
        if (hasCanSellQty) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, CanSellQty);
        }
        if (hasPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, Price);
        }
        if (hasCostPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, CostPrice);
        }
        if (hasVal) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, Val);
        }
        if (hasPlVal) {
          size += pb::CodedOutputStream.ComputeDoubleSize(10, PlVal);
        }
        if (hasPlRatio) {
          size += pb::CodedOutputStream.ComputeDoubleSize(11, PlRatio);
        }
        if (hasSecMarket) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, SecMarket);
        }
        if (hasTdPlVal) {
          size += pb::CodedOutputStream.ComputeDoubleSize(21, TdPlVal);
        }
        if (hasTdTrdVal) {
          size += pb::CodedOutputStream.ComputeDoubleSize(22, TdTrdVal);
        }
        if (hasTdBuyVal) {
          size += pb::CodedOutputStream.ComputeDoubleSize(23, TdBuyVal);
        }
        if (hasTdBuyQty) {
          size += pb::CodedOutputStream.ComputeDoubleSize(24, TdBuyQty);
        }
        if (hasTdSellVal) {
          size += pb::CodedOutputStream.ComputeDoubleSize(25, TdSellVal);
        }
        if (hasTdSellQty) {
          size += pb::CodedOutputStream.ComputeDoubleSize(26, TdSellQty);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Position ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Position ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Position ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Position ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Position ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Position ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Position ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Position ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Position ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Position ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Position MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Position prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Position, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Position cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Position result;
        
        private Position PrepareBuilder() {
          if (resultIsReadOnly) {
            Position original = result;
            result = new Position();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Position MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.Position.Descriptor; }
        }
        
        public override Position DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.Position.DefaultInstance; }
        }
        
        public override Position BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Position) {
            return MergeFrom((Position) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Position other) {
          if (other == global::Futu.OpenApi.Pb.TrdCommon.Position.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasPositionID) {
            PositionID = other.PositionID;
          }
          if (other.HasPositionSide) {
            PositionSide = other.PositionSide;
          }
          if (other.HasCode) {
            Code = other.Code;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasQty) {
            Qty = other.Qty;
          }
          if (other.HasCanSellQty) {
            CanSellQty = other.CanSellQty;
          }
          if (other.HasPrice) {
            Price = other.Price;
          }
          if (other.HasCostPrice) {
            CostPrice = other.CostPrice;
          }
          if (other.HasVal) {
            Val = other.Val;
          }
          if (other.HasPlVal) {
            PlVal = other.PlVal;
          }
          if (other.HasPlRatio) {
            PlRatio = other.PlRatio;
          }
          if (other.HasSecMarket) {
            SecMarket = other.SecMarket;
          }
          if (other.HasTdPlVal) {
            TdPlVal = other.TdPlVal;
          }
          if (other.HasTdTrdVal) {
            TdTrdVal = other.TdTrdVal;
          }
          if (other.HasTdBuyVal) {
            TdBuyVal = other.TdBuyVal;
          }
          if (other.HasTdBuyQty) {
            TdBuyQty = other.TdBuyQty;
          }
          if (other.HasTdSellVal) {
            TdSellVal = other.TdSellVal;
          }
          if (other.HasTdSellQty) {
            TdSellQty = other.TdSellQty;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_positionFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _positionFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasPositionID = input.ReadUInt64(ref result.positionID_);
                break;
              }
              case 16: {
                result.hasPositionSide = input.ReadInt32(ref result.positionSide_);
                break;
              }
              case 26: {
                result.hasCode = input.ReadString(ref result.code_);
                break;
              }
              case 34: {
                result.hasName = input.ReadString(ref result.name_);
                break;
              }
              case 41: {
                result.hasQty = input.ReadDouble(ref result.qty_);
                break;
              }
              case 49: {
                result.hasCanSellQty = input.ReadDouble(ref result.canSellQty_);
                break;
              }
              case 57: {
                result.hasPrice = input.ReadDouble(ref result.price_);
                break;
              }
              case 65: {
                result.hasCostPrice = input.ReadDouble(ref result.costPrice_);
                break;
              }
              case 73: {
                result.hasVal = input.ReadDouble(ref result.val_);
                break;
              }
              case 81: {
                result.hasPlVal = input.ReadDouble(ref result.plVal_);
                break;
              }
              case 89: {
                result.hasPlRatio = input.ReadDouble(ref result.plRatio_);
                break;
              }
              case 96: {
                result.hasSecMarket = input.ReadInt32(ref result.secMarket_);
                break;
              }
              case 169: {
                result.hasTdPlVal = input.ReadDouble(ref result.tdPlVal_);
                break;
              }
              case 177: {
                result.hasTdTrdVal = input.ReadDouble(ref result.tdTrdVal_);
                break;
              }
              case 185: {
                result.hasTdBuyVal = input.ReadDouble(ref result.tdBuyVal_);
                break;
              }
              case 193: {
                result.hasTdBuyQty = input.ReadDouble(ref result.tdBuyQty_);
                break;
              }
              case 201: {
                result.hasTdSellVal = input.ReadDouble(ref result.tdSellVal_);
                break;
              }
              case 209: {
                result.hasTdSellQty = input.ReadDouble(ref result.tdSellQty_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasPositionID {
          get { return result.hasPositionID; }
        }
        [global::System.CLSCompliant(false)]
        public ulong PositionID {
          get { return result.PositionID; }
          set { SetPositionID(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetPositionID(ulong value) {
          PrepareBuilder();
          result.hasPositionID = true;
          result.positionID_ = value;
          return this;
        }
        public Builder ClearPositionID() {
          PrepareBuilder();
          result.hasPositionID = false;
          result.positionID_ = 0UL;
          return this;
        }
        
        public bool HasPositionSide {
          get { return result.hasPositionSide; }
        }
        public int PositionSide {
          get { return result.PositionSide; }
          set { SetPositionSide(value); }
        }
        public Builder SetPositionSide(int value) {
          PrepareBuilder();
          result.hasPositionSide = true;
          result.positionSide_ = value;
          return this;
        }
        public Builder ClearPositionSide() {
          PrepareBuilder();
          result.hasPositionSide = false;
          result.positionSide_ = 0;
          return this;
        }
        
        public bool HasCode {
          get { return result.hasCode; }
        }
        public string Code {
          get { return result.Code; }
          set { SetCode(value); }
        }
        public Builder SetCode(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasCode = true;
          result.code_ = value;
          return this;
        }
        public Builder ClearCode() {
          PrepareBuilder();
          result.hasCode = false;
          result.code_ = "";
          return this;
        }
        
        public bool HasName {
          get { return result.hasName; }
        }
        public string Name {
          get { return result.Name; }
          set { SetName(value); }
        }
        public Builder SetName(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasName = true;
          result.name_ = value;
          return this;
        }
        public Builder ClearName() {
          PrepareBuilder();
          result.hasName = false;
          result.name_ = "";
          return this;
        }
        
        public bool HasQty {
          get { return result.hasQty; }
        }
        public double Qty {
          get { return result.Qty; }
          set { SetQty(value); }
        }
        public Builder SetQty(double value) {
          PrepareBuilder();
          result.hasQty = true;
          result.qty_ = value;
          return this;
        }
        public Builder ClearQty() {
          PrepareBuilder();
          result.hasQty = false;
          result.qty_ = 0D;
          return this;
        }
        
        public bool HasCanSellQty {
          get { return result.hasCanSellQty; }
        }
        public double CanSellQty {
          get { return result.CanSellQty; }
          set { SetCanSellQty(value); }
        }
        public Builder SetCanSellQty(double value) {
          PrepareBuilder();
          result.hasCanSellQty = true;
          result.canSellQty_ = value;
          return this;
        }
        public Builder ClearCanSellQty() {
          PrepareBuilder();
          result.hasCanSellQty = false;
          result.canSellQty_ = 0D;
          return this;
        }
        
        public bool HasPrice {
          get { return result.hasPrice; }
        }
        public double Price {
          get { return result.Price; }
          set { SetPrice(value); }
        }
        public Builder SetPrice(double value) {
          PrepareBuilder();
          result.hasPrice = true;
          result.price_ = value;
          return this;
        }
        public Builder ClearPrice() {
          PrepareBuilder();
          result.hasPrice = false;
          result.price_ = 0D;
          return this;
        }
        
        public bool HasCostPrice {
          get { return result.hasCostPrice; }
        }
        public double CostPrice {
          get { return result.CostPrice; }
          set { SetCostPrice(value); }
        }
        public Builder SetCostPrice(double value) {
          PrepareBuilder();
          result.hasCostPrice = true;
          result.costPrice_ = value;
          return this;
        }
        public Builder ClearCostPrice() {
          PrepareBuilder();
          result.hasCostPrice = false;
          result.costPrice_ = 0D;
          return this;
        }
        
        public bool HasVal {
          get { return result.hasVal; }
        }
        public double Val {
          get { return result.Val; }
          set { SetVal(value); }
        }
        public Builder SetVal(double value) {
          PrepareBuilder();
          result.hasVal = true;
          result.val_ = value;
          return this;
        }
        public Builder ClearVal() {
          PrepareBuilder();
          result.hasVal = false;
          result.val_ = 0D;
          return this;
        }
        
        public bool HasPlVal {
          get { return result.hasPlVal; }
        }
        public double PlVal {
          get { return result.PlVal; }
          set { SetPlVal(value); }
        }
        public Builder SetPlVal(double value) {
          PrepareBuilder();
          result.hasPlVal = true;
          result.plVal_ = value;
          return this;
        }
        public Builder ClearPlVal() {
          PrepareBuilder();
          result.hasPlVal = false;
          result.plVal_ = 0D;
          return this;
        }
        
        public bool HasPlRatio {
          get { return result.hasPlRatio; }
        }
        public double PlRatio {
          get { return result.PlRatio; }
          set { SetPlRatio(value); }
        }
        public Builder SetPlRatio(double value) {
          PrepareBuilder();
          result.hasPlRatio = true;
          result.plRatio_ = value;
          return this;
        }
        public Builder ClearPlRatio() {
          PrepareBuilder();
          result.hasPlRatio = false;
          result.plRatio_ = 0D;
          return this;
        }
        
        public bool HasSecMarket {
          get { return result.hasSecMarket; }
        }
        public int SecMarket {
          get { return result.SecMarket; }
          set { SetSecMarket(value); }
        }
        public Builder SetSecMarket(int value) {
          PrepareBuilder();
          result.hasSecMarket = true;
          result.secMarket_ = value;
          return this;
        }
        public Builder ClearSecMarket() {
          PrepareBuilder();
          result.hasSecMarket = false;
          result.secMarket_ = 0;
          return this;
        }
        
        public bool HasTdPlVal {
          get { return result.hasTdPlVal; }
        }
        public double TdPlVal {
          get { return result.TdPlVal; }
          set { SetTdPlVal(value); }
        }
        public Builder SetTdPlVal(double value) {
          PrepareBuilder();
          result.hasTdPlVal = true;
          result.tdPlVal_ = value;
          return this;
        }
        public Builder ClearTdPlVal() {
          PrepareBuilder();
          result.hasTdPlVal = false;
          result.tdPlVal_ = 0D;
          return this;
        }
        
        public bool HasTdTrdVal {
          get { return result.hasTdTrdVal; }
        }
        public double TdTrdVal {
          get { return result.TdTrdVal; }
          set { SetTdTrdVal(value); }
        }
        public Builder SetTdTrdVal(double value) {
          PrepareBuilder();
          result.hasTdTrdVal = true;
          result.tdTrdVal_ = value;
          return this;
        }
        public Builder ClearTdTrdVal() {
          PrepareBuilder();
          result.hasTdTrdVal = false;
          result.tdTrdVal_ = 0D;
          return this;
        }
        
        public bool HasTdBuyVal {
          get { return result.hasTdBuyVal; }
        }
        public double TdBuyVal {
          get { return result.TdBuyVal; }
          set { SetTdBuyVal(value); }
        }
        public Builder SetTdBuyVal(double value) {
          PrepareBuilder();
          result.hasTdBuyVal = true;
          result.tdBuyVal_ = value;
          return this;
        }
        public Builder ClearTdBuyVal() {
          PrepareBuilder();
          result.hasTdBuyVal = false;
          result.tdBuyVal_ = 0D;
          return this;
        }
        
        public bool HasTdBuyQty {
          get { return result.hasTdBuyQty; }
        }
        public double TdBuyQty {
          get { return result.TdBuyQty; }
          set { SetTdBuyQty(value); }
        }
        public Builder SetTdBuyQty(double value) {
          PrepareBuilder();
          result.hasTdBuyQty = true;
          result.tdBuyQty_ = value;
          return this;
        }
        public Builder ClearTdBuyQty() {
          PrepareBuilder();
          result.hasTdBuyQty = false;
          result.tdBuyQty_ = 0D;
          return this;
        }
        
        public bool HasTdSellVal {
          get { return result.hasTdSellVal; }
        }
        public double TdSellVal {
          get { return result.TdSellVal; }
          set { SetTdSellVal(value); }
        }
        public Builder SetTdSellVal(double value) {
          PrepareBuilder();
          result.hasTdSellVal = true;
          result.tdSellVal_ = value;
          return this;
        }
        public Builder ClearTdSellVal() {
          PrepareBuilder();
          result.hasTdSellVal = false;
          result.tdSellVal_ = 0D;
          return this;
        }
        
        public bool HasTdSellQty {
          get { return result.hasTdSellQty; }
        }
        public double TdSellQty {
          get { return result.TdSellQty; }
          set { SetTdSellQty(value); }
        }
        public Builder SetTdSellQty(double value) {
          PrepareBuilder();
          result.hasTdSellQty = true;
          result.tdSellQty_ = value;
          return this;
        }
        public Builder ClearTdSellQty() {
          PrepareBuilder();
          result.hasTdSellQty = false;
          result.tdSellQty_ = 0D;
          return this;
        }
      }
      static Position() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Order : pb::GeneratedMessage<Order, Order.Builder> {
      private Order() { }
      private static readonly Order defaultInstance = new Order().MakeReadOnly();
      private static readonly string[] _orderFieldNames = new string[] { "code", "createTime", "createTimestamp", "fillAvgPrice", "fillQty", "lastErrMsg", "name", "orderID", "orderIDEx", "orderStatus", "orderType", "price", "qty", "remark", "secMarket", "trdSide", "updateTime", "updateTimestamp" };
      private static readonly uint[] _orderFieldTags = new uint[] { 50, 82, 129, 105, 97, 114, 58, 32, 42, 24, 16, 73, 65, 146, 120, 8, 90, 137 };
      public static Order DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Order DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Order ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_Order__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Order, Order.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_Order__FieldAccessorTable; }
      }
      
      public const int TrdSideFieldNumber = 1;
      private bool hasTrdSide;
      private int trdSide_;
      public bool HasTrdSide {
        get { return hasTrdSide; }
      }
      public int TrdSide {
        get { return trdSide_; }
      }
      
      public const int OrderTypeFieldNumber = 2;
      private bool hasOrderType;
      private int orderType_;
      public bool HasOrderType {
        get { return hasOrderType; }
      }
      public int OrderType {
        get { return orderType_; }
      }
      
      public const int OrderStatusFieldNumber = 3;
      private bool hasOrderStatus;
      private int orderStatus_;
      public bool HasOrderStatus {
        get { return hasOrderStatus; }
      }
      public int OrderStatus {
        get { return orderStatus_; }
      }
      
      public const int OrderIDFieldNumber = 4;
      private bool hasOrderID;
      private ulong orderID_;
      public bool HasOrderID {
        get { return hasOrderID; }
      }
      [global::System.CLSCompliant(false)]
      public ulong OrderID {
        get { return orderID_; }
      }
      
      public const int OrderIDExFieldNumber = 5;
      private bool hasOrderIDEx;
      private string orderIDEx_ = "";
      public bool HasOrderIDEx {
        get { return hasOrderIDEx; }
      }
      public string OrderIDEx {
        get { return orderIDEx_; }
      }
      
      public const int CodeFieldNumber = 6;
      private bool hasCode;
      private string code_ = "";
      public bool HasCode {
        get { return hasCode; }
      }
      public string Code {
        get { return code_; }
      }
      
      public const int NameFieldNumber = 7;
      private bool hasName;
      private string name_ = "";
      public bool HasName {
        get { return hasName; }
      }
      public string Name {
        get { return name_; }
      }
      
      public const int QtyFieldNumber = 8;
      private bool hasQty;
      private double qty_;
      public bool HasQty {
        get { return hasQty; }
      }
      public double Qty {
        get { return qty_; }
      }
      
      public const int PriceFieldNumber = 9;
      private bool hasPrice;
      private double price_;
      public bool HasPrice {
        get { return hasPrice; }
      }
      public double Price {
        get { return price_; }
      }
      
      public const int CreateTimeFieldNumber = 10;
      private bool hasCreateTime;
      private string createTime_ = "";
      public bool HasCreateTime {
        get { return hasCreateTime; }
      }
      public string CreateTime {
        get { return createTime_; }
      }
      
      public const int UpdateTimeFieldNumber = 11;
      private bool hasUpdateTime;
      private string updateTime_ = "";
      public bool HasUpdateTime {
        get { return hasUpdateTime; }
      }
      public string UpdateTime {
        get { return updateTime_; }
      }
      
      public const int FillQtyFieldNumber = 12;
      private bool hasFillQty;
      private double fillQty_;
      public bool HasFillQty {
        get { return hasFillQty; }
      }
      public double FillQty {
        get { return fillQty_; }
      }
      
      public const int FillAvgPriceFieldNumber = 13;
      private bool hasFillAvgPrice;
      private double fillAvgPrice_;
      public bool HasFillAvgPrice {
        get { return hasFillAvgPrice; }
      }
      public double FillAvgPrice {
        get { return fillAvgPrice_; }
      }
      
      public const int LastErrMsgFieldNumber = 14;
      private bool hasLastErrMsg;
      private string lastErrMsg_ = "";
      public bool HasLastErrMsg {
        get { return hasLastErrMsg; }
      }
      public string LastErrMsg {
        get { return lastErrMsg_; }
      }
      
      public const int SecMarketFieldNumber = 15;
      private bool hasSecMarket;
      private int secMarket_;
      public bool HasSecMarket {
        get { return hasSecMarket; }
      }
      public int SecMarket {
        get { return secMarket_; }
      }
      
      public const int CreateTimestampFieldNumber = 16;
      private bool hasCreateTimestamp;
      private double createTimestamp_;
      public bool HasCreateTimestamp {
        get { return hasCreateTimestamp; }
      }
      public double CreateTimestamp {
        get { return createTimestamp_; }
      }
      
      public const int UpdateTimestampFieldNumber = 17;
      private bool hasUpdateTimestamp;
      private double updateTimestamp_;
      public bool HasUpdateTimestamp {
        get { return hasUpdateTimestamp; }
      }
      public double UpdateTimestamp {
        get { return updateTimestamp_; }
      }
      
      public const int RemarkFieldNumber = 18;
      private bool hasRemark;
      private string remark_ = "";
      public bool HasRemark {
        get { return hasRemark; }
      }
      public string Remark {
        get { return remark_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasTrdSide) return false;
          if (!hasOrderType) return false;
          if (!hasOrderStatus) return false;
          if (!hasOrderID) return false;
          if (!hasOrderIDEx) return false;
          if (!hasCode) return false;
          if (!hasName) return false;
          if (!hasQty) return false;
          if (!hasCreateTime) return false;
          if (!hasUpdateTime) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _orderFieldNames;
        if (hasTrdSide) {
          output.WriteInt32(1, field_names[15], TrdSide);
        }
        if (hasOrderType) {
          output.WriteInt32(2, field_names[10], OrderType);
        }
        if (hasOrderStatus) {
          output.WriteInt32(3, field_names[9], OrderStatus);
        }
        if (hasOrderID) {
          output.WriteUInt64(4, field_names[7], OrderID);
        }
        if (hasOrderIDEx) {
          output.WriteString(5, field_names[8], OrderIDEx);
        }
        if (hasCode) {
          output.WriteString(6, field_names[0], Code);
        }
        if (hasName) {
          output.WriteString(7, field_names[6], Name);
        }
        if (hasQty) {
          output.WriteDouble(8, field_names[12], Qty);
        }
        if (hasPrice) {
          output.WriteDouble(9, field_names[11], Price);
        }
        if (hasCreateTime) {
          output.WriteString(10, field_names[1], CreateTime);
        }
        if (hasUpdateTime) {
          output.WriteString(11, field_names[16], UpdateTime);
        }
        if (hasFillQty) {
          output.WriteDouble(12, field_names[4], FillQty);
        }
        if (hasFillAvgPrice) {
          output.WriteDouble(13, field_names[3], FillAvgPrice);
        }
        if (hasLastErrMsg) {
          output.WriteString(14, field_names[5], LastErrMsg);
        }
        if (hasSecMarket) {
          output.WriteInt32(15, field_names[14], SecMarket);
        }
        if (hasCreateTimestamp) {
          output.WriteDouble(16, field_names[2], CreateTimestamp);
        }
        if (hasUpdateTimestamp) {
          output.WriteDouble(17, field_names[17], UpdateTimestamp);
        }
        if (hasRemark) {
          output.WriteString(18, field_names[13], Remark);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTrdSide) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, TrdSide);
        }
        if (hasOrderType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, OrderType);
        }
        if (hasOrderStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, OrderStatus);
        }
        if (hasOrderID) {
          size += pb::CodedOutputStream.ComputeUInt64Size(4, OrderID);
        }
        if (hasOrderIDEx) {
          size += pb::CodedOutputStream.ComputeStringSize(5, OrderIDEx);
        }
        if (hasCode) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Code);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(7, Name);
        }
        if (hasQty) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, Qty);
        }
        if (hasPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, Price);
        }
        if (hasCreateTime) {
          size += pb::CodedOutputStream.ComputeStringSize(10, CreateTime);
        }
        if (hasUpdateTime) {
          size += pb::CodedOutputStream.ComputeStringSize(11, UpdateTime);
        }
        if (hasFillQty) {
          size += pb::CodedOutputStream.ComputeDoubleSize(12, FillQty);
        }
        if (hasFillAvgPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(13, FillAvgPrice);
        }
        if (hasLastErrMsg) {
          size += pb::CodedOutputStream.ComputeStringSize(14, LastErrMsg);
        }
        if (hasSecMarket) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, SecMarket);
        }
        if (hasCreateTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(16, CreateTimestamp);
        }
        if (hasUpdateTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(17, UpdateTimestamp);
        }
        if (hasRemark) {
          size += pb::CodedOutputStream.ComputeStringSize(18, Remark);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static Order ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Order ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Order ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Order ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Order ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Order ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Order ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Order ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Order ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Order ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Order MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Order prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Order, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Order cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Order result;
        
        private Order PrepareBuilder() {
          if (resultIsReadOnly) {
            Order original = result;
            result = new Order();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Order MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.Order.Descriptor; }
        }
        
        public override Order DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.Order.DefaultInstance; }
        }
        
        public override Order BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Order) {
            return MergeFrom((Order) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Order other) {
          if (other == global::Futu.OpenApi.Pb.TrdCommon.Order.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasTrdSide) {
            TrdSide = other.TrdSide;
          }
          if (other.HasOrderType) {
            OrderType = other.OrderType;
          }
          if (other.HasOrderStatus) {
            OrderStatus = other.OrderStatus;
          }
          if (other.HasOrderID) {
            OrderID = other.OrderID;
          }
          if (other.HasOrderIDEx) {
            OrderIDEx = other.OrderIDEx;
          }
          if (other.HasCode) {
            Code = other.Code;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasQty) {
            Qty = other.Qty;
          }
          if (other.HasPrice) {
            Price = other.Price;
          }
          if (other.HasCreateTime) {
            CreateTime = other.CreateTime;
          }
          if (other.HasUpdateTime) {
            UpdateTime = other.UpdateTime;
          }
          if (other.HasFillQty) {
            FillQty = other.FillQty;
          }
          if (other.HasFillAvgPrice) {
            FillAvgPrice = other.FillAvgPrice;
          }
          if (other.HasLastErrMsg) {
            LastErrMsg = other.LastErrMsg;
          }
          if (other.HasSecMarket) {
            SecMarket = other.SecMarket;
          }
          if (other.HasCreateTimestamp) {
            CreateTimestamp = other.CreateTimestamp;
          }
          if (other.HasUpdateTimestamp) {
            UpdateTimestamp = other.UpdateTimestamp;
          }
          if (other.HasRemark) {
            Remark = other.Remark;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_orderFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _orderFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasTrdSide = input.ReadInt32(ref result.trdSide_);
                break;
              }
              case 16: {
                result.hasOrderType = input.ReadInt32(ref result.orderType_);
                break;
              }
              case 24: {
                result.hasOrderStatus = input.ReadInt32(ref result.orderStatus_);
                break;
              }
              case 32: {
                result.hasOrderID = input.ReadUInt64(ref result.orderID_);
                break;
              }
              case 42: {
                result.hasOrderIDEx = input.ReadString(ref result.orderIDEx_);
                break;
              }
              case 50: {
                result.hasCode = input.ReadString(ref result.code_);
                break;
              }
              case 58: {
                result.hasName = input.ReadString(ref result.name_);
                break;
              }
              case 65: {
                result.hasQty = input.ReadDouble(ref result.qty_);
                break;
              }
              case 73: {
                result.hasPrice = input.ReadDouble(ref result.price_);
                break;
              }
              case 82: {
                result.hasCreateTime = input.ReadString(ref result.createTime_);
                break;
              }
              case 90: {
                result.hasUpdateTime = input.ReadString(ref result.updateTime_);
                break;
              }
              case 97: {
                result.hasFillQty = input.ReadDouble(ref result.fillQty_);
                break;
              }
              case 105: {
                result.hasFillAvgPrice = input.ReadDouble(ref result.fillAvgPrice_);
                break;
              }
              case 114: {
                result.hasLastErrMsg = input.ReadString(ref result.lastErrMsg_);
                break;
              }
              case 120: {
                result.hasSecMarket = input.ReadInt32(ref result.secMarket_);
                break;
              }
              case 129: {
                result.hasCreateTimestamp = input.ReadDouble(ref result.createTimestamp_);
                break;
              }
              case 137: {
                result.hasUpdateTimestamp = input.ReadDouble(ref result.updateTimestamp_);
                break;
              }
              case 146: {
                result.hasRemark = input.ReadString(ref result.remark_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasTrdSide {
          get { return result.hasTrdSide; }
        }
        public int TrdSide {
          get { return result.TrdSide; }
          set { SetTrdSide(value); }
        }
        public Builder SetTrdSide(int value) {
          PrepareBuilder();
          result.hasTrdSide = true;
          result.trdSide_ = value;
          return this;
        }
        public Builder ClearTrdSide() {
          PrepareBuilder();
          result.hasTrdSide = false;
          result.trdSide_ = 0;
          return this;
        }
        
        public bool HasOrderType {
          get { return result.hasOrderType; }
        }
        public int OrderType {
          get { return result.OrderType; }
          set { SetOrderType(value); }
        }
        public Builder SetOrderType(int value) {
          PrepareBuilder();
          result.hasOrderType = true;
          result.orderType_ = value;
          return this;
        }
        public Builder ClearOrderType() {
          PrepareBuilder();
          result.hasOrderType = false;
          result.orderType_ = 0;
          return this;
        }
        
        public bool HasOrderStatus {
          get { return result.hasOrderStatus; }
        }
        public int OrderStatus {
          get { return result.OrderStatus; }
          set { SetOrderStatus(value); }
        }
        public Builder SetOrderStatus(int value) {
          PrepareBuilder();
          result.hasOrderStatus = true;
          result.orderStatus_ = value;
          return this;
        }
        public Builder ClearOrderStatus() {
          PrepareBuilder();
          result.hasOrderStatus = false;
          result.orderStatus_ = 0;
          return this;
        }
        
        public bool HasOrderID {
          get { return result.hasOrderID; }
        }
        [global::System.CLSCompliant(false)]
        public ulong OrderID {
          get { return result.OrderID; }
          set { SetOrderID(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetOrderID(ulong value) {
          PrepareBuilder();
          result.hasOrderID = true;
          result.orderID_ = value;
          return this;
        }
        public Builder ClearOrderID() {
          PrepareBuilder();
          result.hasOrderID = false;
          result.orderID_ = 0UL;
          return this;
        }
        
        public bool HasOrderIDEx {
          get { return result.hasOrderIDEx; }
        }
        public string OrderIDEx {
          get { return result.OrderIDEx; }
          set { SetOrderIDEx(value); }
        }
        public Builder SetOrderIDEx(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasOrderIDEx = true;
          result.orderIDEx_ = value;
          return this;
        }
        public Builder ClearOrderIDEx() {
          PrepareBuilder();
          result.hasOrderIDEx = false;
          result.orderIDEx_ = "";
          return this;
        }
        
        public bool HasCode {
          get { return result.hasCode; }
        }
        public string Code {
          get { return result.Code; }
          set { SetCode(value); }
        }
        public Builder SetCode(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasCode = true;
          result.code_ = value;
          return this;
        }
        public Builder ClearCode() {
          PrepareBuilder();
          result.hasCode = false;
          result.code_ = "";
          return this;
        }
        
        public bool HasName {
          get { return result.hasName; }
        }
        public string Name {
          get { return result.Name; }
          set { SetName(value); }
        }
        public Builder SetName(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasName = true;
          result.name_ = value;
          return this;
        }
        public Builder ClearName() {
          PrepareBuilder();
          result.hasName = false;
          result.name_ = "";
          return this;
        }
        
        public bool HasQty {
          get { return result.hasQty; }
        }
        public double Qty {
          get { return result.Qty; }
          set { SetQty(value); }
        }
        public Builder SetQty(double value) {
          PrepareBuilder();
          result.hasQty = true;
          result.qty_ = value;
          return this;
        }
        public Builder ClearQty() {
          PrepareBuilder();
          result.hasQty = false;
          result.qty_ = 0D;
          return this;
        }
        
        public bool HasPrice {
          get { return result.hasPrice; }
        }
        public double Price {
          get { return result.Price; }
          set { SetPrice(value); }
        }
        public Builder SetPrice(double value) {
          PrepareBuilder();
          result.hasPrice = true;
          result.price_ = value;
          return this;
        }
        public Builder ClearPrice() {
          PrepareBuilder();
          result.hasPrice = false;
          result.price_ = 0D;
          return this;
        }
        
        public bool HasCreateTime {
          get { return result.hasCreateTime; }
        }
        public string CreateTime {
          get { return result.CreateTime; }
          set { SetCreateTime(value); }
        }
        public Builder SetCreateTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasCreateTime = true;
          result.createTime_ = value;
          return this;
        }
        public Builder ClearCreateTime() {
          PrepareBuilder();
          result.hasCreateTime = false;
          result.createTime_ = "";
          return this;
        }
        
        public bool HasUpdateTime {
          get { return result.hasUpdateTime; }
        }
        public string UpdateTime {
          get { return result.UpdateTime; }
          set { SetUpdateTime(value); }
        }
        public Builder SetUpdateTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasUpdateTime = true;
          result.updateTime_ = value;
          return this;
        }
        public Builder ClearUpdateTime() {
          PrepareBuilder();
          result.hasUpdateTime = false;
          result.updateTime_ = "";
          return this;
        }
        
        public bool HasFillQty {
          get { return result.hasFillQty; }
        }
        public double FillQty {
          get { return result.FillQty; }
          set { SetFillQty(value); }
        }
        public Builder SetFillQty(double value) {
          PrepareBuilder();
          result.hasFillQty = true;
          result.fillQty_ = value;
          return this;
        }
        public Builder ClearFillQty() {
          PrepareBuilder();
          result.hasFillQty = false;
          result.fillQty_ = 0D;
          return this;
        }
        
        public bool HasFillAvgPrice {
          get { return result.hasFillAvgPrice; }
        }
        public double FillAvgPrice {
          get { return result.FillAvgPrice; }
          set { SetFillAvgPrice(value); }
        }
        public Builder SetFillAvgPrice(double value) {
          PrepareBuilder();
          result.hasFillAvgPrice = true;
          result.fillAvgPrice_ = value;
          return this;
        }
        public Builder ClearFillAvgPrice() {
          PrepareBuilder();
          result.hasFillAvgPrice = false;
          result.fillAvgPrice_ = 0D;
          return this;
        }
        
        public bool HasLastErrMsg {
          get { return result.hasLastErrMsg; }
        }
        public string LastErrMsg {
          get { return result.LastErrMsg; }
          set { SetLastErrMsg(value); }
        }
        public Builder SetLastErrMsg(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasLastErrMsg = true;
          result.lastErrMsg_ = value;
          return this;
        }
        public Builder ClearLastErrMsg() {
          PrepareBuilder();
          result.hasLastErrMsg = false;
          result.lastErrMsg_ = "";
          return this;
        }
        
        public bool HasSecMarket {
          get { return result.hasSecMarket; }
        }
        public int SecMarket {
          get { return result.SecMarket; }
          set { SetSecMarket(value); }
        }
        public Builder SetSecMarket(int value) {
          PrepareBuilder();
          result.hasSecMarket = true;
          result.secMarket_ = value;
          return this;
        }
        public Builder ClearSecMarket() {
          PrepareBuilder();
          result.hasSecMarket = false;
          result.secMarket_ = 0;
          return this;
        }
        
        public bool HasCreateTimestamp {
          get { return result.hasCreateTimestamp; }
        }
        public double CreateTimestamp {
          get { return result.CreateTimestamp; }
          set { SetCreateTimestamp(value); }
        }
        public Builder SetCreateTimestamp(double value) {
          PrepareBuilder();
          result.hasCreateTimestamp = true;
          result.createTimestamp_ = value;
          return this;
        }
        public Builder ClearCreateTimestamp() {
          PrepareBuilder();
          result.hasCreateTimestamp = false;
          result.createTimestamp_ = 0D;
          return this;
        }
        
        public bool HasUpdateTimestamp {
          get { return result.hasUpdateTimestamp; }
        }
        public double UpdateTimestamp {
          get { return result.UpdateTimestamp; }
          set { SetUpdateTimestamp(value); }
        }
        public Builder SetUpdateTimestamp(double value) {
          PrepareBuilder();
          result.hasUpdateTimestamp = true;
          result.updateTimestamp_ = value;
          return this;
        }
        public Builder ClearUpdateTimestamp() {
          PrepareBuilder();
          result.hasUpdateTimestamp = false;
          result.updateTimestamp_ = 0D;
          return this;
        }
        
        public bool HasRemark {
          get { return result.hasRemark; }
        }
        public string Remark {
          get { return result.Remark; }
          set { SetRemark(value); }
        }
        public Builder SetRemark(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasRemark = true;
          result.remark_ = value;
          return this;
        }
        public Builder ClearRemark() {
          PrepareBuilder();
          result.hasRemark = false;
          result.remark_ = "";
          return this;
        }
      }
      static Order() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class OrderFill : pb::GeneratedMessage<OrderFill, OrderFill.Builder> {
      private OrderFill() { }
      private static readonly OrderFill defaultInstance = new OrderFill().MakeReadOnly();
      private static readonly string[] _orderFillFieldNames = new string[] { "code", "counterBrokerID", "counterBrokerName", "createTime", "createTimestamp", "fillID", "fillIDEx", "name", "orderID", "orderIDEx", "price", "qty", "secMarket", "status", "trdSide", "updateTimestamp" };
      private static readonly uint[] _orderFillFieldTags = new uint[] { 50, 88, 98, 82, 113, 16, 26, 58, 32, 42, 73, 65, 104, 128, 8, 121 };
      public static OrderFill DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override OrderFill DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override OrderFill ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_OrderFill__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<OrderFill, OrderFill.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_OrderFill__FieldAccessorTable; }
      }
      
      public const int TrdSideFieldNumber = 1;
      private bool hasTrdSide;
      private int trdSide_;
      public bool HasTrdSide {
        get { return hasTrdSide; }
      }
      public int TrdSide {
        get { return trdSide_; }
      }
      
      public const int FillIDFieldNumber = 2;
      private bool hasFillID;
      private ulong fillID_;
      public bool HasFillID {
        get { return hasFillID; }
      }
      [global::System.CLSCompliant(false)]
      public ulong FillID {
        get { return fillID_; }
      }
      
      public const int FillIDExFieldNumber = 3;
      private bool hasFillIDEx;
      private string fillIDEx_ = "";
      public bool HasFillIDEx {
        get { return hasFillIDEx; }
      }
      public string FillIDEx {
        get { return fillIDEx_; }
      }
      
      public const int OrderIDFieldNumber = 4;
      private bool hasOrderID;
      private ulong orderID_;
      public bool HasOrderID {
        get { return hasOrderID; }
      }
      [global::System.CLSCompliant(false)]
      public ulong OrderID {
        get { return orderID_; }
      }
      
      public const int OrderIDExFieldNumber = 5;
      private bool hasOrderIDEx;
      private string orderIDEx_ = "";
      public bool HasOrderIDEx {
        get { return hasOrderIDEx; }
      }
      public string OrderIDEx {
        get { return orderIDEx_; }
      }
      
      public const int CodeFieldNumber = 6;
      private bool hasCode;
      private string code_ = "";
      public bool HasCode {
        get { return hasCode; }
      }
      public string Code {
        get { return code_; }
      }
      
      public const int NameFieldNumber = 7;
      private bool hasName;
      private string name_ = "";
      public bool HasName {
        get { return hasName; }
      }
      public string Name {
        get { return name_; }
      }
      
      public const int QtyFieldNumber = 8;
      private bool hasQty;
      private double qty_;
      public bool HasQty {
        get { return hasQty; }
      }
      public double Qty {
        get { return qty_; }
      }
      
      public const int PriceFieldNumber = 9;
      private bool hasPrice;
      private double price_;
      public bool HasPrice {
        get { return hasPrice; }
      }
      public double Price {
        get { return price_; }
      }
      
      public const int CreateTimeFieldNumber = 10;
      private bool hasCreateTime;
      private string createTime_ = "";
      public bool HasCreateTime {
        get { return hasCreateTime; }
      }
      public string CreateTime {
        get { return createTime_; }
      }
      
      public const int CounterBrokerIDFieldNumber = 11;
      private bool hasCounterBrokerID;
      private int counterBrokerID_;
      public bool HasCounterBrokerID {
        get { return hasCounterBrokerID; }
      }
      public int CounterBrokerID {
        get { return counterBrokerID_; }
      }
      
      public const int CounterBrokerNameFieldNumber = 12;
      private bool hasCounterBrokerName;
      private string counterBrokerName_ = "";
      public bool HasCounterBrokerName {
        get { return hasCounterBrokerName; }
      }
      public string CounterBrokerName {
        get { return counterBrokerName_; }
      }
      
      public const int SecMarketFieldNumber = 13;
      private bool hasSecMarket;
      private int secMarket_;
      public bool HasSecMarket {
        get { return hasSecMarket; }
      }
      public int SecMarket {
        get { return secMarket_; }
      }
      
      public const int CreateTimestampFieldNumber = 14;
      private bool hasCreateTimestamp;
      private double createTimestamp_;
      public bool HasCreateTimestamp {
        get { return hasCreateTimestamp; }
      }
      public double CreateTimestamp {
        get { return createTimestamp_; }
      }
      
      public const int UpdateTimestampFieldNumber = 15;
      private bool hasUpdateTimestamp;
      private double updateTimestamp_;
      public bool HasUpdateTimestamp {
        get { return hasUpdateTimestamp; }
      }
      public double UpdateTimestamp {
        get { return updateTimestamp_; }
      }
      
      public const int StatusFieldNumber = 16;
      private bool hasStatus;
      private int status_;
      public bool HasStatus {
        get { return hasStatus; }
      }
      public int Status {
        get { return status_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasTrdSide) return false;
          if (!hasFillID) return false;
          if (!hasFillIDEx) return false;
          if (!hasCode) return false;
          if (!hasName) return false;
          if (!hasQty) return false;
          if (!hasPrice) return false;
          if (!hasCreateTime) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _orderFillFieldNames;
        if (hasTrdSide) {
          output.WriteInt32(1, field_names[14], TrdSide);
        }
        if (hasFillID) {
          output.WriteUInt64(2, field_names[5], FillID);
        }
        if (hasFillIDEx) {
          output.WriteString(3, field_names[6], FillIDEx);
        }
        if (hasOrderID) {
          output.WriteUInt64(4, field_names[8], OrderID);
        }
        if (hasOrderIDEx) {
          output.WriteString(5, field_names[9], OrderIDEx);
        }
        if (hasCode) {
          output.WriteString(6, field_names[0], Code);
        }
        if (hasName) {
          output.WriteString(7, field_names[7], Name);
        }
        if (hasQty) {
          output.WriteDouble(8, field_names[11], Qty);
        }
        if (hasPrice) {
          output.WriteDouble(9, field_names[10], Price);
        }
        if (hasCreateTime) {
          output.WriteString(10, field_names[3], CreateTime);
        }
        if (hasCounterBrokerID) {
          output.WriteInt32(11, field_names[1], CounterBrokerID);
        }
        if (hasCounterBrokerName) {
          output.WriteString(12, field_names[2], CounterBrokerName);
        }
        if (hasSecMarket) {
          output.WriteInt32(13, field_names[12], SecMarket);
        }
        if (hasCreateTimestamp) {
          output.WriteDouble(14, field_names[4], CreateTimestamp);
        }
        if (hasUpdateTimestamp) {
          output.WriteDouble(15, field_names[15], UpdateTimestamp);
        }
        if (hasStatus) {
          output.WriteInt32(16, field_names[13], Status);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTrdSide) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, TrdSide);
        }
        if (hasFillID) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, FillID);
        }
        if (hasFillIDEx) {
          size += pb::CodedOutputStream.ComputeStringSize(3, FillIDEx);
        }
        if (hasOrderID) {
          size += pb::CodedOutputStream.ComputeUInt64Size(4, OrderID);
        }
        if (hasOrderIDEx) {
          size += pb::CodedOutputStream.ComputeStringSize(5, OrderIDEx);
        }
        if (hasCode) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Code);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(7, Name);
        }
        if (hasQty) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, Qty);
        }
        if (hasPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, Price);
        }
        if (hasCreateTime) {
          size += pb::CodedOutputStream.ComputeStringSize(10, CreateTime);
        }
        if (hasCounterBrokerID) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, CounterBrokerID);
        }
        if (hasCounterBrokerName) {
          size += pb::CodedOutputStream.ComputeStringSize(12, CounterBrokerName);
        }
        if (hasSecMarket) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, SecMarket);
        }
        if (hasCreateTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(14, CreateTimestamp);
        }
        if (hasUpdateTimestamp) {
          size += pb::CodedOutputStream.ComputeDoubleSize(15, UpdateTimestamp);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(16, Status);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static OrderFill ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static OrderFill ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static OrderFill ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static OrderFill ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static OrderFill ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static OrderFill ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static OrderFill ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static OrderFill ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static OrderFill ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static OrderFill ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private OrderFill MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(OrderFill prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<OrderFill, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(OrderFill cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private OrderFill result;
        
        private OrderFill PrepareBuilder() {
          if (resultIsReadOnly) {
            OrderFill original = result;
            result = new OrderFill();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override OrderFill MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.OrderFill.Descriptor; }
        }
        
        public override OrderFill DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.OrderFill.DefaultInstance; }
        }
        
        public override OrderFill BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is OrderFill) {
            return MergeFrom((OrderFill) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(OrderFill other) {
          if (other == global::Futu.OpenApi.Pb.TrdCommon.OrderFill.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasTrdSide) {
            TrdSide = other.TrdSide;
          }
          if (other.HasFillID) {
            FillID = other.FillID;
          }
          if (other.HasFillIDEx) {
            FillIDEx = other.FillIDEx;
          }
          if (other.HasOrderID) {
            OrderID = other.OrderID;
          }
          if (other.HasOrderIDEx) {
            OrderIDEx = other.OrderIDEx;
          }
          if (other.HasCode) {
            Code = other.Code;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasQty) {
            Qty = other.Qty;
          }
          if (other.HasPrice) {
            Price = other.Price;
          }
          if (other.HasCreateTime) {
            CreateTime = other.CreateTime;
          }
          if (other.HasCounterBrokerID) {
            CounterBrokerID = other.CounterBrokerID;
          }
          if (other.HasCounterBrokerName) {
            CounterBrokerName = other.CounterBrokerName;
          }
          if (other.HasSecMarket) {
            SecMarket = other.SecMarket;
          }
          if (other.HasCreateTimestamp) {
            CreateTimestamp = other.CreateTimestamp;
          }
          if (other.HasUpdateTimestamp) {
            UpdateTimestamp = other.UpdateTimestamp;
          }
          if (other.HasStatus) {
            Status = other.Status;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_orderFillFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _orderFillFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasTrdSide = input.ReadInt32(ref result.trdSide_);
                break;
              }
              case 16: {
                result.hasFillID = input.ReadUInt64(ref result.fillID_);
                break;
              }
              case 26: {
                result.hasFillIDEx = input.ReadString(ref result.fillIDEx_);
                break;
              }
              case 32: {
                result.hasOrderID = input.ReadUInt64(ref result.orderID_);
                break;
              }
              case 42: {
                result.hasOrderIDEx = input.ReadString(ref result.orderIDEx_);
                break;
              }
              case 50: {
                result.hasCode = input.ReadString(ref result.code_);
                break;
              }
              case 58: {
                result.hasName = input.ReadString(ref result.name_);
                break;
              }
              case 65: {
                result.hasQty = input.ReadDouble(ref result.qty_);
                break;
              }
              case 73: {
                result.hasPrice = input.ReadDouble(ref result.price_);
                break;
              }
              case 82: {
                result.hasCreateTime = input.ReadString(ref result.createTime_);
                break;
              }
              case 88: {
                result.hasCounterBrokerID = input.ReadInt32(ref result.counterBrokerID_);
                break;
              }
              case 98: {
                result.hasCounterBrokerName = input.ReadString(ref result.counterBrokerName_);
                break;
              }
              case 104: {
                result.hasSecMarket = input.ReadInt32(ref result.secMarket_);
                break;
              }
              case 113: {
                result.hasCreateTimestamp = input.ReadDouble(ref result.createTimestamp_);
                break;
              }
              case 121: {
                result.hasUpdateTimestamp = input.ReadDouble(ref result.updateTimestamp_);
                break;
              }
              case 128: {
                result.hasStatus = input.ReadInt32(ref result.status_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasTrdSide {
          get { return result.hasTrdSide; }
        }
        public int TrdSide {
          get { return result.TrdSide; }
          set { SetTrdSide(value); }
        }
        public Builder SetTrdSide(int value) {
          PrepareBuilder();
          result.hasTrdSide = true;
          result.trdSide_ = value;
          return this;
        }
        public Builder ClearTrdSide() {
          PrepareBuilder();
          result.hasTrdSide = false;
          result.trdSide_ = 0;
          return this;
        }
        
        public bool HasFillID {
          get { return result.hasFillID; }
        }
        [global::System.CLSCompliant(false)]
        public ulong FillID {
          get { return result.FillID; }
          set { SetFillID(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetFillID(ulong value) {
          PrepareBuilder();
          result.hasFillID = true;
          result.fillID_ = value;
          return this;
        }
        public Builder ClearFillID() {
          PrepareBuilder();
          result.hasFillID = false;
          result.fillID_ = 0UL;
          return this;
        }
        
        public bool HasFillIDEx {
          get { return result.hasFillIDEx; }
        }
        public string FillIDEx {
          get { return result.FillIDEx; }
          set { SetFillIDEx(value); }
        }
        public Builder SetFillIDEx(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasFillIDEx = true;
          result.fillIDEx_ = value;
          return this;
        }
        public Builder ClearFillIDEx() {
          PrepareBuilder();
          result.hasFillIDEx = false;
          result.fillIDEx_ = "";
          return this;
        }
        
        public bool HasOrderID {
          get { return result.hasOrderID; }
        }
        [global::System.CLSCompliant(false)]
        public ulong OrderID {
          get { return result.OrderID; }
          set { SetOrderID(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetOrderID(ulong value) {
          PrepareBuilder();
          result.hasOrderID = true;
          result.orderID_ = value;
          return this;
        }
        public Builder ClearOrderID() {
          PrepareBuilder();
          result.hasOrderID = false;
          result.orderID_ = 0UL;
          return this;
        }
        
        public bool HasOrderIDEx {
          get { return result.hasOrderIDEx; }
        }
        public string OrderIDEx {
          get { return result.OrderIDEx; }
          set { SetOrderIDEx(value); }
        }
        public Builder SetOrderIDEx(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasOrderIDEx = true;
          result.orderIDEx_ = value;
          return this;
        }
        public Builder ClearOrderIDEx() {
          PrepareBuilder();
          result.hasOrderIDEx = false;
          result.orderIDEx_ = "";
          return this;
        }
        
        public bool HasCode {
          get { return result.hasCode; }
        }
        public string Code {
          get { return result.Code; }
          set { SetCode(value); }
        }
        public Builder SetCode(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasCode = true;
          result.code_ = value;
          return this;
        }
        public Builder ClearCode() {
          PrepareBuilder();
          result.hasCode = false;
          result.code_ = "";
          return this;
        }
        
        public bool HasName {
          get { return result.hasName; }
        }
        public string Name {
          get { return result.Name; }
          set { SetName(value); }
        }
        public Builder SetName(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasName = true;
          result.name_ = value;
          return this;
        }
        public Builder ClearName() {
          PrepareBuilder();
          result.hasName = false;
          result.name_ = "";
          return this;
        }
        
        public bool HasQty {
          get { return result.hasQty; }
        }
        public double Qty {
          get { return result.Qty; }
          set { SetQty(value); }
        }
        public Builder SetQty(double value) {
          PrepareBuilder();
          result.hasQty = true;
          result.qty_ = value;
          return this;
        }
        public Builder ClearQty() {
          PrepareBuilder();
          result.hasQty = false;
          result.qty_ = 0D;
          return this;
        }
        
        public bool HasPrice {
          get { return result.hasPrice; }
        }
        public double Price {
          get { return result.Price; }
          set { SetPrice(value); }
        }
        public Builder SetPrice(double value) {
          PrepareBuilder();
          result.hasPrice = true;
          result.price_ = value;
          return this;
        }
        public Builder ClearPrice() {
          PrepareBuilder();
          result.hasPrice = false;
          result.price_ = 0D;
          return this;
        }
        
        public bool HasCreateTime {
          get { return result.hasCreateTime; }
        }
        public string CreateTime {
          get { return result.CreateTime; }
          set { SetCreateTime(value); }
        }
        public Builder SetCreateTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasCreateTime = true;
          result.createTime_ = value;
          return this;
        }
        public Builder ClearCreateTime() {
          PrepareBuilder();
          result.hasCreateTime = false;
          result.createTime_ = "";
          return this;
        }
        
        public bool HasCounterBrokerID {
          get { return result.hasCounterBrokerID; }
        }
        public int CounterBrokerID {
          get { return result.CounterBrokerID; }
          set { SetCounterBrokerID(value); }
        }
        public Builder SetCounterBrokerID(int value) {
          PrepareBuilder();
          result.hasCounterBrokerID = true;
          result.counterBrokerID_ = value;
          return this;
        }
        public Builder ClearCounterBrokerID() {
          PrepareBuilder();
          result.hasCounterBrokerID = false;
          result.counterBrokerID_ = 0;
          return this;
        }
        
        public bool HasCounterBrokerName {
          get { return result.hasCounterBrokerName; }
        }
        public string CounterBrokerName {
          get { return result.CounterBrokerName; }
          set { SetCounterBrokerName(value); }
        }
        public Builder SetCounterBrokerName(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasCounterBrokerName = true;
          result.counterBrokerName_ = value;
          return this;
        }
        public Builder ClearCounterBrokerName() {
          PrepareBuilder();
          result.hasCounterBrokerName = false;
          result.counterBrokerName_ = "";
          return this;
        }
        
        public bool HasSecMarket {
          get { return result.hasSecMarket; }
        }
        public int SecMarket {
          get { return result.SecMarket; }
          set { SetSecMarket(value); }
        }
        public Builder SetSecMarket(int value) {
          PrepareBuilder();
          result.hasSecMarket = true;
          result.secMarket_ = value;
          return this;
        }
        public Builder ClearSecMarket() {
          PrepareBuilder();
          result.hasSecMarket = false;
          result.secMarket_ = 0;
          return this;
        }
        
        public bool HasCreateTimestamp {
          get { return result.hasCreateTimestamp; }
        }
        public double CreateTimestamp {
          get { return result.CreateTimestamp; }
          set { SetCreateTimestamp(value); }
        }
        public Builder SetCreateTimestamp(double value) {
          PrepareBuilder();
          result.hasCreateTimestamp = true;
          result.createTimestamp_ = value;
          return this;
        }
        public Builder ClearCreateTimestamp() {
          PrepareBuilder();
          result.hasCreateTimestamp = false;
          result.createTimestamp_ = 0D;
          return this;
        }
        
        public bool HasUpdateTimestamp {
          get { return result.hasUpdateTimestamp; }
        }
        public double UpdateTimestamp {
          get { return result.UpdateTimestamp; }
          set { SetUpdateTimestamp(value); }
        }
        public Builder SetUpdateTimestamp(double value) {
          PrepareBuilder();
          result.hasUpdateTimestamp = true;
          result.updateTimestamp_ = value;
          return this;
        }
        public Builder ClearUpdateTimestamp() {
          PrepareBuilder();
          result.hasUpdateTimestamp = false;
          result.updateTimestamp_ = 0D;
          return this;
        }
        
        public bool HasStatus {
          get { return result.hasStatus; }
        }
        public int Status {
          get { return result.Status; }
          set { SetStatus(value); }
        }
        public Builder SetStatus(int value) {
          PrepareBuilder();
          result.hasStatus = true;
          result.status_ = value;
          return this;
        }
        public Builder ClearStatus() {
          PrepareBuilder();
          result.hasStatus = false;
          result.status_ = 0;
          return this;
        }
      }
      static OrderFill() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class MaxTrdQtys : pb::GeneratedMessage<MaxTrdQtys, MaxTrdQtys.Builder> {
      private MaxTrdQtys() { }
      private static readonly MaxTrdQtys defaultInstance = new MaxTrdQtys().MakeReadOnly();
      private static readonly string[] _maxTrdQtysFieldNames = new string[] { "maxBuyBack", "maxCashAndMarginBuy", "maxCashBuy", "maxPositionSell", "maxSellShort" };
      private static readonly uint[] _maxTrdQtysFieldTags = new uint[] { 41, 17, 9, 25, 33 };
      public static MaxTrdQtys DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override MaxTrdQtys DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override MaxTrdQtys ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_MaxTrdQtys__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<MaxTrdQtys, MaxTrdQtys.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_MaxTrdQtys__FieldAccessorTable; }
      }
      
      public const int MaxCashBuyFieldNumber = 1;
      private bool hasMaxCashBuy;
      private double maxCashBuy_;
      public bool HasMaxCashBuy {
        get { return hasMaxCashBuy; }
      }
      public double MaxCashBuy {
        get { return maxCashBuy_; }
      }
      
      public const int MaxCashAndMarginBuyFieldNumber = 2;
      private bool hasMaxCashAndMarginBuy;
      private double maxCashAndMarginBuy_;
      public bool HasMaxCashAndMarginBuy {
        get { return hasMaxCashAndMarginBuy; }
      }
      public double MaxCashAndMarginBuy {
        get { return maxCashAndMarginBuy_; }
      }
      
      public const int MaxPositionSellFieldNumber = 3;
      private bool hasMaxPositionSell;
      private double maxPositionSell_;
      public bool HasMaxPositionSell {
        get { return hasMaxPositionSell; }
      }
      public double MaxPositionSell {
        get { return maxPositionSell_; }
      }
      
      public const int MaxSellShortFieldNumber = 4;
      private bool hasMaxSellShort;
      private double maxSellShort_;
      public bool HasMaxSellShort {
        get { return hasMaxSellShort; }
      }
      public double MaxSellShort {
        get { return maxSellShort_; }
      }
      
      public const int MaxBuyBackFieldNumber = 5;
      private bool hasMaxBuyBack;
      private double maxBuyBack_;
      public bool HasMaxBuyBack {
        get { return hasMaxBuyBack; }
      }
      public double MaxBuyBack {
        get { return maxBuyBack_; }
      }
      
      public override bool IsInitialized {
        get {
          if (!hasMaxCashBuy) return false;
          if (!hasMaxPositionSell) return false;
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _maxTrdQtysFieldNames;
        if (hasMaxCashBuy) {
          output.WriteDouble(1, field_names[2], MaxCashBuy);
        }
        if (hasMaxCashAndMarginBuy) {
          output.WriteDouble(2, field_names[1], MaxCashAndMarginBuy);
        }
        if (hasMaxPositionSell) {
          output.WriteDouble(3, field_names[3], MaxPositionSell);
        }
        if (hasMaxSellShort) {
          output.WriteDouble(4, field_names[4], MaxSellShort);
        }
        if (hasMaxBuyBack) {
          output.WriteDouble(5, field_names[0], MaxBuyBack);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMaxCashBuy) {
          size += pb::CodedOutputStream.ComputeDoubleSize(1, MaxCashBuy);
        }
        if (hasMaxCashAndMarginBuy) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, MaxCashAndMarginBuy);
        }
        if (hasMaxPositionSell) {
          size += pb::CodedOutputStream.ComputeDoubleSize(3, MaxPositionSell);
        }
        if (hasMaxSellShort) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, MaxSellShort);
        }
        if (hasMaxBuyBack) {
          size += pb::CodedOutputStream.ComputeDoubleSize(5, MaxBuyBack);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static MaxTrdQtys ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static MaxTrdQtys ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static MaxTrdQtys ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static MaxTrdQtys ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static MaxTrdQtys ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static MaxTrdQtys ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static MaxTrdQtys ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static MaxTrdQtys ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static MaxTrdQtys ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static MaxTrdQtys ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private MaxTrdQtys MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(MaxTrdQtys prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<MaxTrdQtys, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(MaxTrdQtys cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private MaxTrdQtys result;
        
        private MaxTrdQtys PrepareBuilder() {
          if (resultIsReadOnly) {
            MaxTrdQtys original = result;
            result = new MaxTrdQtys();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override MaxTrdQtys MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.MaxTrdQtys.Descriptor; }
        }
        
        public override MaxTrdQtys DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.MaxTrdQtys.DefaultInstance; }
        }
        
        public override MaxTrdQtys BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is MaxTrdQtys) {
            return MergeFrom((MaxTrdQtys) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(MaxTrdQtys other) {
          if (other == global::Futu.OpenApi.Pb.TrdCommon.MaxTrdQtys.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasMaxCashBuy) {
            MaxCashBuy = other.MaxCashBuy;
          }
          if (other.HasMaxCashAndMarginBuy) {
            MaxCashAndMarginBuy = other.MaxCashAndMarginBuy;
          }
          if (other.HasMaxPositionSell) {
            MaxPositionSell = other.MaxPositionSell;
          }
          if (other.HasMaxSellShort) {
            MaxSellShort = other.MaxSellShort;
          }
          if (other.HasMaxBuyBack) {
            MaxBuyBack = other.MaxBuyBack;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_maxTrdQtysFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _maxTrdQtysFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 9: {
                result.hasMaxCashBuy = input.ReadDouble(ref result.maxCashBuy_);
                break;
              }
              case 17: {
                result.hasMaxCashAndMarginBuy = input.ReadDouble(ref result.maxCashAndMarginBuy_);
                break;
              }
              case 25: {
                result.hasMaxPositionSell = input.ReadDouble(ref result.maxPositionSell_);
                break;
              }
              case 33: {
                result.hasMaxSellShort = input.ReadDouble(ref result.maxSellShort_);
                break;
              }
              case 41: {
                result.hasMaxBuyBack = input.ReadDouble(ref result.maxBuyBack_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasMaxCashBuy {
          get { return result.hasMaxCashBuy; }
        }
        public double MaxCashBuy {
          get { return result.MaxCashBuy; }
          set { SetMaxCashBuy(value); }
        }
        public Builder SetMaxCashBuy(double value) {
          PrepareBuilder();
          result.hasMaxCashBuy = true;
          result.maxCashBuy_ = value;
          return this;
        }
        public Builder ClearMaxCashBuy() {
          PrepareBuilder();
          result.hasMaxCashBuy = false;
          result.maxCashBuy_ = 0D;
          return this;
        }
        
        public bool HasMaxCashAndMarginBuy {
          get { return result.hasMaxCashAndMarginBuy; }
        }
        public double MaxCashAndMarginBuy {
          get { return result.MaxCashAndMarginBuy; }
          set { SetMaxCashAndMarginBuy(value); }
        }
        public Builder SetMaxCashAndMarginBuy(double value) {
          PrepareBuilder();
          result.hasMaxCashAndMarginBuy = true;
          result.maxCashAndMarginBuy_ = value;
          return this;
        }
        public Builder ClearMaxCashAndMarginBuy() {
          PrepareBuilder();
          result.hasMaxCashAndMarginBuy = false;
          result.maxCashAndMarginBuy_ = 0D;
          return this;
        }
        
        public bool HasMaxPositionSell {
          get { return result.hasMaxPositionSell; }
        }
        public double MaxPositionSell {
          get { return result.MaxPositionSell; }
          set { SetMaxPositionSell(value); }
        }
        public Builder SetMaxPositionSell(double value) {
          PrepareBuilder();
          result.hasMaxPositionSell = true;
          result.maxPositionSell_ = value;
          return this;
        }
        public Builder ClearMaxPositionSell() {
          PrepareBuilder();
          result.hasMaxPositionSell = false;
          result.maxPositionSell_ = 0D;
          return this;
        }
        
        public bool HasMaxSellShort {
          get { return result.hasMaxSellShort; }
        }
        public double MaxSellShort {
          get { return result.MaxSellShort; }
          set { SetMaxSellShort(value); }
        }
        public Builder SetMaxSellShort(double value) {
          PrepareBuilder();
          result.hasMaxSellShort = true;
          result.maxSellShort_ = value;
          return this;
        }
        public Builder ClearMaxSellShort() {
          PrepareBuilder();
          result.hasMaxSellShort = false;
          result.maxSellShort_ = 0D;
          return this;
        }
        
        public bool HasMaxBuyBack {
          get { return result.hasMaxBuyBack; }
        }
        public double MaxBuyBack {
          get { return result.MaxBuyBack; }
          set { SetMaxBuyBack(value); }
        }
        public Builder SetMaxBuyBack(double value) {
          PrepareBuilder();
          result.hasMaxBuyBack = true;
          result.maxBuyBack_ = value;
          return this;
        }
        public Builder ClearMaxBuyBack() {
          PrepareBuilder();
          result.hasMaxBuyBack = false;
          result.maxBuyBack_ = 0D;
          return this;
        }
      }
      static MaxTrdQtys() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdCommon.Descriptor, null);
      }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class TrdFilterConditions : pb::GeneratedMessage<TrdFilterConditions, TrdFilterConditions.Builder> {
      private TrdFilterConditions() { }
      private static readonly TrdFilterConditions defaultInstance = new TrdFilterConditions().MakeReadOnly();
      private static readonly string[] _trdFilterConditionsFieldNames = new string[] { "beginTime", "codeList", "endTime", "idList" };
      private static readonly uint[] _trdFilterConditionsFieldTags = new uint[] { 26, 10, 34, 16 };
      public static TrdFilterConditions DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override TrdFilterConditions DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override TrdFilterConditions ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_TrdFilterConditions__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<TrdFilterConditions, TrdFilterConditions.Builder> InternalFieldAccessors {
        get { return global::Futu.OpenApi.Pb.TrdCommon.internal__static_Trd_Common_TrdFilterConditions__FieldAccessorTable; }
      }
      
      public const int CodeListFieldNumber = 1;
      private pbc::PopsicleList<string> codeList_ = new pbc::PopsicleList<string>();
      public scg::IList<string> CodeListList {
        get { return pbc::Lists.AsReadOnly(codeList_); }
      }
      public int CodeListCount {
        get { return codeList_.Count; }
      }
      public string GetCodeList(int index) {
        return codeList_[index];
      }
      
      public const int IdListFieldNumber = 2;
      private pbc::PopsicleList<ulong> idList_ = new pbc::PopsicleList<ulong>();
      [global::System.CLSCompliant(false)]
      public scg::IList<ulong> IdListList {
        get { return pbc::Lists.AsReadOnly(idList_); }
      }
      public int IdListCount {
        get { return idList_.Count; }
      }
      [global::System.CLSCompliant(false)]
      public ulong GetIdList(int index) {
        return idList_[index];
      }
      
      public const int BeginTimeFieldNumber = 3;
      private bool hasBeginTime;
      private string beginTime_ = "";
      public bool HasBeginTime {
        get { return hasBeginTime; }
      }
      public string BeginTime {
        get { return beginTime_; }
      }
      
      public const int EndTimeFieldNumber = 4;
      private bool hasEndTime;
      private string endTime_ = "";
      public bool HasEndTime {
        get { return hasEndTime; }
      }
      public string EndTime {
        get { return endTime_; }
      }
      
      public override bool IsInitialized {
        get {
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        CalcSerializedSize();
        string[] field_names = _trdFilterConditionsFieldNames;
        if (codeList_.Count > 0) {
          output.WriteStringArray(1, field_names[1], codeList_);
        }
        if (idList_.Count > 0) {
          output.WriteUInt64Array(2, field_names[3], idList_);
        }
        if (hasBeginTime) {
          output.WriteString(3, field_names[0], BeginTime);
        }
        if (hasEndTime) {
          output.WriteString(4, field_names[2], EndTime);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          return CalcSerializedSize();
        }
      }
      
      private int CalcSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        {
          int dataSize = 0;
          foreach (string element in CodeListList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * codeList_.Count;
        }
        {
          int dataSize = 0;
          foreach (ulong element in IdListList) {
            dataSize += pb::CodedOutputStream.ComputeUInt64SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * idList_.Count;
        }
        if (hasBeginTime) {
          size += pb::CodedOutputStream.ComputeStringSize(3, BeginTime);
        }
        if (hasEndTime) {
          size += pb::CodedOutputStream.ComputeStringSize(4, EndTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
      public static TrdFilterConditions ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static TrdFilterConditions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static TrdFilterConditions ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static TrdFilterConditions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static TrdFilterConditions ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static TrdFilterConditions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static TrdFilterConditions ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static TrdFilterConditions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static TrdFilterConditions ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static TrdFilterConditions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private TrdFilterConditions MakeReadOnly() {
        codeList_.MakeReadOnly();
        idList_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(TrdFilterConditions prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<TrdFilterConditions, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(TrdFilterConditions cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private TrdFilterConditions result;
        
        private TrdFilterConditions PrepareBuilder() {
          if (resultIsReadOnly) {
            TrdFilterConditions original = result;
            result = new TrdFilterConditions();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override TrdFilterConditions MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.TrdFilterConditions.Descriptor; }
        }
        
        public override TrdFilterConditions DefaultInstanceForType {
          get { return global::Futu.OpenApi.Pb.TrdCommon.TrdFilterConditions.DefaultInstance; }
        }
        
        public override TrdFilterConditions BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is TrdFilterConditions) {
            return MergeFrom((TrdFilterConditions) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(TrdFilterConditions other) {
          if (other == global::Futu.OpenApi.Pb.TrdCommon.TrdFilterConditions.DefaultInstance) return this;
          PrepareBuilder();
          if (other.codeList_.Count != 0) {
            result.codeList_.Add(other.codeList_);
          }
          if (other.idList_.Count != 0) {
            result.idList_.Add(other.idList_);
          }
          if (other.HasBeginTime) {
            BeginTime = other.BeginTime;
          }
          if (other.HasEndTime) {
            EndTime = other.EndTime;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_trdFilterConditionsFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _trdFilterConditionsFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 10: {
                input.ReadStringArray(tag, field_name, result.codeList_);
                break;
              }
              case 18:
              case 16: {
                input.ReadUInt64Array(tag, field_name, result.idList_);
                break;
              }
              case 26: {
                result.hasBeginTime = input.ReadString(ref result.beginTime_);
                break;
              }
              case 34: {
                result.hasEndTime = input.ReadString(ref result.endTime_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public pbc::IPopsicleList<string> CodeListList {
          get { return PrepareBuilder().codeList_; }
        }
        public int CodeListCount {
          get { return result.CodeListCount; }
        }
        public string GetCodeList(int index) {
          return result.GetCodeList(index);
        }
        public Builder SetCodeList(int index, string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.codeList_[index] = value;
          return this;
        }
        public Builder AddCodeList(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.codeList_.Add(value);
          return this;
        }
        public Builder AddRangeCodeList(scg::IEnumerable<string> values) {
          PrepareBuilder();
          result.codeList_.Add(values);
          return this;
        }
        public Builder ClearCodeList() {
          PrepareBuilder();
          result.codeList_.Clear();
          return this;
        }
        
        [global::System.CLSCompliant(false)]
        public pbc::IPopsicleList<ulong> IdListList {
          get { return PrepareBuilder().idList_; }
        }
        public int IdListCount {
          get { return result.IdListCount; }
        }
        [global::System.CLSCompliant(false)]
        public ulong GetIdList(int index) {
          return result.GetIdList(index);
        }
        [global::System.CLSCompliant(false)]
        public Builder SetIdList(int index, ulong value) {
          PrepareBuilder();
          result.idList_[index] = value;
          return this;
        }
        [global::System.CLSCompliant(false)]
        public Builder AddIdList(ulong value) {
          PrepareBuilder();
          result.idList_.Add(value);
          return this;
        }
        [global::System.CLSCompliant(false)]
        public Builder AddRangeIdList(scg::IEnumerable<ulong> values) {
          PrepareBuilder();
          result.idList_.Add(values);
          return this;
        }
        public Builder ClearIdList() {
          PrepareBuilder();
          result.idList_.Clear();
          return this;
        }
        
        public bool HasBeginTime {
          get { return result.hasBeginTime; }
        }
        public string BeginTime {
          get { return result.BeginTime; }
          set { SetBeginTime(value); }
        }
        public Builder SetBeginTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasBeginTime = true;
          result.beginTime_ = value;
          return this;
        }
        public Builder ClearBeginTime() {
          PrepareBuilder();
          result.hasBeginTime = false;
          result.beginTime_ = "";
          return this;
        }
        
        public bool HasEndTime {
          get { return result.hasEndTime; }
        }
        public string EndTime {
          get { return result.EndTime; }
          set { SetEndTime(value); }
        }
        public Builder SetEndTime(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasEndTime = true;
          result.endTime_ = value;
          return this;
        }
        public Builder ClearEndTime() {
          PrepareBuilder();
          result.hasEndTime = false;
          result.endTime_ = "";
          return this;
        }
      }
      static TrdFilterConditions() {
        object.ReferenceEquals(global::Futu.OpenApi.Pb.TrdCommon.Descriptor, null);
      }
    }
    
    #endregion
    
  }
}

#endregion Designer generated code
